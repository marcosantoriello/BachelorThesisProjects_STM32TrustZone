
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c08  08008c08  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08008c10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000624  2000000c  08008c19  0000a00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000630  08008c19  0000a630  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176e2  00000000  00000000  0000a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cf6  00000000  00000000  00021721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001250  00000000  00000000  00024418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e13  00000000  00000000  00025668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036309  00000000  00000000  0002647b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000162b2  00000000  00000000  0005c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159cbb  00000000  00000000  00072a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc6f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e24  00000000  00000000  001cc734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001d1558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008ae8 	.word	0x08008ae8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08008ae8 	.word	0x08008ae8

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc6c 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f824 	bl	8000654 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800060c:	f000 f886 	bl	800071c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f99e 	bl	8000950 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000614:	f000 f890 	bl	8000738 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000618:	f000 f8d2 	bl	80007c0 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800061c:	f000 f8e4 	bl	80007e8 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f918 	bl	8000854 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f962 	bl	80008ec <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Turn LED ON
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <main+0x50>)
 800062e:	f001 fc75 	bl	8001f1c <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000636:	f000 fd19 	bl	800106c <HAL_Delay>

	  // Turn LED OFF
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <main+0x50>)
 8000640:	f001 fc6c 	bl	8001f1c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000648:	f000 fd10 	bl	800106c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800064c:	bf00      	nop
 800064e:	e7eb      	b.n	8000628 <main+0x28>
 8000650:	42020400 	.word	0x42020400

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	@ 0x78
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2260      	movs	r2, #96	@ 0x60
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f008 fa13 	bl	8008a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000678:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800067c:	f002 fd0e 	bl	800309c <HAL_PWREx_ControlVoltageScaling>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000686:	f000 fa0b 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800068a:	2332      	movs	r3, #50	@ 0x32
 800068c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006bc:	2350      	movs	r3, #80	@ 0x50
 80006be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fdeb 	bl	80032b4 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f9dc 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	231f      	movs	r3, #31
 80006ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fcb1 	bl	800406c <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 f9c6 	bl	8000aa0 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3778      	adds	r7, #120	@ 0x78
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000720:	f002 fda8 	bl	8003274 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000724:	2002      	movs	r0, #2
 8000726:	f002 fd45 	bl	80031b4 <HAL_PWREx_ConfigSupply>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000730:	f000 f9b6 	bl	8000aa0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <MX_ADC1_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800075c:	2204      	movs	r2, #4
 800075e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000770:	2201      	movs	r2, #1
 8000772:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000786:	2200      	movs	r2, #0
 8000788:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800078c:	2200      	movs	r2, #0
 800078e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000792:	2200      	movs	r2, #0
 8000794:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_ADC1_Init+0x80>)
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_ADC1_Init+0x80>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_ADC1_Init+0x80>)
 80007a6:	f000 fd83 	bl	80012b0 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f976 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000028 	.word	0x20000028
 80007bc:	42028000 	.word	0x42028000

080007c0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fbc1 	bl	8001f4c <HAL_ICACHE_ConfigAssociativityMode>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007d0:	f000 f966 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007d4:	f001 fbda 	bl	8001f8c <HAL_ICACHE_Enable>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007de:	f000 f95f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80007fe:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000802:	f7ff fee1 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff fec2 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff febf 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000816:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <MX_UCPD1_Init+0x64>)
 8000826:	f007 fae8 	bl	8007dfa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800082a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800082e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_UCPD1_Init+0x68>)
 800083e:	f007 fadc 	bl	8007dfa <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	42020400 	.word	0x42020400
 8000850:	42020000 	.word	0x42020000

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <MX_USART1_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800089e:	f006 fc4d 	bl	800713c <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f8fa 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008b0:	f007 f88e 	bl	80079d0 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f8f1 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008c2:	f007 f8c3 	bl	8007a4c <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f8e8 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008d2:	f007 f844 	bl	800795e <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f8e0 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2206      	movs	r2, #6
 80008fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	2202      	movs	r2, #2
 8000900:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000904:	2202      	movs	r2, #2
 8000906:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	f001 fb3a 	bl	8001fac <HAL_PCD_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800093e:	f000 f8af 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000148 	.word	0x20000148
 800094c:	42040000 	.word	0x42040000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b49      	ldr	r3, [pc, #292]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	4a47      	ldr	r2, [pc, #284]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000976:	4b45      	ldr	r3, [pc, #276]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 8000978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000994:	4b3d      	ldr	r3, [pc, #244]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 8000996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a8:	4a38      	ldr	r2, [pc, #224]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b2:	4b36      	ldr	r3, [pc, #216]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c6:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <MX_GPIO_Init+0x13c>)
 80009d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2104      	movs	r1, #4
 80009e2:	482b      	ldr	r0, [pc, #172]	@ (8000a90 <MX_GPIO_Init+0x140>)
 80009e4:	f001 fa9a 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	@ 0x80
 80009ec:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0x144>)
 80009ee:	f001 fa95 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4828      	ldr	r0, [pc, #160]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009f8:	f001 fa90 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a02:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4820      	ldr	r0, [pc, #128]	@ (8000a94 <MX_GPIO_Init+0x144>)
 8000a12:	f001 f8ab 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481b      	ldr	r0, [pc, #108]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000a2c:	f001 f89e 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a30:	2304      	movs	r3, #4
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000a48:	f001 f890 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_GPIO_Init+0x144>)
 8000a64:	f001 f882 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000a80:	f001 f874 	bl	8001b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	46020c00 	.word	0x46020c00
 8000a90:	42021800 	.word	0x42021800
 8000a94:	42020800 	.word	0x42020800
 8000a98:	42020400 	.word	0x42020400
 8000a9c:	10210000 	.word	0x10210000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x38>)
 8000ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_MspInit+0x38>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x38>)
 8000ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ad0:	f002 fbe0 	bl	8003294 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f000 ff62 	bl	800199e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	46020c00 	.word	0x46020c00

08000ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ba      	sub	sp, #232	@ 0xe8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	22c0      	movs	r2, #192	@ 0xc0
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 ffc0 	bl	8008a8e <memset>
  if(hadc->Instance==ADC1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <HAL_ADC_MspInit+0xbc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d140      	bne.n	8000b9a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fe6b 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000b3c:	f7ff ffb0 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b46:	4a18      	ldr	r2, [pc, #96]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b64:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_ADC_MspInit+0xc0>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <HAL_ADC_MspInit+0xc4>)
 8000b96:	f000 ffe9 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	37e8      	adds	r7, #232	@ 0xe8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	42028000 	.word	0x42028000
 8000ba8:	46020c00 	.word	0x46020c00
 8000bac:	42020800 	.word	0x42020800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	22c0      	movs	r2, #192	@ 0xc0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 ff5c 	bl	8008a8e <memset>
  if(huart->Instance==USART1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a26      	ldr	r2, [pc, #152]	@ (8000c74 <HAL_UART_MspInit+0xc4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d145      	bne.n	8000c6c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000be0:	f04f 0201 	mov.w	r2, #1
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bec:	2300      	movs	r3, #0
 8000bee:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fe09 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000c00:	f7ff ff4e 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c28:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_UART_MspInit+0xc8>)
 8000c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000c40:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0xcc>)
 8000c68:	f000 ff80 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37e8      	adds	r7, #232	@ 0xe8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40013800 	.word	0x40013800
 8000c78:	46020c00 	.word	0x46020c00
 8000c7c:	42020000 	.word	0x42020000

08000c80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0bc      	sub	sp, #240	@ 0xf0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	22c0      	movs	r2, #192	@ 0xc0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f007 fef4 	bl	8008a8e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a3c      	ldr	r2, [pc, #240]	@ (8000d9c <HAL_PCD_MspInit+0x11c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d171      	bne.n	8000d94 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cb0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fda0 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000cd2:	f7ff fee5 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cdc:	4a30      	ldr	r2, [pc, #192]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000cf4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4822      	ldr	r0, [pc, #136]	@ (8000da4 <HAL_PCD_MspInit+0x124>)
 8000d1c:	f000 ff26 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d119      	bne.n	8000d80 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d52:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000d6a:	f002 fa73 	bl	8003254 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_PCD_MspInit+0x120>)
 8000d76:	f023 0304 	bic.w	r3, r3, #4
 8000d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d7e:	e001      	b.n	8000d84 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000d80:	f002 fa68 	bl	8003254 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2049      	movs	r0, #73	@ 0x49
 8000d8a:	f000 fe13 	bl	80019b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d8e:	2049      	movs	r0, #73	@ 0x49
 8000d90:	f000 fe2a 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	37f0      	adds	r7, #240	@ 0xf0
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	42040000 	.word	0x42040000
 8000da0:	46020c00 	.word	0x46020c00
 8000da4:	42020000 	.word	0x42020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfe:	f000 f915 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <OTG_FS_IRQHandler+0x10>)
 8000e0e:	f001 f9e5 	bl	80021dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000148 	.word	0x20000148

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <SystemInit+0x68>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <SystemInit+0x68>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <SystemInit+0x6c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <SystemInit+0x6c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <SystemInit+0x6c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <SystemInit+0x6c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <SystemInit+0x6c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <SystemInit+0x6c>)
 8000e4e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e52:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <SystemInit+0x6c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <SystemInit+0x6c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <SystemInit+0x6c>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <SystemInit+0x6c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SystemInit+0x68>)
 8000e72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e76:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	46020c00 	.word	0x46020c00

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e90:	f7ff ffc4 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea0:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
	ldr	r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <LoopForever+0x16>)
	cmp	r2, r3
 8000eb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f007 fdf1 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff fb9f 	bl	8000600 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000ec4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000ec8:	08008c10 	.word	0x08008c10
	ldr	r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed0:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000ed4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ed8:	20000630 	.word	0x20000630

08000edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_Init+0x50>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_Init+0x50>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fd54 	bl	800199e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ef6:	f003 faab 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8000efa:	4602      	mov	r2, r0
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_Init+0x54>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <HAL_Init+0x58>)
 8000f06:	5ccb      	ldrb	r3, [r1, r3]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <HAL_Init+0x5c>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f10:	2004      	movs	r0, #4
 8000f12:	f000 fd99 	bl	8001a48 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f812 	bl	8000f40 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e002      	b.n	8000f2c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f26:	f7ff fdc1 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40022000 	.word	0x40022000
 8000f34:	46020c00 	.word	0x46020c00
 8000f38:	08008b00 	.word	0x08008b00
 8000f3c:	20000000 	.word	0x20000000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f4c:	4b33      	ldr	r3, [pc, #204]	@ (800101c <HAL_InitTick+0xdc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e05c      	b.n	8001012 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f58:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <HAL_InitTick+0xe0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d10c      	bne.n	8000f7e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <HAL_InitTick+0xe4>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <HAL_InitTick+0xdc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e037      	b.n	8000fee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f7e:	f000 fdbb 	bl	8001af8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f82:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d023      	beq.n	8000fd2 <HAL_InitTick+0x92>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d82d      	bhi.n	8000fec <HAL_InitTick+0xac>
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_InitTick+0x5e>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f9c:	e026      	b.n	8000fec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <HAL_InitTick+0xe4>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <HAL_InitTick+0xdc>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
        break;
 8000fb6:	e01a      	b.n	8000fee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_InitTick+0xdc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fc6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	60fb      	str	r3, [r7, #12]
        break;
 8000fd0:	e00d      	b.n	8000fee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0xdc>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe8:	60fb      	str	r3, [r7, #12]
        break;
 8000fea:	e000      	b.n	8000fee <HAL_InitTick+0xae>
        break;
 8000fec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fd08 	bl	8001a04 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e009      	b.n	8001012 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001006:	f000 fcd5 	bl	80019b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_InitTick+0xe8>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	e000e010 	.word	0xe000e010
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	2000062c 	.word	0x2000062c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000062c 	.word	0x2000062c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LL_ADC_SetResolution+0x3c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d104      	bne.n	80010fc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f023 020c 	bic.w	r2, r3, #12
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60da      	str	r2, [r3, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	46021000 	.word	0x46021000

0800111c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800112e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800113e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	2a00      	cmp	r2, #0
 8001146:	d002      	beq.n	800114e <LL_ADC_SetGainCompensation+0x32>
 8001148:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800114c:	e000      	b.n	8001150 <LL_ADC_SetGainCompensation+0x34>
 800114e:	2200      	movs	r2, #0
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2107      	movs	r1, #7
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	431a      	orrs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6093      	str	r3, [r2, #8]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001200:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001228:	d101      	bne.n	800122e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <LL_ADC_IsEnabled+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_IsEnabled+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d101      	bne.n	800127a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d101      	bne.n	80012a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e2b3      	b.n	8001838 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8b      	ldr	r2, [pc, #556]	@ (800150c <HAL_ADC_Init+0x25c>)
 80012de:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fbfd 	bl	8000ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff45 	bl	80011a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff7a 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff5e 	bl	80011ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001330:	4b77      	ldr	r3, [pc, #476]	@ (8001510 <HAL_ADC_Init+0x260>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	4a77      	ldr	r2, [pc, #476]	@ (8001514 <HAL_ADC_Init+0x264>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	3301      	adds	r3, #1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001344:	e002      	b.n	800134c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff5c 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10e      	bne.n	8001380 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff6c 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 800138a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 8244 	bne.w	8001822 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f040 8240 	bne.w	8001822 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80013a6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013aa:	f043 0202 	orr.w	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff40 	bl	800123c <LL_ADC_IsEnabled>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d140      	bne.n	8001444 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a51      	ldr	r2, [pc, #324]	@ (800150c <HAL_ADC_Init+0x25c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d028      	beq.n	800141e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a51      	ldr	r2, [pc, #324]	@ (8001518 <HAL_ADC_Init+0x268>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d109      	bne.n	80013ea <HAL_ADC_Init+0x13a>
 80013d6:	4850      	ldr	r0, [pc, #320]	@ (8001518 <HAL_ADC_Init+0x268>)
 80013d8:	f7ff ff30 	bl	800123c <LL_ADC_IsEnabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	e008      	b.n	80013fc <HAL_ADC_Init+0x14c>
 80013ea:	4848      	ldr	r0, [pc, #288]	@ (800150c <HAL_ADC_Init+0x25c>)
 80013ec:	f7ff ff26 	bl	800123c <LL_ADC_IsEnabled>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d021      	beq.n	8001444 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <HAL_ADC_Init+0x268>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_ADC_Init+0x15e>
 800140a:	4a44      	ldr	r2, [pc, #272]	@ (800151c <HAL_ADC_Init+0x26c>)
 800140c:	e000      	b.n	8001410 <HAL_ADC_Init+0x160>
 800140e:	4a44      	ldr	r2, [pc, #272]	@ (8001520 <HAL_ADC_Init+0x270>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fe4c 	bl	80010b4 <LL_ADC_SetCommonClock>
 800141c:	e012      	b.n	8001444 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4619      	mov	r1, r3
 8001428:	4610      	mov	r0, r2
 800142a:	f7ff fe57 	bl	80010dc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <HAL_ADC_Init+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800143e:	4938      	ldr	r1, [pc, #224]	@ (8001520 <HAL_ADC_Init+0x270>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a30      	ldr	r2, [pc, #192]	@ (800150c <HAL_ADC_Init+0x25c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d010      	beq.n	8001470 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001454:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800145a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001460:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001468:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800146a:	4313      	orrs	r3, r2
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	e030      	b.n	80014d2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7f1b      	ldrb	r3, [r3, #28]
 8001474:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800147c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800147e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001484:	2a00      	cmp	r2, #0
 8001486:	d002      	beq.n	800148e <HAL_ADC_Init+0x1de>
 8001488:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800148c:	e000      	b.n	8001490 <HAL_ADC_Init+0x1e0>
 800148e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001490:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001496:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da04      	bge.n	80014aa <HAL_ADC_Init+0x1fa>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014a8:	e001      	b.n	80014ae <HAL_ADC_Init+0x1fe>
 80014aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80014ae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4918      	ldr	r1, [pc, #96]	@ (8001518 <HAL_ADC_Init+0x268>)
 80014b6:	428b      	cmp	r3, r1
 80014b8:	d103      	bne.n	80014c2 <HAL_ADC_Init+0x212>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014c0:	e003      	b.n	80014ca <HAL_ADC_Init+0x21a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014c8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80014ca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d12f      	bne.n	800153c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <HAL_ADC_Init+0x25c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	3b01      	subs	r3, #1
 80014ec:	045b      	lsls	r3, r3, #17
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	e022      	b.n	800153c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	e018      	b.n	800153c <HAL_ADC_Init+0x28c>
 800150a:	bf00      	nop
 800150c:	46021000 	.word	0x46021000
 8001510:	20000000 	.word	0x20000000
 8001514:	053e2d63 	.word	0x053e2d63
 8001518:	42028000 	.word	0x42028000
 800151c:	42028308 	.word	0x42028308
 8001520:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a92      	ldr	r2, [pc, #584]	@ (800178c <HAL_ADC_Init+0x4dc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d018      	beq.n	8001578 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001552:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155a:	4313      	orrs	r3, r2
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	4313      	orrs	r3, r2
 8001560:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4b89      	ldr	r3, [pc, #548]	@ (8001790 <HAL_ADC_Init+0x4e0>)
 800156a:	4013      	ands	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	6a39      	ldr	r1, [r7, #32]
 8001572:	430b      	orrs	r3, r1
 8001574:	60d3      	str	r3, [r2, #12]
 8001576:	e031      	b.n	80015dc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001584:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158c:	4313      	orrs	r3, r2
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	4313      	orrs	r3, r2
 8001592:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <HAL_ADC_Init+0x4e4>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	@ (800178c <HAL_ADC_Init+0x4dc>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	f000 8093 	beq.w	800170e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fe38 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 80015f2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fe45 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 80015fe:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d161      	bne.n	80016ca <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d15e      	bne.n	80016ca <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7f1b      	ldrb	r3, [r3, #28]
 8001610:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4960      	ldr	r1, [pc, #384]	@ (8001798 <HAL_ADC_Init+0x4e8>)
 8001618:	428b      	cmp	r3, r1
 800161a:	d102      	bne.n	8001622 <HAL_ADC_Init+0x372>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001620:	e002      	b.n	8001628 <HAL_ADC_Init+0x378>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001626:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001628:	4313      	orrs	r3, r2
 800162a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	430b      	orrs	r3, r1
 8001642:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff fd60 	bl	800111c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001662:	2b01      	cmp	r3, #1
 8001664:	d11e      	bne.n	80016a4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_ADC_Init+0x4ec>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800167a:	0411      	lsls	r1, r2, #16
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001692:	0892      	lsrs	r2, r2, #2
 8001694:	430a      	orrs	r2, r1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	e007      	b.n	80016b4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10c      	bne.n	80016ec <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f023 010f 	bic.w	r1, r3, #15
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ea:	e007      	b.n	80016fc <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020f 	bic.w	r2, r2, #15
 80016fa:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001700:	f023 0303 	bic.w	r3, r3, #3
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800170c:	e092      	b.n	8001834 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001714:	2b01      	cmp	r3, #1
 8001716:	d111      	bne.n	800173c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001720:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001726:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800172c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4313      	orrs	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_ADC_Init+0x4f0>)
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	69f9      	ldr	r1, [r7, #28]
 800174c:	430b      	orrs	r3, r1
 800174e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001758:	461a      	mov	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f7ff fd01 	bl	8001162 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	461a      	mov	r2, r3
 800176a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800176e:	f7ff fcf8 	bl	8001162 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d114      	bne.n	80017a4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f062 020f 	orn	r2, r2, #15
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
 800178a:	e024      	b.n	80017d6 <HAL_ADC_Init+0x526>
 800178c:	46021000 	.word	0x46021000
 8001790:	fff0c013 	.word	0xfff0c013
 8001794:	ffde800d 	.word	0xffde800d
 8001798:	42028000 	.word	0x42028000
 800179c:	fc00f81e 	.word	0xfc00f81e
 80017a0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017ac:	d113      	bne.n	80017d6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	f003 031c 	and.w	r3, r3, #28
 80017c0:	f06f 020f 	mvn.w	r2, #15
 80017c4:	fa02 f103 	lsl.w	r1, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_ADC_Init+0x590>)
 80017de:	4013      	ands	r3, r2
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80017f0:	f023 0303 	bic.w	r3, r3, #3
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017fc:	e01a      	b.n	8001834 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001802:	f023 0312 	bic.w	r3, r3, #18
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001820:	e008      	b.n	8001834 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001838:	4618      	mov	r0, r3
 800183a:	3728      	adds	r7, #40	@ 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	833ffff3 	.word	0x833ffff3

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff4c 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c2:	f7ff ff63 	bl	800188c <__NVIC_GetPriorityGrouping>
 80019c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7ff ffb3 	bl	8001938 <NVIC_EncodePriority>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff82 	bl	80018e4 <__NVIC_SetPriority>
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff56 	bl	80018a8 <__NVIC_EnableIRQ>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00d      	b.n	8001a36 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <HAL_SYSTICK_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_SYSTICK_Config+0x40>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_SYSTICK_Config+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <HAL_SYSTICK_Config+0x40>)
 8001a2e:	f043 0303 	orr.w	r3, r3, #3
 8001a32:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d844      	bhi.n	8001ae0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a56:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a7f 	.word	0x08001a7f
 8001a60:	08001a9d 	.word	0x08001a9d
 8001a64:	08001abf 	.word	0x08001abf
 8001a68:	08001ae1 	.word	0x08001ae1
 8001a6c:	08001a71 	.word	0x08001a71
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6013      	str	r3, [r2, #0]
      break;
 8001a7c:	e031      	b.n	8001ae2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a92:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a9a:	e022      	b.n	8001ae2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001abc:	e011      	b.n	8001ae2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ad6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001ade:	e000      	b.n	8001ae2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001ae0:	bf00      	nop
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010
 8001af4:	46020c00 	.word	0x46020c00

08001af8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e021      	b.n	8001b54 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b16:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001b1a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b22:	d011      	beq.n	8001b48 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b2a:	d810      	bhi.n	8001b4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b38:	d003      	beq.n	8001b42 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001b3a:	e008      	b.n	8001b4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
        break;
 8001b40:	e008      	b.n	8001b54 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
        break;
 8001b46:	e005      	b.n	8001b54 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	607b      	str	r3, [r7, #4]
        break;
 8001b4c:	e002      	b.n	8001b54 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
        break;
 8001b52:	bf00      	nop
    }
  }
  return systick_source;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010
 8001b68:	46020c00 	.word	0x46020c00

08001b6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b7e:	e1ba      	b.n	8001ef6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 81aa 	beq.w	8001ef0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a55      	ldr	r2, [pc, #340]	@ (8001cf4 <HAL_GPIO_Init+0x188>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d15d      	bne.n	8001c60 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001baa:	2201      	movs	r2, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001bd4:	4a48      	ldr	r2, [pc, #288]	@ (8001cf8 <HAL_GPIO_Init+0x18c>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bdc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001bde:	4a46      	ldr	r2, [pc, #280]	@ (8001cf8 <HAL_GPIO_Init+0x18c>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3208      	adds	r2, #8
 8001bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220b      	movs	r2, #11
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69f9      	ldr	r1, [r7, #28]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e067      	b.n	8001d30 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x104>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b12      	cmp	r3, #18
 8001c6e:	d145      	bne.n	8001cfc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69f9      	ldr	r1, [r7, #28]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e01e      	b.n	8001d30 <HAL_GPIO_Init+0x1c4>
 8001cf2:	bf00      	nop
 8001cf4:	46020000 	.word	0x46020000
 8001cf8:	08008b58 	.word	0x08008b58
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d00b      	beq.n	8001d50 <HAL_GPIO_Init+0x1e4>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d44:	2b11      	cmp	r3, #17
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d130      	bne.n	8001db2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001d86:	2201      	movs	r2, #1
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 0201 	and.w	r2, r3, #1
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d017      	beq.n	8001dea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d07c      	beq.n	8001ef0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001df6:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3318      	adds	r3, #24
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0a9a      	lsrs	r2, r3, #10
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <HAL_GPIO_Init+0x3ac>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	00d2      	lsls	r2, r2, #3
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e32:	4938      	ldr	r1, [pc, #224]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3318      	adds	r3, #24
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001e64:	4a2b      	ldr	r2, [pc, #172]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001eba:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_GPIO_Init+0x3a8>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae3d 	bne.w	8001b80 <HAL_GPIO_Init+0x14>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	@ 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	46022000 	.word	0x46022000
 8001f18:	002f7f7f 	.word	0x002f7f7f

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e007      	b.n	8001f7a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0204 	bic.w	r2, r3, #4
 8001f72:	4905      	ldr	r1, [pc, #20]	@ (8001f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40030400 	.word	0x40030400

08001f8c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_ICACHE_Enable+0x1c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_ICACHE_Enable+0x1c>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40030400 	.word	0x40030400

08001fac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e108      	b.n	80021d0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d106      	bne.n	8001fde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe fe51 	bl	8000c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a7b      	ldr	r2, [pc, #492]	@ (80021d8 <HAL_PCD_Init+0x22c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d102      	bne.n	8001ff4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 f84b 	bl	8008094 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7c1a      	ldrb	r2, [r3, #16]
 8002006:	f88d 2000 	strb.w	r2, [sp]
 800200a:	3304      	adds	r3, #4
 800200c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200e:	f005 ff72 	bl	8007ef6 <USB_CoreInit>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d5      	b.n	80021d0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f006 f843 	bl	80080b6 <USB_SetCurrentMode>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0c6      	b.n	80021d0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e04a      	b.n	80020de <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3315      	adds	r3, #21
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3314      	adds	r3, #20
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	b298      	uxth	r0, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	332e      	adds	r3, #46	@ 0x2e
 8002084:	4602      	mov	r2, r0
 8002086:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3318      	adds	r3, #24
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	331c      	adds	r3, #28
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3320      	adds	r3, #32
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3324      	adds	r3, #36	@ 0x24
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3af      	bcc.n	8002048 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e044      	b.n	8002178 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3b5      	bcc.n	80020ee <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7c1a      	ldrb	r2, [r3, #16]
 800218a:	f88d 2000 	strb.w	r2, [sp]
 800218e:	3304      	adds	r3, #4
 8002190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002192:	f005 ffdd 	bl	8008150 <USB_DevInit>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e013      	b.n	80021d0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7b1b      	ldrb	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 ff3c 	bl	800303c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 faeb 	bl	80087a4 <USB_DevDisconnect>

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	42040000 	.word	0x42040000

080021dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08d      	sub	sp, #52	@ 0x34
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f006 fb8a 	bl	800890c <USB_GetMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 84b9 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f006 faee 	bl	80087e6 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 84af 	beq.w	8002b70 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f006 fadb 	bl	80087e6 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 0202 	and.w	r2, r2, #2
 8002248:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f006 fac9 	bl	80087e6 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b10      	cmp	r3, #16
 800225c:	d161      	bne.n	8002322 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0210 	bic.w	r2, r2, #16
 800226c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	0c5b      	lsrs	r3, r3, #17
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	2b02      	cmp	r3, #2
 8002298:	d124      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d035      	beq.n	8002312 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f006 fa1b 	bl	80086f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	441a      	add	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022dc:	441a      	add	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	e016      	b.n	8002312 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	0c5b      	lsrs	r3, r3, #17
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d110      	bne.n	8002312 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022f6:	2208      	movs	r2, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	6a38      	ldr	r0, [r7, #32]
 80022fc:	f006 f9fa 	bl	80086f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230c:	441a      	add	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0210 	orr.w	r2, r2, #16
 8002320:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f006 fa5d 	bl	80087e6 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002336:	f040 80a7 	bne.w	8002488 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f006 fa62 	bl	800880c <USB_ReadDevAllOutEpInterrupt>
 8002348:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800234a:	e099      	b.n	8002480 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800234c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 808e 	beq.w	8002474 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f006 fa86 	bl	8008874 <USB_ReadDevOutEPInterrupt>
 8002368:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fd29 	bl	8002de0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	2308      	movs	r3, #8
 80023a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fdff 	bl	8002fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	2310      	movs	r3, #16
 80023cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d030      	beq.n	800243a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b80      	cmp	r3, #128	@ 0x80
 80023e2:	d109      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	78db      	ldrb	r3, [r3, #3]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fbf2 	bl	8002c0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2302      	movs	r3, #2
 8002438:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	2320      	movs	r3, #32
 8002454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002472:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	3301      	adds	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	f47f af62 	bne.w	800234c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f006 f9aa 	bl	80087e6 <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800249c:	f040 80db 	bne.w	8002656 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f006 f9cb 	bl	8008840 <USB_ReadDevAllInEpInterrupt>
 80024aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024b0:	e0cd      	b.n	800264e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80c2 	beq.w	8002642 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 f9f1 	bl	80088b0 <USB_ReadDevInEPInterrupt>
 80024ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d057      	beq.n	800258a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69f9      	ldr	r1, [r7, #28]
 80024f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024fa:	4013      	ands	r3, r2
 80024fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	799b      	ldrb	r3, [r3, #6]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d132      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3320      	adds	r3, #32
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4403      	add	r3, r0
 8002538:	331c      	adds	r3, #28
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4419      	add	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4403      	add	r3, r0
 800254c:	3320      	adds	r3, #32
 800254e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3324      	adds	r3, #36	@ 0x24
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002576:	461a      	mov	r2, r3
 8002578:	2101      	movs	r1, #1
 800257a:	f006 f9f9 	bl	8008970 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb03 	bl	8002b90 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a0:	461a      	mov	r2, r3
 80025a2:	2308      	movs	r3, #8
 80025a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025bc:	461a      	mov	r2, r3
 80025be:	2310      	movs	r3, #16
 80025c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025d8:	461a      	mov	r2, r3
 80025da:	2340      	movs	r3, #64	@ 0x40
 80025dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d023      	beq.n	8002630 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f005 fefc 	bl	80083e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3310      	adds	r3, #16
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fb03 	bl	8002c24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800262a:	461a      	mov	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800263a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb42 	bl	8002cc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f af2e 	bne.w	80024b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f006 f8c3 	bl	80087e6 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800266a:	d122      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002686:	2b01      	cmp	r3, #1
 8002688:	d108      	bne.n	800269c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fcf5 	bl	8003084 <HAL_PCDEx_LPM_Callback>
 800269a:	e002      	b.n	80026a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 faab 	bl	8002bf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f006 f895 	bl	80087e6 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026c6:	d112      	bne.n	80026ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fa83 	bl	8002be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f006 f877 	bl	80087e6 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002702:	d121      	bne.n	8002748 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002712:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002738:	2101      	movs	r1, #1
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fca2 	bl	8003084 <HAL_PCDEx_LPM_Callback>
 8002740:	e002      	b.n	8002748 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa4e 	bl	8002be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f006 f84a 	bl	80087e6 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275c:	f040 80b7 	bne.w	80028ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2110      	movs	r1, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fe34 	bl	80083e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	e046      	b.n	8002814 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002792:	461a      	mov	r2, r3
 8002794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002798:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	440a      	add	r2, r1
 8002804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800280c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	3301      	adds	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	461a      	mov	r2, r3
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	4293      	cmp	r3, r2
 800281e:	d3b2      	bcc.n	8002786 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002832:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7bdb      	ldrb	r3, [r3, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800284c:	f043 030b 	orr.w	r3, r3, #11
 8002850:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002862:	f043 030b 	orr.w	r3, r3, #11
 8002866:	6453      	str	r3, [r2, #68]	@ 0x44
 8002868:	e015      	b.n	8002896 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800287c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002880:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002890:	f043 030b 	orr.w	r3, r3, #11
 8002894:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b8:	461a      	mov	r2, r3
 80028ba:	f006 f859 	bl	8008970 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 ff87 	bl	80087e6 <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	d123      	bne.n	800292c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f006 f81d 	bl	8008928 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fdf1 	bl	80084da <USB_GetDevSpeed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	f001 fea6 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	461a      	mov	r2, r3
 8002910:	4620      	mov	r0, r4
 8002912:	f005 fb1d 	bl	8007f50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f95a 	bl	8002bd0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f005 ff58 	bl	80087e6 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b08      	cmp	r3, #8
 800293e:	d10a      	bne.n	8002956 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f93b 	bl	8002bbc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f002 0208 	and.w	r2, r2, #8
 8002954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f005 ff43 	bl	80087e6 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d123      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002976:	2301      	movs	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	e014      	b.n	80029a6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f962 	bl	8002c64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3301      	adds	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d3e4      	bcc.n	800297c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 ff15 	bl	80087e6 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c6:	d13c      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e02b      	b.n	8002a26 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3318      	adds	r3, #24
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d115      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da12      	bge.n	8002a20 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3317      	adds	r3, #23
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f922 	bl	8002c64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	791b      	ldrb	r3, [r3, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d3cd      	bcc.n	80029ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f005 fecd 	bl	80087e6 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a56:	d156      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5c:	e045      	b.n	8002aea <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12e      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da2b      	bge.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ae0:	6053      	str	r3, [r2, #4]
            break;
 8002ae2:	e008      	b.n	8002af6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d3b3      	bcc.n	8002a5e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 fe6b 	bl	80087e6 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1a:	d10a      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f88d 	bl	8002c3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fe55 	bl	80087e6 <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d115      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f879 	bl	8002c50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e000      	b.n	8002b72 <HAL_PCD_IRQHandler+0x996>
      return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3734      	adds	r7, #52	@ 0x34
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	da0c      	bge.n	8002c92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	3310      	adds	r3, #16
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e00c      	b.n	8002cac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 fc36 	bl	8008524 <USB_EPStopXfer>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08a      	sub	sp, #40	@ 0x28
 8002cca:	af02      	add	r7, sp, #8
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d901      	bls.n	8002cfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d902      	bls.n	8002d1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d22:	e02a      	b.n	8002d7a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d902      	bls.n	8002d40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3303      	adds	r3, #3
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68d9      	ldr	r1, [r3, #12]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6978      	ldr	r0, [r7, #20]
 8002d5e:	f005 fc8b 	bl	8008678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	441a      	add	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d809      	bhi.n	8002da4 <PCD_WriteEmptyTxFifo+0xde>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d203      	bcs.n	8002da4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1bf      	bne.n	8002d24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d811      	bhi.n	8002dd4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	6939      	ldr	r1, [r7, #16]
 8002dcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	333c      	adds	r3, #60	@ 0x3c
 8002df8:	3304      	adds	r3, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d17b      	bne.n	8002f0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	4a61      	ldr	r2, [pc, #388]	@ (8002fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f240 80b9 	bls.w	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80b3 	beq.w	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e48:	6093      	str	r3, [r2, #8]
 8002e4a:	e0a7      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	2320      	movs	r3, #32
 8002e66:	6093      	str	r3, [r2, #8]
 8002e68:	e098      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8093 	bne.w	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d90f      	bls.n	8002e9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	e07e      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d114      	bne.n	8002f00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2101      	movs	r1, #1
 8002eec:	f005 fd40 	bl	8008970 <USB_EP0_OutStart>
 8002ef0:	e006      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	441a      	add	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fe36 	bl	8002b78 <HAL_PCD_DataOutStageCallback>
 8002f0c:	e046      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d124      	bne.n	8002f60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e032      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2320      	movs	r3, #32
 8002f50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fe0d 	bl	8002b78 <HAL_PCD_DataOutStageCallback>
 8002f5e:	e01d      	b.n	8002f9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d114      	bne.n	8002f90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f005 fcf0 	bl	8008970 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fdee 	bl	8002b78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	4f54300a 	.word	0x4f54300a
 8002fac:	4f54310a 	.word	0x4f54310a

08002fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	333c      	adds	r3, #60	@ 0x3c
 8002fc8:	3304      	adds	r3, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d90e      	bls.n	8003004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fdcf 	bl	8002ba8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <PCD_EP_OutSetupPacket_int+0x88>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d90c      	bls.n	800302c <PCD_EP_OutSetupPacket_int+0x7c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	799b      	ldrb	r3, [r3, #6]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003024:	461a      	mov	r2, r3
 8003026:	2101      	movs	r1, #1
 8003028:	f005 fca2 	bl	8008970 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	4f54300a 	.word	0x4f54300a

0800303c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	f043 0303 	orr.w	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10b      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030bc:	d905      	bls.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030be:	4b33      	ldr	r3, [pc, #204]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a32      	ldr	r2, [pc, #200]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e057      	b.n	800317e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d90a      	bls.n	80030ec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	4a2a      	ldr	r2, [pc, #168]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e8:	60d3      	str	r3, [r2, #12]
 80030ea:	e007      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030f4:	4925      	ldr	r1, [pc, #148]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80030fc:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	2232      	movs	r2, #50	@ 0x32
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800311a:	e002      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x98>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f3      	bne.n	800311c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01b      	beq.n	8003172 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a15      	ldr	r2, [pc, #84]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2232      	movs	r2, #50	@ 0x32
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	099b      	lsrs	r3, r3, #6
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003158:	e002      	b.n	8003160 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f3      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e000      	b.n	800317e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	46020800 	.word	0x46020800
 8003190:	20000000 	.word	0x20000000
 8003194:	10624dd3 	.word	0x10624dd3

08003198 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	46020800 	.word	0x46020800

080031b4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <HAL_PWREx_ConfigSupply+0x94>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a22      	ldr	r2, [pc, #136]	@ (800324c <HAL_PWREx_ConfigSupply+0x98>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2232      	movs	r2, #50	@ 0x32
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <HAL_PWREx_ConfigSupply+0x98>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d113      	bne.n	8003208 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 80031e6:	f023 0302 	bic.w	r3, r3, #2
 80031ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80031ec:	e002      	b.n	80031f4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d116      	bne.n	800322e <HAL_PWREx_ConfigSupply+0x7a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f3      	bne.n	80031ee <HAL_PWREx_ConfigSupply+0x3a>
 8003206:	e012      	b.n	800322e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a10      	ldr	r2, [pc, #64]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 800320e:	f043 0302 	orr.w	r3, r3, #2
 8003212:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003214:	e002      	b.n	800321c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b01      	subs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <HAL_PWREx_ConfigSupply+0x9c>)
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <HAL_PWREx_ConfigSupply+0x7a>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f3      	bne.n	8003216 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e000      	b.n	800323a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000000 	.word	0x20000000
 800324c:	10624dd3 	.word	0x10624dd3
 8003250:	46020800 	.word	0x46020800

08003254 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003262:	6113      	str	r3, [r2, #16]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	46020800 	.word	0x46020800

08003274 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800327e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003282:	6113      	str	r3, [r2, #16]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	46020800 	.word	0x46020800

08003294 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_PWREx_EnableVddA+0x1c>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <HAL_PWREx_EnableVddA+0x1c>)
 800329e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032a2:	6113      	str	r3, [r2, #16]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	46020800 	.word	0x46020800

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08e      	sub	sp, #56	@ 0x38
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f000 bec8 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ce:	4b99      	ldr	r3, [pc, #612]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d8:	4b96      	ldr	r3, [pc, #600]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 816c 	beq.w	80035c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_RCC_OscConfig+0x52>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f040 80de 	bne.w	80034ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 80da 	bne.w	80034ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f000 bea5 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003318:	4b86      	ldr	r3, [pc, #536]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RCC_OscConfig+0x7a>
 8003324:	4b83      	ldr	r3, [pc, #524]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800332c:	e005      	b.n	800333a <HAL_RCC_OscConfig+0x86>
 800332e:	4b81      	ldr	r3, [pc, #516]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800333a:	4293      	cmp	r3, r2
 800333c:	d255      	bcs.n	80033ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f9d9 	bl	8004700 <RCC_SetFlashLatencyFromMSIRange>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f000 be82 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800335a:	4b76      	ldr	r3, [pc, #472]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a75      	ldr	r2, [pc, #468]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003360:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	4b73      	ldr	r3, [pc, #460]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	4970      	ldr	r1, [pc, #448]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003380:	d309      	bcc.n	8003396 <HAL_RCC_OscConfig+0xe2>
 8003382:	4b6c      	ldr	r3, [pc, #432]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f023 021f 	bic.w	r2, r3, #31
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4969      	ldr	r1, [pc, #420]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003390:	4313      	orrs	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e07e      	b.n	8003494 <HAL_RCC_OscConfig+0x1e0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0a      	bge.n	80033b4 <HAL_RCC_OscConfig+0x100>
 800339e:	4b65      	ldr	r3, [pc, #404]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	015b      	lsls	r3, r3, #5
 80033ac:	4961      	ldr	r1, [pc, #388]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60cb      	str	r3, [r1, #12]
 80033b2:	e06f      	b.n	8003494 <HAL_RCC_OscConfig+0x1e0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d30a      	bcc.n	80033d4 <HAL_RCC_OscConfig+0x120>
 80033be:	4b5d      	ldr	r3, [pc, #372]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	029b      	lsls	r3, r3, #10
 80033cc:	4959      	ldr	r1, [pc, #356]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60cb      	str	r3, [r1, #12]
 80033d2:	e05f      	b.n	8003494 <HAL_RCC_OscConfig+0x1e0>
 80033d4:	4b57      	ldr	r3, [pc, #348]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	03db      	lsls	r3, r3, #15
 80033e2:	4954      	ldr	r1, [pc, #336]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033ea:	4b52      	ldr	r3, [pc, #328]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4a51      	ldr	r2, [pc, #324]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033f4:	6093      	str	r3, [r2, #8]
 80033f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	494c      	ldr	r1, [pc, #304]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003410:	d309      	bcc.n	8003426 <HAL_RCC_OscConfig+0x172>
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 021f 	bic.w	r2, r3, #31
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4945      	ldr	r1, [pc, #276]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
 8003424:	e028      	b.n	8003478 <HAL_RCC_OscConfig+0x1c4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	da0a      	bge.n	8003444 <HAL_RCC_OscConfig+0x190>
 800342e:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	015b      	lsls	r3, r3, #5
 800343c:	493d      	ldr	r1, [pc, #244]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	e019      	b.n	8003478 <HAL_RCC_OscConfig+0x1c4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344c:	d30a      	bcc.n	8003464 <HAL_RCC_OscConfig+0x1b0>
 800344e:	4b39      	ldr	r3, [pc, #228]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	4935      	ldr	r1, [pc, #212]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 800345e:	4313      	orrs	r3, r2
 8003460:	60cb      	str	r3, [r1, #12]
 8003462:	e009      	b.n	8003478 <HAL_RCC_OscConfig+0x1c4>
 8003464:	4b33      	ldr	r3, [pc, #204]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	03db      	lsls	r3, r3, #15
 8003472:	4930      	ldr	r1, [pc, #192]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f93c 	bl	8004700 <RCC_SetFlashLatencyFromMSIRange>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f000 bde5 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003494:	f001 f8de 	bl	8004654 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003498:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RCC_OscConfig+0x284>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd fd4f 	bl	8000f40 <HAL_InitTick>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80034a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808a 	beq.w	80035c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80034b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034b6:	f000 bdd2 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d066      	beq.n	8003590 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80034c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034ce:	f7fd fdc1 	bl	8001054 <HAL_GetTick>
 80034d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034d4:	e009      	b.n	80034ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7fd fdbd 	bl	8001054 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d902      	bls.n	80034ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	f000 bdba 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 80034fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003500:	6093      	str	r3, [r2, #8]
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	4909      	ldr	r1, [pc, #36]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800351c:	d30e      	bcc.n	800353c <HAL_RCC_OscConfig+0x288>
 800351e:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f023 021f 	bic.w	r2, r3, #31
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4902      	ldr	r1, [pc, #8]	@ (8003534 <HAL_RCC_OscConfig+0x280>)
 800352c:	4313      	orrs	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
 8003530:	e04a      	b.n	80035c8 <HAL_RCC_OscConfig+0x314>
 8003532:	bf00      	nop
 8003534:	46020c00 	.word	0x46020c00
 8003538:	20000004 	.word	0x20000004
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	da0a      	bge.n	800355a <HAL_RCC_OscConfig+0x2a6>
 8003544:	4b98      	ldr	r3, [pc, #608]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	015b      	lsls	r3, r3, #5
 8003552:	4995      	ldr	r1, [pc, #596]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
 8003558:	e036      	b.n	80035c8 <HAL_RCC_OscConfig+0x314>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003562:	d30a      	bcc.n	800357a <HAL_RCC_OscConfig+0x2c6>
 8003564:	4b90      	ldr	r3, [pc, #576]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	498d      	ldr	r1, [pc, #564]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
 8003578:	e026      	b.n	80035c8 <HAL_RCC_OscConfig+0x314>
 800357a:	4b8b      	ldr	r3, [pc, #556]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	03db      	lsls	r3, r3, #15
 8003588:	4987      	ldr	r1, [pc, #540]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	60cb      	str	r3, [r1, #12]
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003590:	4b85      	ldr	r3, [pc, #532]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a84      	ldr	r2, [pc, #528]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800359c:	f7fd fd5a 	bl	8001054 <HAL_GetTick>
 80035a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035a2:	e009      	b.n	80035b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a4:	f7fd fd56 	bl	8001054 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f000 bd53 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035b8:	4b7b      	ldr	r3, [pc, #492]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ef      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 808b 	beq.w	80036ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_OscConfig+0x334>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d17d      	bne.n	80036ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f000 bd34 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x35a>
 8003600:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a68      	ldr	r2, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e041      	b.n	8003692 <HAL_RCC_OscConfig+0x3de>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003616:	d112      	bne.n	800363e <HAL_RCC_OscConfig+0x38a>
 8003618:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a62      	ldr	r2, [pc, #392]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800361e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b60      	ldr	r3, [pc, #384]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5f      	ldr	r2, [pc, #380]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800362a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b5d      	ldr	r3, [pc, #372]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a5c      	ldr	r2, [pc, #368]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e029      	b.n	8003692 <HAL_RCC_OscConfig+0x3de>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003646:	d112      	bne.n	800366e <HAL_RCC_OscConfig+0x3ba>
 8003648:	4b57      	ldr	r3, [pc, #348]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b54      	ldr	r3, [pc, #336]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a53      	ldr	r2, [pc, #332]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b51      	ldr	r3, [pc, #324]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a50      	ldr	r2, [pc, #320]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e011      	b.n	8003692 <HAL_RCC_OscConfig+0x3de>
 800366e:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b48      	ldr	r3, [pc, #288]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d014      	beq.n	80036c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800369a:	f7fd fcdb 	bl	8001054 <HAL_GetTick>
 800369e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a2:	f7fd fcd7 	bl	8001054 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	@ 0x64
 80036ae:	d902      	bls.n	80036b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f000 bcd4 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b6:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ef      	beq.n	80036a2 <HAL_RCC_OscConfig+0x3ee>
 80036c2:	e013      	b.n	80036ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80036c4:	f7fd fcc6 	bl	8001054 <HAL_GetTick>
 80036c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ca:	e009      	b.n	80036e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fd fcc2 	bl	8001054 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d902      	bls.n	80036e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	f000 bcbf 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e0:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ef      	bne.n	80036cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05f      	beq.n	80037b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x456>
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d114      	bne.n	800372e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	2b02      	cmp	r3, #2
 8003708:	d111      	bne.n	800372e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f000 bca3 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	4920      	ldr	r1, [pc, #128]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800372c:	e044      	b.n	80037b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003736:	4b1c      	ldr	r3, [pc, #112]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003740:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003742:	f7fd fc87 	bl	8001054 <HAL_GetTick>
 8003746:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003748:	e009      	b.n	800375e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fd fc83 	bl	8001054 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d902      	bls.n	800375e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	f000 bc80 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ef      	beq.n	800374a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	490b      	ldr	r1, [pc, #44]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e01b      	b.n	80037b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003780:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003786:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800378a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800378c:	f7fd fc62 	bl	8001054 <HAL_GetTick>
 8003790:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fd fc5e 	bl	8001054 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d904      	bls.n	80037ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	f000 bc5b 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
 80037a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ac:	4baf      	ldr	r3, [pc, #700]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ed      	bne.n	8003794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c8 	beq.w	8003956 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037cc:	4ba7      	ldr	r3, [pc, #668]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d111      	bne.n	80037fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4ba4      	ldr	r3, [pc, #656]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80037dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e0:	4aa2      	ldr	r2, [pc, #648]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80037ea:	4ba0      	ldr	r3, [pc, #640]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80037fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d119      	bne.n	800383e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800380a:	4b99      	ldr	r3, [pc, #612]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	4a98      	ldr	r2, [pc, #608]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fd fc1d 	bl	8001054 <HAL_GetTick>
 800381a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fd fc19 	bl	8001054 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d902      	bls.n	8003832 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f000 bc16 	b.w	800405e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003832:	4b8f      	ldr	r3, [pc, #572]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ef      	beq.n	800381e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d05f      	beq.n	8003906 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003846:	4b89      	ldr	r3, [pc, #548]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800384c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003858:	429a      	cmp	r2, r3
 800385a:	d037      	beq.n	80038cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e3f4      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01b      	beq.n	80038b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800387e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003884:	4a79      	ldr	r2, [pc, #484]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003886:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800388a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800388e:	f7fd fbe1 	bl	8001054 <HAL_GetTick>
 8003892:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd fbdd 	bl	8001054 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e3da      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038a8:	4b70      	ldr	r3, [pc, #448]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80038b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	4969      	ldr	r1, [pc, #420]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80038cc:	4b67      	ldr	r3, [pc, #412]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d2:	4a66      	ldr	r2, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80038dc:	f7fd fbba 	bl	8001054 <HAL_GetTick>
 80038e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd fbb6 	bl	8001054 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e3b3      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038f6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80038f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ef      	beq.n	80038e4 <HAL_RCC_OscConfig+0x630>
 8003904:	e01b      	b.n	800393e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003906:	4b59      	ldr	r3, [pc, #356]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390c:	4a57      	ldr	r2, [pc, #348]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 800390e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003916:	f7fd fb9d 	bl	8001054 <HAL_GetTick>
 800391a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fd fb99 	bl	8001054 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b05      	cmp	r3, #5
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e396      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003930:	4b4e      	ldr	r3, [pc, #312]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ef      	bne.n	800391e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800393e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003946:	4b49      	ldr	r3, [pc, #292]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394c:	4a47      	ldr	r2, [pc, #284]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8111 	beq.w	8003b86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	4b3c      	ldr	r3, [pc, #240]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800397e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003988:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800399c:	4b34      	ldr	r3, [pc, #208]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d118      	bne.n	80039da <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039a8:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ac:	4a30      	ldr	r2, [pc, #192]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b4:	f7fd fb4e 	bl	8001054 <HAL_GetTick>
 80039b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039bc:	f7fd fb4a 	bl	8001054 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e347      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <HAL_RCC_OscConfig+0x7bc>)
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01f      	beq.n	8003a26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80039f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a02:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a12:	e018      	b.n	8003a46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a14:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a1a:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a24:	e00f      	b.n	8003a46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a6c <HAL_RCC_OscConfig+0x7b8>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d057      	beq.n	8003afe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fb01 	bl	8001054 <HAL_GetTick>
 8003a52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fd fafd 	bl	8001054 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d905      	bls.n	8003a74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e2f8      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
 8003a6c:	46020c00 	.word	0x46020c00
 8003a70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0e9      	beq.n	8003a56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a8e:	4b96      	ldr	r3, [pc, #600]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a94:	4a94      	ldr	r2, [pc, #592]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fad8 	bl	8001054 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e2d3      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ed      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x7ec>
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ac6:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003acc:	4a86      	ldr	r2, [pc, #536]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fabc 	bl	8001054 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e2b7      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ed      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x824>
 8003afc:	e037      	b.n	8003b6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003afe:	f7fd faa9 	bl	8001054 <HAL_GetTick>
 8003b02:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fd faa5 	bl	8001054 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e2a0      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1c:	4b72      	ldr	r3, [pc, #456]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ed      	bne.n	8003b06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01a      	beq.n	8003b6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b38:	4b6b      	ldr	r3, [pc, #428]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fa83 	bl	8001054 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e27e      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b60:	4b61      	ldr	r3, [pc, #388]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ed      	bne.n	8003b4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d036      	beq.n	8003c00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d019      	beq.n	8003bce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003b9a:	4b53      	ldr	r3, [pc, #332]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a52      	ldr	r2, [pc, #328]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ba4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ba6:	f7fd fa55 	bl	8001054 <HAL_GetTick>
 8003baa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bae:	f7fd fa51 	bl	8001054 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e24e      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bc0:	4b49      	ldr	r3, [pc, #292]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x8fa>
 8003bcc:	e018      	b.n	8003c00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003bce:	4b46      	ldr	r3, [pc, #280]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bda:	f7fd fa3b 	bl	8001054 <HAL_GetTick>
 8003bde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be2:	f7fd fa37 	bl	8001054 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e234      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d036      	beq.n	8003c7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d019      	beq.n	8003c48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c14:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a33      	ldr	r2, [pc, #204]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c20:	f7fd fa18 	bl	8001054 <HAL_GetTick>
 8003c24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c28:	f7fd fa14 	bl	8001054 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e211      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x974>
 8003c46:	e018      	b.n	8003c7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c48:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c54:	f7fd f9fe 	bl	8001054 <HAL_GetTick>
 8003c58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c5c:	f7fd f9fa 	bl	8001054 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f7      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d07f      	beq.n	8003d86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d062      	beq.n	8003d54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4a15      	ldr	r2, [pc, #84]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	4910      	ldr	r1, [pc, #64]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003cb4:	d309      	bcc.n	8003cca <HAL_RCC_OscConfig+0xa16>
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 021f 	bic.w	r2, r3, #31
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60cb      	str	r3, [r1, #12]
 8003cc8:	e02a      	b.n	8003d20 <HAL_RCC_OscConfig+0xa6c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da0c      	bge.n	8003cec <HAL_RCC_OscConfig+0xa38>
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	015b      	lsls	r3, r3, #5
 8003ce0:	4901      	ldr	r1, [pc, #4]	@ (8003ce8 <HAL_RCC_OscConfig+0xa34>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60cb      	str	r3, [r1, #12]
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0xa6c>
 8003ce8:	46020c00 	.word	0x46020c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf4:	d30a      	bcc.n	8003d0c <HAL_RCC_OscConfig+0xa58>
 8003cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	029b      	lsls	r3, r3, #10
 8003d04:	499d      	ldr	r1, [pc, #628]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60cb      	str	r3, [r1, #12]
 8003d0a:	e009      	b.n	8003d20 <HAL_RCC_OscConfig+0xa6c>
 8003d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	03db      	lsls	r3, r3, #15
 8003d1a:	4998      	ldr	r1, [pc, #608]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d20:	4b96      	ldr	r3, [pc, #600]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a95      	ldr	r2, [pc, #596]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d26:	f043 0310 	orr.w	r3, r3, #16
 8003d2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d2c:	f7fd f992 	bl	8001054 <HAL_GetTick>
 8003d30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d34:	f7fd f98e 	bl	8001054 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e18b      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d46:	4b8d      	ldr	r3, [pc, #564]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xa80>
 8003d52:	e018      	b.n	8003d86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003d54:	4b89      	ldr	r3, [pc, #548]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a88      	ldr	r2, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d60:	f7fd f978 	bl	8001054 <HAL_GetTick>
 8003d64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d68:	f7fd f974 	bl	8001054 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e171      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d7a:	4b80      	ldr	r3, [pc, #512]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8166 	beq.w	800405c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d96:	4b79      	ldr	r3, [pc, #484]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	f000 80f2 	beq.w	8003f88 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	f040 80c5 	bne.w	8003f38 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dba:	f7fd f94b 	bl	8001054 <HAL_GetTick>
 8003dbe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd f947 	bl	8001054 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e144      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003dd4:	4b69      	ldr	r3, [pc, #420]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de0:	4b66      	ldr	r3, [pc, #408]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d111      	bne.n	8003e12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df4:	4a61      	ldr	r2, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e12:	4b5b      	ldr	r3, [pc, #364]	@ (8003f80 <HAL_RCC_OscConfig+0xccc>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e26:	4b56      	ldr	r3, [pc, #344]	@ (8003f80 <HAL_RCC_OscConfig+0xccc>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4a55      	ldr	r2, [pc, #340]	@ (8003f80 <HAL_RCC_OscConfig+0xccc>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e32:	4b52      	ldr	r3, [pc, #328]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e46:	3a01      	subs	r2, #1
 8003e48:	0212      	lsls	r2, r2, #8
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e50:	430a      	orrs	r2, r1
 8003e52:	494a      	ldr	r1, [pc, #296]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e58:	4b48      	ldr	r3, [pc, #288]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e5c:	4b49      	ldr	r3, [pc, #292]	@ (8003f84 <HAL_RCC_OscConfig+0xcd0>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e64:	3a01      	subs	r2, #1
 8003e66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	0252      	lsls	r2, r2, #9
 8003e72:	b292      	uxth	r2, r2
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0412      	lsls	r2, r2, #16
 8003e7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0612      	lsls	r2, r2, #24
 8003e8c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e90:	430a      	orrs	r2, r1
 8003e92:	493a      	ldr	r1, [pc, #232]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003e98:	4b38      	ldr	r3, [pc, #224]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	4a37      	ldr	r2, [pc, #220]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003e9e:	f023 0310 	bic.w	r3, r3, #16
 8003ea2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	4a34      	ldr	r2, [pc, #208]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003eae:	4b33      	ldr	r3, [pc, #204]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb2:	4a32      	ldr	r2, [pc, #200]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003eba:	4b30      	ldr	r3, [pc, #192]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	f023 020c 	bic.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec6:	492d      	ldr	r1, [pc, #180]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f80 <HAL_RCC_OscConfig+0xccc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <HAL_RCC_OscConfig+0xccc>)
 8003eda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ede:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003ee0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eee:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b20      	ldr	r3, [pc, #128]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f04:	f7fd f8a6 	bl	8001054 <HAL_GetTick>
 8003f08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd f8a2 	bl	8001054 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e09f      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f2a:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f34:	6293      	str	r3, [r2, #40]	@ 0x28
 8003f36:	e091      	b.n	800405c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f44:	f7fd f886 	bl	8001054 <HAL_GetTick>
 8003f48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd f882 	bl	8001054 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f5e:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003f6a:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	4a03      	ldr	r2, [pc, #12]	@ (8003f7c <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003f74:	f023 0303 	bic.w	r3, r3, #3
 8003f78:	6293      	str	r3, [r2, #40]	@ 0x28
 8003f7a:	e06f      	b.n	800405c <HAL_RCC_OscConfig+0xda8>
 8003f7c:	46020c00 	.word	0x46020c00
 8003f80:	46020800 	.word	0x46020800
 8003f84:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003f88:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f8e:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d039      	beq.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d132      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d129      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d122      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d11a      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d111      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d108      	bne.n	8004010 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	0e1b      	lsrs	r3, r3, #24
 8004002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e024      	b.n	800405e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004014:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004022:	429a      	cmp	r2, r3
 8004024:	d01a      	beq.n	800405c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	4a0f      	ldr	r2, [pc, #60]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd f80f 	bl	8001054 <HAL_GetTick>
 8004036:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004038:	bf00      	nop
 800403a:	f7fd f80b 	bl	8001054 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	4293      	cmp	r3, r2
 8004044:	d0f9      	beq.n	800403a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	4a07      	ldr	r2, [pc, #28]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <HAL_RCC_OscConfig+0xdb4>)
 8004056:	f043 0310 	orr.w	r3, r3, #16
 800405a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3738      	adds	r7, #56	@ 0x38
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	46020c00 	.word	0x46020c00

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e1d9      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b9b      	ldr	r3, [pc, #620]	@ (80042f0 <HAL_RCC_ClockConfig+0x284>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d910      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b98      	ldr	r3, [pc, #608]	@ (80042f0 <HAL_RCC_ClockConfig+0x284>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 020f 	bic.w	r2, r3, #15
 8004096:	4996      	ldr	r1, [pc, #600]	@ (80042f0 <HAL_RCC_ClockConfig+0x284>)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b94      	ldr	r3, [pc, #592]	@ (80042f0 <HAL_RCC_ClockConfig+0x284>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e1c1      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	4b8c      	ldr	r3, [pc, #560]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d908      	bls.n	80040de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80040cc:	4b89      	ldr	r3, [pc, #548]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	4986      	ldr	r1, [pc, #536]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	4b81      	ldr	r3, [pc, #516]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d909      	bls.n	8004110 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80040fc:	4b7d      	ldr	r3, [pc, #500]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	497a      	ldr	r1, [pc, #488]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	4b74      	ldr	r3, [pc, #464]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004128:	429a      	cmp	r2, r3
 800412a:	d908      	bls.n	800413e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800412c:	4b71      	ldr	r3, [pc, #452]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	496e      	ldr	r1, [pc, #440]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800413a:	4313      	orrs	r3, r2
 800413c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b69      	ldr	r3, [pc, #420]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	429a      	cmp	r2, r3
 8004158:	d908      	bls.n	800416c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800415a:	4b66      	ldr	r3, [pc, #408]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4963      	ldr	r1, [pc, #396]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004168:	4313      	orrs	r3, r2
 800416a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80d2 	beq.w	800431e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d143      	bne.n	800420e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004186:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d110      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004194:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419a:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80041a4:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80041b6:	f7fc ff4d 	bl	8001054 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80041bc:	4b4e      	ldr	r3, [pc, #312]	@ (80042f8 <HAL_RCC_ClockConfig+0x28c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00f      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80041ca:	f7fc ff43 	bl	8001054 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e12b      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041dc:	4b46      	ldr	r3, [pc, #280]	@ (80042f8 <HAL_RCC_ClockConfig+0x28c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4b41      	ldr	r3, [pc, #260]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f4:	4a3f      	ldr	r2, [pc, #252]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041fe:	4b3d      	ldr	r3, [pc, #244]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d121      	bne.n	800424e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e112      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b37      	ldr	r3, [pc, #220]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d115      	bne.n	800424e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e106      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800422e:	4b31      	ldr	r3, [pc, #196]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0fa      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423e:	4b2d      	ldr	r3, [pc, #180]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0f2      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800424e:	4b29      	ldr	r3, [pc, #164]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4926      	ldr	r1, [pc, #152]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 800425c:	4313      	orrs	r3, r2
 800425e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004260:	f7fc fef8 	bl	8001054 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d112      	bne.n	8004294 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fc fef0 	bl	8001054 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0d6      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004286:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d1ee      	bne.n	8004270 <HAL_RCC_ClockConfig+0x204>
 8004292:	e044      	b.n	800431e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429e:	f7fc fed9 	bl	8001054 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0bf      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b4:	4b0f      	ldr	r3, [pc, #60]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d1ee      	bne.n	800429e <HAL_RCC_ClockConfig+0x232>
 80042c0:	e02d      	b.n	800431e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d123      	bne.n	8004312 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fc fec2 	bl	8001054 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0a8      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <HAL_RCC_ClockConfig+0x288>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ee      	bne.n	80042cc <HAL_RCC_ClockConfig+0x260>
 80042ee:	e016      	b.n	800431e <HAL_RCC_ClockConfig+0x2b2>
 80042f0:	40022000 	.word	0x40022000
 80042f4:	46020c00 	.word	0x46020c00
 80042f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fc feaa 	bl	8001054 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e090      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	4b4a      	ldr	r3, [pc, #296]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	d1ee      	bne.n	80042fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	429a      	cmp	r2, r3
 8004338:	d208      	bcs.n	800434c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800433a:	4b40      	ldr	r3, [pc, #256]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f023 020f 	bic.w	r2, r3, #15
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	493d      	ldr	r1, [pc, #244]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b3c      	ldr	r3, [pc, #240]	@ (8004440 <HAL_RCC_ClockConfig+0x3d4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d210      	bcs.n	800437c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b39      	ldr	r3, [pc, #228]	@ (8004440 <HAL_RCC_ClockConfig+0x3d4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	4937      	ldr	r1, [pc, #220]	@ (8004440 <HAL_RCC_ClockConfig+0x3d4>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b35      	ldr	r3, [pc, #212]	@ (8004440 <HAL_RCC_ClockConfig+0x3d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e05b      	b.n	8004434 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004394:	429a      	cmp	r2, r3
 8004396:	d208      	bcs.n	80043aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4925      	ldr	r1, [pc, #148]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d012      	beq.n	80043dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d209      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80043c8:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4919      	ldr	r1, [pc, #100]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d208      	bcs.n	800440a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80043f8:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	490d      	ldr	r1, [pc, #52]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x3d0>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	490a      	ldr	r1, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x3d8>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x3dc>)
 8004422:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_RCC_ClockConfig+0x3e0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fd89 	bl	8000f40 <HAL_InitTick>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]

  return status;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	46020c00 	.word	0x46020c00
 8004440:	40022000 	.word	0x40022000
 8004444:	08008b00 	.word	0x08008b00
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b08b      	sub	sp, #44	@ 0x2c
 8004454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b78      	ldr	r3, [pc, #480]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d121      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11e      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004484:	4b6e      	ldr	r3, [pc, #440]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004490:	4b6b      	ldr	r3, [pc, #428]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004496:	0b1b      	lsrs	r3, r3, #12
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
 800449e:	e005      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80044a0:	4b67      	ldr	r3, [pc, #412]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	0f1b      	lsrs	r3, r3, #28
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ac:	4a65      	ldr	r2, [pc, #404]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d110      	bne.n	80044de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044c0:	e00d      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d102      	bne.n	80044d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	e004      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d101      	bne.n	80044de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044da:	4b5b      	ldr	r3, [pc, #364]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80044dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	f040 80a5 	bne.w	8004630 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044e6:	4b56      	ldr	r3, [pc, #344]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044f0:	4b53      	ldr	r3, [pc, #332]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044fe:	4b50      	ldr	r3, [pc, #320]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800450a:	4b4d      	ldr	r3, [pc, #308]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d003      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0xe4>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d022      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x128>
 8004532:	e043      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800464c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004556:	ed97 6a01 	vldr	s12, [r7, #4]
 800455a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004650 <HAL_RCC_GetSysClockFreq+0x200>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004576:	e046      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800464c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b2d      	ldr	r3, [pc, #180]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800459a:	ed97 6a01 	vldr	s12, [r7, #4]
 800459e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004650 <HAL_RCC_GetSysClockFreq+0x200>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ba:	e024      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80045e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004650 <HAL_RCC_GetSysClockFreq+0x200>
 80045ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004600:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004604:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	0e1b      	lsrs	r3, r3, #24
 800460c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004610:	3301      	adds	r3, #1
 8004612:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800461e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462a:	ee17 3a90 	vmov	r3, s15
 800462e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004630:	6a3b      	ldr	r3, [r7, #32]
}
 8004632:	4618      	mov	r0, r3
 8004634:	372c      	adds	r7, #44	@ 0x2c
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	46020c00 	.word	0x46020c00
 8004644:	08008b18 	.word	0x08008b18
 8004648:	00f42400 	.word	0x00f42400
 800464c:	4b742400 	.word	0x4b742400
 8004650:	46000000 	.word	0x46000000

08004654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004658:	f7ff fefa 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <HAL_RCC_GetHCLKFreq+0x28>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4906      	ldr	r1, [pc, #24]	@ (8004680 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004668:	5ccb      	ldrb	r3, [r1, r3]
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <HAL_RCC_GetHCLKFreq+0x30>)
 8004670:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004672:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <HAL_RCC_GetHCLKFreq+0x30>)
 8004674:	681b      	ldr	r3, [r3, #0]
}
 8004676:	4618      	mov	r0, r3
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	46020c00 	.word	0x46020c00
 8004680:	08008b00 	.word	0x08008b00
 8004684:	20000000 	.word	0x20000000

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800468c:	f7ff ffe2 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	46020c00 	.word	0x46020c00
 80046ac:	08008b10 	.word	0x08008b10

080046b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80046b4:	f7ff ffce 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	@ (80046d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	46020c00 	.word	0x46020c00
 80046d4:	08008b10 	.word	0x08008b10

080046d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80046dc:	f7ff ffba 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	@ (80046fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	46020c00 	.word	0x46020c00
 80046fc:	08008b10 	.word	0x08008b10

08004700 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004708:	4b3e      	ldr	r3, [pc, #248]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004716:	f7fe fd3f 	bl	8003198 <HAL_PWREx_GetVoltageRange>
 800471a:	6178      	str	r0, [r7, #20]
 800471c:	e019      	b.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004724:	4a37      	ldr	r2, [pc, #220]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800472e:	4b35      	ldr	r3, [pc, #212]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7fe fd2c 	bl	8003198 <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004748:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004758:	d003      	beq.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004760:	d109      	bne.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004768:	d202      	bcs.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800476a:	2301      	movs	r3, #1
 800476c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800476e:	e033      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004774:	e030      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477c:	d208      	bcs.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004784:	d102      	bne.n	800478c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004786:	2303      	movs	r3, #3
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e025      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e035      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004796:	d90f      	bls.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047a4:	d902      	bls.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e015      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e012      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e00f      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047be:	d109      	bne.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c6:	d102      	bne.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80047c8:	2301      	movs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e004      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80047ce:	2302      	movs	r3, #2
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e001      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80047d4:	2301      	movs	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 020f 	bic.w	r2, r3, #15
 80047e0:	4909      	ldr	r1, [pc, #36]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	46020c00 	.word	0x46020c00
 8004808:	40022000 	.word	0x40022000

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800480c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004810:	b0b8      	sub	sp, #224	@ 0xe0
 8004812:	af00      	add	r7, sp, #0
 8004814:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004818:	2300      	movs	r3, #0
 800481a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800481e:	2300      	movs	r3, #0
 8004820:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f002 0401 	and.w	r4, r2, #1
 8004830:	2500      	movs	r5, #0
 8004832:	ea54 0305 	orrs.w	r3, r4, r5
 8004836:	d00b      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004838:	4bca      	ldr	r3, [pc, #808]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800483a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800483e:	f023 0103 	bic.w	r1, r3, #3
 8004842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004848:	4ac6      	ldr	r2, [pc, #792]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800484a:	430b      	orrs	r3, r1
 800484c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 0802 	and.w	r8, r2, #2
 800485c:	f04f 0900 	mov.w	r9, #0
 8004860:	ea58 0309 	orrs.w	r3, r8, r9
 8004864:	d00b      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004866:	4bbf      	ldr	r3, [pc, #764]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800486c:	f023 010c 	bic.w	r1, r3, #12
 8004870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	4abb      	ldr	r2, [pc, #748]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004878:	430b      	orrs	r3, r1
 800487a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f002 0a04 	and.w	sl, r2, #4
 800488a:	f04f 0b00 	mov.w	fp, #0
 800488e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004892:	d00b      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004894:	4bb3      	ldr	r3, [pc, #716]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800489a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800489e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	4aaf      	ldr	r2, [pc, #700]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f002 0308 	and.w	r3, r2, #8
 80048b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80048cc:	4ba5      	ldr	r3, [pc, #660]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 0310 	and.w	r3, r2, #16
 80048f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d00b      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004904:	4b97      	ldr	r3, [pc, #604]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800490e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	4a93      	ldr	r2, [pc, #588]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004916:	430b      	orrs	r3, r1
 8004918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800491c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f002 0320 	and.w	r3, r2, #32
 8004928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004932:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004936:	460b      	mov	r3, r1
 8004938:	4313      	orrs	r3, r2
 800493a:	d00b      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800493c:	4b89      	ldr	r3, [pc, #548]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800493e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004942:	f023 0107 	bic.w	r1, r3, #7
 8004946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800494a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800494c:	4a85      	ldr	r2, [pc, #532]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800494e:	430b      	orrs	r3, r1
 8004950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800496a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d00b      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004974:	4b7b      	ldr	r3, [pc, #492]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800497a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800497e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004984:	4a77      	ldr	r2, [pc, #476]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004986:	430b      	orrs	r3, r1
 8004988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049bc:	4a69      	ldr	r2, [pc, #420]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80049d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d00b      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80049e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004a1c:	4b51      	ldr	r3, [pc, #324]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a22:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a54:	4b43      	ldr	r3, [pc, #268]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a5a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a64:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a8c:	4b35      	ldr	r3, [pc, #212]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a92:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a9c:	4a31      	ldr	r2, [pc, #196]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ab6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ac6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ad2:	4a24      	ldr	r2, [pc, #144]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ae6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ae8:	2300      	movs	r3, #0
 8004aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d04f      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004af6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d02d      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004b02:	2b80      	cmp	r3, #128	@ 0x80
 8004b04:	d827      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b06:	2b60      	cmp	r3, #96	@ 0x60
 8004b08:	d02e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b0a:	2b60      	cmp	r3, #96	@ 0x60
 8004b0c:	d823      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b0e:	2b40      	cmp	r3, #64	@ 0x40
 8004b10:	d006      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d81f      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d011      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004b1e:	e01a      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	4a0f      	ldr	r2, [pc, #60]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b2c:	e01d      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b32:	3308      	adds	r3, #8
 8004b34:	4618      	mov	r0, r3
 8004b36:	f002 f9d1 	bl	8006edc <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b40:	e013      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b46:	332c      	adds	r3, #44	@ 0x2c
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 fa5f 	bl	800700c <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b54:	e009      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004b62:	bf00      	nop
 8004b64:	46020c00 	.word	0x46020c00
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004b72:	4bb6      	ldr	r3, [pc, #728]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b78:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	4ab1      	ldr	r2, [pc, #708]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b8c:	e003      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b92:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ba8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d053      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bbe:	d033      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc4:	d82c      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bca:	d02f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd0:	d826      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd6:	d008      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bdc:	d820      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be6:	d011      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004be8:	e01a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bea:	4b98      	ldr	r3, [pc, #608]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	4a97      	ldr	r2, [pc, #604]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004bf6:	e01a      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 f96c 	bl	8006edc <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c0a:	e010      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c10:	332c      	adds	r3, #44	@ 0x2c
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 f9fa 	bl	800700c <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c36:	4b85      	ldr	r3, [pc, #532]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c3c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c48:	4a80      	ldr	r2, [pc, #512]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c56:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c68:	2300      	movs	r3, #0
 8004c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d046      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c82:	d028      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c88:	d821      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c8e:	d022      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c94:	d81b      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c9a:	d01c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ca0:	d815      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca6:	d008      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cac:	d80f      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d011      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004cb8:	e009      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 f90b 	bl	8006edc <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ce0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ce6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cf2:	4a56      	ldr	r2, [pc, #344]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d12:	2300      	movs	r3, #0
 8004d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d03f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d81e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d73 	.word	0x08004d73
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d57 	.word	0x08004d57
 8004d40:	08004d73 	.word	0x08004d73
 8004d44:	08004d73 	.word	0x08004d73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d48:	4b40      	ldr	r3, [pc, #256]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004d54:	e00e      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d5a:	332c      	adds	r3, #44	@ 0x2c
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 f955 	bl	800700c <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004d72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004d7c:	4b33      	ldr	r3, [pc, #204]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d82:	f023 0107 	bic.w	r1, r3, #7
 8004d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d9c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dae:	2300      	movs	r3, #0
 8004db0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d04d      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dce:	d821      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dd4:	d024      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004dd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dda:	d81b      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de0:	d00e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de6:	d815      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df0:	d110      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004df2:	4b16      	ldr	r3, [pc, #88]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004dfe:	e012      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e04:	332c      	adds	r3, #44	@ 0x2c
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 f900 	bl	800700c <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d110      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e2e:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e40:	4a02      	ldr	r2, [pc, #8]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e4a:	bf00      	nop
 8004e4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e66:	2300      	movs	r3, #0
 8004e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f000 80b5 	beq.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7c:	4b9d      	ldr	r3, [pc, #628]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	4b9a      	ldr	r3, [pc, #616]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e90:	4a98      	ldr	r2, [pc, #608]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e9a:	4b96      	ldr	r3, [pc, #600]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004eb2:	4b91      	ldr	r3, [pc, #580]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	4a90      	ldr	r2, [pc, #576]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebe:	f7fc f8c9 	bl	8001054 <HAL_GetTick>
 8004ec2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fc f8c4 	bl	8001054 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d903      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ede:	e005      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ee0:	4b85      	ldr	r3, [pc, #532]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ed      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004eec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d165      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef4:	4b7f      	ldr	r3, [pc, #508]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d023      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01b      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f1a:	4b76      	ldr	r3, [pc, #472]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f28:	4b72      	ldr	r3, [pc, #456]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2e:	4a71      	ldr	r2, [pc, #452]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f38:	4b6e      	ldr	r3, [pc, #440]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f48:	4a6a      	ldr	r2, [pc, #424]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fc f879 	bl	8001054 <HAL_GetTick>
 8004f62:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f66:	e00d      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fc f874 	bl	8001054 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d903      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004f82:	e006      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f84:	4b5b      	ldr	r3, [pc, #364]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ea      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004f92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f9a:	4b56      	ldr	r3, [pc, #344]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fac:	4a51      	ldr	r2, [pc, #324]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004fbe:	e003      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fc4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b48      	ldr	r3, [pc, #288]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd6:	4a47      	ldr	r2, [pc, #284]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fee:	2300      	movs	r3, #0
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d042      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005004:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005008:	d022      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800500a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800500e:	d81b      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005014:	d011      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501a:	d815      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005020:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005024:	d110      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502a:	3308      	adds	r3, #8
 800502c:	4618      	mov	r0, r3
 800502e:	f001 ff55 	bl	8006edc <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005038:	e00d      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	4a2d      	ldr	r2, [pc, #180]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005044:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005046:	e006      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800504e:	e002      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005054:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005056:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800505e:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005064:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005070:	4a20      	ldr	r2, [pc, #128]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005072:	430b      	orrs	r3, r1
 8005074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005078:	e003      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800507e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005082:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005090:	2300      	movs	r3, #0
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005094:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005098:	460b      	mov	r3, r1
 800509a:	4313      	orrs	r3, r2
 800509c:	d032      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800509e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050aa:	d00b      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80050ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b0:	d804      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ba:	d007      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80050cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d112      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80050d6:	4b07      	ldr	r3, [pc, #28]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e8:	4a02      	ldr	r2, [pc, #8]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80050f2:	bf00      	nop
 80050f4:	46020c00 	.word	0x46020c00
 80050f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005100:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005110:	633b      	str	r3, [r7, #48]	@ 0x30
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
 8005116:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d019      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800512c:	d105      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800512e:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005132:	4a87      	ldr	r2, [pc, #540]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005138:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800513a:	4b85      	ldr	r3, [pc, #532]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800513c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005140:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800514c:	4a80      	ldr	r2, [pc, #512]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800514e:	430b      	orrs	r3, r1
 8005150:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005162:	2300      	movs	r3, #0
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005166:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d00c      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005170:	4b77      	ldr	r3, [pc, #476]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800517a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800517e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005182:	4973      	ldr	r1, [pc, #460]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800518a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	2300      	movs	r3, #0
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051a0:	460b      	mov	r3, r1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	d00c      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051b8:	4965      	ldr	r1, [pc, #404]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d00c      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80051dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051e2:	f023 0218 	bic.w	r2, r3, #24
 80051e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80051ee:	4958      	ldr	r1, [pc, #352]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800520c:	460b      	mov	r3, r1
 800520e:	4313      	orrs	r3, r2
 8005210:	d032      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800521a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800521e:	d105      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	4b4b      	ldr	r3, [pc, #300]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	4a4a      	ldr	r2, [pc, #296]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800522c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005230:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005238:	d108      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800523a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800523e:	3308      	adds	r3, #8
 8005240:	4618      	mov	r0, r3
 8005242:	f001 fe4b 	bl	8006edc <RCCEx_PLL2_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800524c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10d      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005254:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005256:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800525a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800525e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005266:	493a      	ldr	r1, [pc, #232]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005274:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d03a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052a0:	d00e      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80052a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052a6:	d815      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d017      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80052ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052b0:	d110      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b2:	4b27      	ldr	r3, [pc, #156]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	4a26      	ldr	r2, [pc, #152]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052be:	e00e      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052c4:	3308      	adds	r3, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 fe08 	bl	8006edc <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052d2:	e004      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80052dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10d      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80052e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f8:	4915      	ldr	r1, [pc, #84]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005302:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005306:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800530a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005320:	460b      	mov	r3, r1
 8005322:	4313      	orrs	r3, r2
 8005324:	d00c      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800532c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005338:	4905      	ldr	r1, [pc, #20]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005340:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005344:	4618      	mov	r0, r3
 8005346:	37e0      	adds	r7, #224	@ 0xe0
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	46020c00 	.word	0x46020c00

08005354 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005354:	b480      	push	{r7}
 8005356:	b089      	sub	sp, #36	@ 0x24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800535c:	4ba6      	ldr	r3, [pc, #664]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005366:	4ba4      	ldr	r3, [pc, #656]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005370:	4ba1      	ldr	r3, [pc, #644]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	3301      	adds	r3, #1
 800537c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800537e:	4b9e      	ldr	r3, [pc, #632]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800538a:	4b9b      	ldr	r3, [pc, #620]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d062      	beq.n	8005472 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	f200 8081 	bhi.w	80054b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d024      	beq.n	8005404 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d17a      	bne.n	80054b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80055fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b89      	ldr	r3, [pc, #548]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005402:	e08f      	b.n	8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005404:	4b7c      	ldr	r3, [pc, #496]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005410:	4b79      	ldr	r3, [pc, #484]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	0f1b      	lsrs	r3, r3, #28
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	e006      	b.n	800542a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800541c:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800541e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	0f1b      	lsrs	r3, r3, #28
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	4a76      	ldr	r2, [pc, #472]	@ (8005604 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800542c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005450:	ed97 6a02 	vldr	s12, [r7, #8]
 8005454:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005464:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005470:	e058      	b.n	8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005484:	4b5c      	ldr	r3, [pc, #368]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005494:	ed97 6a02 	vldr	s12, [r7, #8]
 8005498:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800549c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b4:	e036      	b.n	8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054b6:	4b50      	ldr	r3, [pc, #320]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80054c2:	4b4d      	ldr	r3, [pc, #308]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	0f1b      	lsrs	r3, r3, #28
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80054ce:	4b4a      	ldr	r3, [pc, #296]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	0f1b      	lsrs	r3, r3, #28
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	4a49      	ldr	r2, [pc, #292]	@ (8005604 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80054de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	ed97 6a02 	vldr	s12, [r7, #8]
 8005506:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800550a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005516:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005522:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005524:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005530:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005534:	0a5b      	lsrs	r3, r3, #9
 8005536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005546:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800554a:	edd7 6a07 	vldr	s13, [r7, #28]
 800554e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005556:	ee17 2a90 	vmov	r2, s15
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e002      	b.n	8005566 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005566:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d017      	beq.n	80055a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005572:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005584:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005588:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800558c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80055a8:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d017      	beq.n	80055e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055b4:	4b10      	ldr	r3, [pc, #64]	@ (80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80055c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055da:	ee17 2a90 	vmov	r2, s15
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80055e2:	e002      	b.n	80055ea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
}
 80055ea:	bf00      	nop
 80055ec:	3724      	adds	r7, #36	@ 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	46020c00 	.word	0x46020c00
 80055fc:	4b742400 	.word	0x4b742400
 8005600:	46000000 	.word	0x46000000
 8005604:	08008b18 	.word	0x08008b18

08005608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	@ 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005610:	4ba6      	ldr	r3, [pc, #664]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800561a:	4ba4      	ldr	r3, [pc, #656]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005624:	4ba1      	ldr	r3, [pc, #644]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	3301      	adds	r3, #1
 8005630:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005632:	4b9e      	ldr	r3, [pc, #632]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800563e:	4b9b      	ldr	r3, [pc, #620]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	08db      	lsrs	r3, r3, #3
 8005644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b03      	cmp	r3, #3
 800565e:	d062      	beq.n	8005726 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b03      	cmp	r3, #3
 8005664:	f200 8081 	bhi.w	800576a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d024      	beq.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d17a      	bne.n	800576a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005686:	4b89      	ldr	r3, [pc, #548]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005696:	ed97 6a02 	vldr	s12, [r7, #8]
 800569a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800569e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056b6:	e08f      	b.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80056b8:	4b7c      	ldr	r3, [pc, #496]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80056c4:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	0f1b      	lsrs	r3, r3, #28
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	e006      	b.n	80056de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80056d0:	4b76      	ldr	r3, [pc, #472]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	0f1b      	lsrs	r3, r3, #28
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	4a76      	ldr	r2, [pc, #472]	@ (80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005704:	ed97 6a02 	vldr	s12, [r7, #8]
 8005708:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800570c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005718:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800571c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005724:	e058      	b.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005730:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005738:	4b5c      	ldr	r3, [pc, #368]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005748:	ed97 6a02 	vldr	s12, [r7, #8]
 800574c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005750:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005754:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005768:	e036      	b.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800576a:	4b50      	ldr	r3, [pc, #320]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005776:	4b4d      	ldr	r3, [pc, #308]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	0f1b      	lsrs	r3, r3, #28
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005782:	4b4a      	ldr	r3, [pc, #296]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	0f1b      	lsrs	r3, r3, #28
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	4a49      	ldr	r2, [pc, #292]	@ (80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057d6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80057d8:	4b34      	ldr	r3, [pc, #208]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057e4:	4b31      	ldr	r3, [pc, #196]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e8:	0a5b      	lsrs	r3, r3, #9
 80057ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80057f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580a:	ee17 2a90 	vmov	r2, s15
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e002      	b.n	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800581a:	4b24      	ldr	r3, [pc, #144]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d017      	beq.n	8005856 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005826:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	0c1b      	lsrs	r3, r3, #16
 800582c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800583c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005840:	edd7 6a07 	vldr	s13, [r7, #28]
 8005844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	ee17 2a90 	vmov	r2, s15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e002      	b.n	800585c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800585c:	4b13      	ldr	r3, [pc, #76]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005868:	4b10      	ldr	r3, [pc, #64]	@ (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800587a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800587e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005882:	edd7 6a07 	vldr	s13, [r7, #28]
 8005886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588e:	ee17 2a90 	vmov	r2, s15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005896:	e002      	b.n	800589e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	@ 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	46020c00 	.word	0x46020c00
 80058b0:	4b742400 	.word	0x4b742400
 80058b4:	46000000 	.word	0x46000000
 80058b8:	08008b18 	.word	0x08008b18

080058bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80058bc:	b480      	push	{r7}
 80058be:	b089      	sub	sp, #36	@ 0x24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80058c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80058ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80058d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80058e6:	4b9e      	ldr	r3, [pc, #632]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80058f2:	4b9b      	ldr	r3, [pc, #620]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f6:	08db      	lsrs	r3, r3, #3
 80058f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d062      	beq.n	80059da <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b03      	cmp	r3, #3
 8005918:	f200 8081 	bhi.w	8005a1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d024      	beq.n	800596c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d17a      	bne.n	8005a1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005932:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593a:	4b89      	ldr	r3, [pc, #548]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800594a:	ed97 6a02 	vldr	s12, [r7, #8]
 800594e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005952:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800595a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005966:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800596a:	e08f      	b.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800596c:	4b7c      	ldr	r3, [pc, #496]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005978:	4b79      	ldr	r3, [pc, #484]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	0f1b      	lsrs	r3, r3, #28
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	e006      	b.n	8005992 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005984:	4b76      	ldr	r3, [pc, #472]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	0f1b      	lsrs	r3, r3, #28
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	4a76      	ldr	r2, [pc, #472]	@ (8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80059bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80059c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80059d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d8:	e058      	b.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80059e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80059fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1c:	e036      	b.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a1e:	4b50      	ldr	r3, [pc, #320]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0f1b      	lsrs	r3, r3, #28
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	e006      	b.n	8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005a36:	4b4a      	ldr	r3, [pc, #296]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	0f1b      	lsrs	r3, r3, #28
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	4a49      	ldr	r2, [pc, #292]	@ (8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005a8c:	4b34      	ldr	r3, [pc, #208]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a98:	4b31      	ldr	r3, [pc, #196]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9c:	0a5b      	lsrs	r3, r3, #9
 8005a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abe:	ee17 2a90 	vmov	r2, s15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005ace:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ada:	4b21      	ldr	r3, [pc, #132]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005aec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005af0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b00:	ee17 2a90 	vmov	r2, s15
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005b10:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b1c:	4b10      	ldr	r3, [pc, #64]	@ (8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b20:	0e1b      	lsrs	r3, r3, #24
 8005b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b42:	ee17 2a90 	vmov	r2, s15
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b4a:	e002      	b.n	8005b52 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
}
 8005b52:	bf00      	nop
 8005b54:	3724      	adds	r7, #36	@ 0x24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	46020c00 	.word	0x46020c00
 8005b64:	4b742400 	.word	0x4b742400
 8005b68:	46000000 	.word	0x46000000
 8005b6c:	08008b18 	.word	0x08008b18

08005b70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	@ 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005b82:	430b      	orrs	r3, r1
 8005b84:	d145      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b86:	4baa      	ldr	r3, [pc, #680]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b90:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b92:	4ba7      	ldr	r3, [pc, #668]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d108      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba6:	d104      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bae:	f001 b987 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005bb2:	4b9f      	ldr	r3, [pc, #636]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bc0:	d114      	bne.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc8:	d110      	bne.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bca:	4b99      	ldr	r3, [pc, #612]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd8:	d103      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005bda:	23fa      	movs	r3, #250	@ 0xfa
 8005bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bde:	f001 b96f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005be2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005be6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005be8:	f001 b96a 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005bec:	4b90      	ldr	r3, [pc, #576]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c00:	d103      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005c02:	4b8c      	ldr	r3, [pc, #560]	@ (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c06:	f001 b95b 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c0e:	f001 b957 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c16:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	d151      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c1e:	4b84      	ldr	r3, [pc, #528]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c24:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005c28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	2b80      	cmp	r3, #128	@ 0x80
 8005c2e:	d035      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	2b80      	cmp	r3, #128	@ 0x80
 8005c34:	d841      	bhi.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2b60      	cmp	r3, #96	@ 0x60
 8005c3a:	d02a      	beq.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	2b60      	cmp	r3, #96	@ 0x60
 8005c40:	d83b      	bhi.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	2b40      	cmp	r3, #64	@ 0x40
 8005c46:	d009      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	2b40      	cmp	r3, #64	@ 0x40
 8005c4c:	d835      	bhi.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d012      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005c5a:	e02e      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fb77 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c6a:	f001 b929 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6e:	f107 0318 	add.w	r3, r7, #24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fcc8 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c7c:	f001 b920 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fe19 	bl	80058bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c8e:	f001 b917 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c98:	f001 b912 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c9c:	4b64      	ldr	r3, [pc, #400]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca8:	d103      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005caa:	4b63      	ldr	r3, [pc, #396]	@ (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005cac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cae:	f001 b907 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cb6:	f001 b903 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cbe:	f001 b8ff 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	d158      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005cce:	4b58      	ldr	r3, [pc, #352]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce0:	d03b      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce8:	d846      	bhi.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cf0:	d02e      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cf8:	d83e      	bhi.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d00:	d00b      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d08:	d836      	bhi.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d012      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005d18:	e02e      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fb18 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d28:	f001 b8ca 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d2c:	f107 0318 	add.w	r3, r7, #24
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fc69 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d3a:	f001 b8c1 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d3e:	f107 030c 	add.w	r3, r7, #12
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fdba 	bl	80058bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d4c:	f001 b8b8 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d50:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d56:	f001 b8b3 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d5a:	4b35      	ldr	r3, [pc, #212]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d66:	d103      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005d68:	4b33      	ldr	r3, [pc, #204]	@ (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d6c:	f001 b8a8 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d74:	f001 b8a4 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d7c:	f001 b8a0 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d84:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	d16e      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005d8c:	4b28      	ldr	r3, [pc, #160]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d92:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005d96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005d9e:	d034      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005da6:	d85c      	bhi.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dae:	d00b      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005db6:	d854      	bhi.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dc4:	d009      	beq.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005dc6:	e04c      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fac1 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dd6:	f001 b873 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dda:	f107 0318 	add.w	r3, r7, #24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fc12 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005de8:	f001 b86a 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df8:	d103      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dfe:	f001 b85f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e06:	f001 b85b 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d121      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005e22:	4b03      	ldr	r3, [pc, #12]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0e1b      	lsrs	r3, r3, #24
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	e00f      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005e2e:	bf00      	nop
 8005e30:	46020c00 	.word	0x46020c00
 8005e34:	0007a120 	.word	0x0007a120
 8005e38:	00f42400 	.word	0x00f42400
 8005e3c:	02dc6c00 	.word	0x02dc6c00
 8005e40:	4ba7      	ldr	r3, [pc, #668]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	0e1b      	lsrs	r3, r3, #24
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	4aa5      	ldr	r2, [pc, #660]	@ (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e56:	f001 b833 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e5e:	f001 b82f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e66:	f001 b82b 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e6e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005e72:	430b      	orrs	r3, r1
 8005e74:	d17f      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005e76:	4b9a      	ldr	r3, [pc, #616]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e80:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d165      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005e88:	4b95      	ldr	r3, [pc, #596]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e8e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005e92:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e9a:	d034      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ea2:	d853      	bhi.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eaa:	d00b      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb2:	d84b      	bhi.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005ec2:	e043      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fa43 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005ed2:	f000 bff5 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed6:	f107 0318 	add.w	r3, r7, #24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fb94 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005ee4:	f000 bfec 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005ee8:	4b7d      	ldr	r3, [pc, #500]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef4:	d103      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005efa:	f000 bfe1 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f02:	f000 bfdd 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f06:	4b76      	ldr	r3, [pc, #472]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d118      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f12:	4b73      	ldr	r3, [pc, #460]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005f1e:	4b70      	ldr	r3, [pc, #448]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	e006      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	0e1b      	lsrs	r3, r3, #24
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	4a6a      	ldr	r2, [pc, #424]	@ (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005f40:	f000 bfbe 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f48:	f000 bfba 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f50:	f000 bfb6 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f5a:	d108      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff f9f7 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6a:	f000 bfa9 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	f000 bfa5 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	1e51      	subs	r1, r2, #1
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	d136      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f80:	4b57      	ldr	r3, [pc, #348]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005f92:	f7fe fb8d 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8005f96:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f98:	f000 bf92 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d104      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005fa2:	f7fe fa55 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8005fa6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005fa8:	f000 bf8a 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005fac:	4b4c      	ldr	r3, [pc, #304]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb8:	d106      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d103      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc4:	f000 bf7c 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005fc8:	4b45      	ldr	r3, [pc, #276]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d104      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe2:	f000 bf6d 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fea:	f000 bf69 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff2:	1e91      	subs	r1, r2, #2
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	d136      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005ff8:	4b39      	ldr	r3, [pc, #228]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800600a:	f7fe fb3d 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 800600e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006010:	f000 bf56 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	2b04      	cmp	r3, #4
 8006018:	d104      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe fa19 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800601e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006020:	f000 bf4e 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006024:	4b2e      	ldr	r3, [pc, #184]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006030:	d106      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	2b08      	cmp	r3, #8
 8006036:	d103      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006038:	4b2c      	ldr	r3, [pc, #176]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
 800603c:	f000 bf40 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006040:	4b27      	ldr	r3, [pc, #156]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d107      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d104      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	f000 bf31 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
 8006062:	f000 bf2d 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606a:	1f11      	subs	r1, r2, #4
 800606c:	430b      	orrs	r3, r1
 800606e:	d13f      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006070:	4b1b      	ldr	r3, [pc, #108]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006076:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800607a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006082:	f7fe fb01 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006086:	6378      	str	r0, [r7, #52]	@ 0x34
 8006088:	f000 bf1a 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	2b10      	cmp	r3, #16
 8006090:	d104      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006092:	f7fe f9dd 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006096:	6378      	str	r0, [r7, #52]	@ 0x34
 8006098:	f000 bf12 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800609c:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a8:	d106      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d103      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80060b0:	4b0e      	ldr	r3, [pc, #56]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b4:	f000 bf04 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80060b8:	4b09      	ldr	r3, [pc, #36]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d107      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b30      	cmp	r3, #48	@ 0x30
 80060ca:	d104      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80060cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060d2:	f000 bef5 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060da:	f000 bef1 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80060de:	bf00      	nop
 80060e0:	46020c00 	.word	0x46020c00
 80060e4:	08008b18 	.word	0x08008b18
 80060e8:	02dc6c00 	.word	0x02dc6c00
 80060ec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80060f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f4:	f1a2 0108 	sub.w	r1, r2, #8
 80060f8:	430b      	orrs	r3, r1
 80060fa:	d136      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80060fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80060fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006102:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006106:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800610e:	f7fe fabb 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006112:	6378      	str	r0, [r7, #52]	@ 0x34
 8006114:	f000 bed4 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d104      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800611e:	f7fe f997 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006122:	6378      	str	r0, [r7, #52]	@ 0x34
 8006124:	f000 becc 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006128:	4b99      	ldr	r3, [pc, #612]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006134:	d106      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d103      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800613c:	4b95      	ldr	r3, [pc, #596]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800613e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006140:	f000 bebe 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006144:	4b92      	ldr	r3, [pc, #584]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d107      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	2bc0      	cmp	r3, #192	@ 0xc0
 8006156:	d104      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
 800615e:	f000 beaf 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
 8006166:	f000 beab 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800616a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616e:	f1a2 0110 	sub.w	r1, r2, #16
 8006172:	430b      	orrs	r3, r1
 8006174:	d139      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006176:	4b86      	ldr	r3, [pc, #536]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800617c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006180:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fe fa7e 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 800618c:	6378      	str	r0, [r7, #52]	@ 0x34
 800618e:	f000 be97 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d104      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800619a:	f7fe f959 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800619e:	6378      	str	r0, [r7, #52]	@ 0x34
 80061a0:	f000 be8e 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80061a4:	4b7a      	ldr	r3, [pc, #488]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d107      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b8:	d103      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80061ba:	4b76      	ldr	r3, [pc, #472]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061be:	f000 be7f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80061c2:	4b73      	ldr	r3, [pc, #460]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d108      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061d6:	d104      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80061d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061de:	f000 be6f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e6:	f000 be6b 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80061ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ee:	f1a2 0120 	sub.w	r1, r2, #32
 80061f2:	430b      	orrs	r3, r1
 80061f4:	d158      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80061f6:	4b66      	ldr	r3, [pc, #408]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006208:	f7fe fa66 	bl	80046d8 <HAL_RCC_GetPCLK3Freq>
 800620c:	6378      	str	r0, [r7, #52]	@ 0x34
 800620e:	f000 be57 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	2b01      	cmp	r3, #1
 8006216:	d104      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006218:	f7fe f91a 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800621c:	6378      	str	r0, [r7, #52]	@ 0x34
 800621e:	f000 be4f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006222:	4b5b      	ldr	r3, [pc, #364]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622e:	d106      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	2b02      	cmp	r3, #2
 8006234:	d103      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006236:	4b57      	ldr	r3, [pc, #348]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
 800623a:	f000 be41 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800623e:	4b54      	ldr	r3, [pc, #336]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d107      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	2b03      	cmp	r3, #3
 8006250:	d104      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
 8006258:	f000 be32 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800625c:	4b4c      	ldr	r3, [pc, #304]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b20      	cmp	r3, #32
 8006266:	d11b      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	2b04      	cmp	r3, #4
 800626c:	d118      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800626e:	4b48      	ldr	r3, [pc, #288]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800627a:	4b45      	ldr	r3, [pc, #276]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	0e1b      	lsrs	r3, r3, #24
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006286:	4b42      	ldr	r3, [pc, #264]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	0e1b      	lsrs	r3, r3, #24
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	4a40      	ldr	r2, [pc, #256]	@ (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
 800629c:	f000 be10 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a4:	f000 be0c 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80062a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80062b0:	430b      	orrs	r3, r1
 80062b2:	d173      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80062b4:	4b36      	ldr	r3, [pc, #216]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062ba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80062be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c6:	d104      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062c8:	f7fe f8c2 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80062cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80062ce:	f000 bdf7 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d8:	d108      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062da:	f107 0318 	add.w	r3, r7, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff f992 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e8:	f000 bdea 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80062f2:	f7fe f9af 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80062f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80062f8:	f000 bde2 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006302:	d122      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006304:	4b22      	ldr	r3, [pc, #136]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b20      	cmp	r3, #32
 800630e:	d118      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006310:	4b1f      	ldr	r3, [pc, #124]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800631c:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	0e1b      	lsrs	r3, r3, #24
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	e006      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006328:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800632a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	0e1b      	lsrs	r3, r3, #24
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	4a18      	ldr	r2, [pc, #96]	@ (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34
 800633e:	f000 bdbf 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	@ 0x34
 8006346:	f000 bdbb 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800634a:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006356:	d107      	bne.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800635e:	d103      	bne.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
 8006364:	f000 bdac 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006368:	4b09      	ldr	r3, [pc, #36]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006374:	d107      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800637c:	d103      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800637e:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
 8006382:	f000 bd9d 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	f000 bd99 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800638e:	bf00      	nop
 8006390:	46020c00 	.word	0x46020c00
 8006394:	00f42400 	.word	0x00f42400
 8006398:	08008b18 	.word	0x08008b18
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800639c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80063a4:	430b      	orrs	r3, r1
 80063a6:	d158      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80063a8:	4bad      	ldr	r3, [pc, #692]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d84b      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063f9 	.word	0x080063f9
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063e7 	.word	0x080063e7
 80063cc:	08006403 	.word	0x08006403
 80063d0:	0800640d 	.word	0x0800640d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe ffbb 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063e2:	f000 bd6d 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff fa66 	bl	80058bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063f4:	f000 bd64 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80063f8:	f7fe f92c 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80063fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80063fe:	f000 bd5f 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006402:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006408:	f000 bd5a 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800640c:	4b94      	ldr	r3, [pc, #592]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b20      	cmp	r3, #32
 8006416:	d118      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006418:	4b91      	ldr	r3, [pc, #580]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006424:	4b8e      	ldr	r3, [pc, #568]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	e006      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006430:	4b8b      	ldr	r3, [pc, #556]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006436:	041b      	lsls	r3, r3, #16
 8006438:	0e1b      	lsrs	r3, r3, #24
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	4a89      	ldr	r2, [pc, #548]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006446:	f000 bd3b 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800644e:	f000 bd37 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006456:	f000 bd33 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800645a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800645e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006462:	430b      	orrs	r3, r1
 8006464:	d167      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006466:	4b7e      	ldr	r3, [pc, #504]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800646c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006470:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006478:	d036      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006480:	d855      	bhi.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006488:	d029      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006490:	d84d      	bhi.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006498:	d013      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a0:	d845      	bhi.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ae:	d13e      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe ff4d 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064be:	f000 bcff 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c2:	f107 030c 	add.w	r3, r7, #12
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f9f8 	bl	80058bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064d0:	f000 bcf6 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80064d4:	f7fe f8be 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80064d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064da:	f000 bcf1 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80064de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064e4:	f000 bcec 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d118      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006500:	4b57      	ldr	r3, [pc, #348]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	0e1b      	lsrs	r3, r3, #24
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	e006      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800650c:	4b54      	ldr	r3, [pc, #336]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800650e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	4a52      	ldr	r2, [pc, #328]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800651c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006522:	f000 bccd 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800652a:	f000 bcc9 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006532:	f000 bcc5 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800653e:	430b      	orrs	r3, r1
 8006540:	d14c      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006542:	4b47      	ldr	r3, [pc, #284]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800654c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe f898 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006558:	6378      	str	r0, [r7, #52]	@ 0x34
 800655a:	f000 bcb1 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006564:	d104      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd ff73 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800656a:	6378      	str	r0, [r7, #52]	@ 0x34
 800656c:	f000 bca8 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006570:	4b3b      	ldr	r3, [pc, #236]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657c:	d107      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006584:	d103      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006586:	4b38      	ldr	r3, [pc, #224]	@ (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	f000 bc99 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800658e:	4b34      	ldr	r3, [pc, #208]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	d11c      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065a0:	d118      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80065ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	0e1b      	lsrs	r3, r3, #24
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	e006      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80065ba:	4b29      	ldr	r3, [pc, #164]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c0:	041b      	lsls	r3, r3, #16
 80065c2:	0e1b      	lsrs	r3, r3, #24
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80065ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d0:	f000 bc76 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d8:	f000 bc72 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80065dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80065e4:	430b      	orrs	r3, r1
 80065e6:	d152      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80065e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fe f845 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80065fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006600:	f000 bc5e 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800660a:	d104      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800660c:	f7fd ff20 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006610:	6378      	str	r0, [r7, #52]	@ 0x34
 8006612:	f000 bc55 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006616:	4b12      	ldr	r3, [pc, #72]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006622:	d107      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662a:	d103      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800662c:	4b0e      	ldr	r3, [pc, #56]	@ (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	f000 bc46 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006634:	4b0a      	ldr	r3, [pc, #40]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b20      	cmp	r3, #32
 800663e:	d122      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006646:	d11e      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006654:	4b02      	ldr	r3, [pc, #8]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	0e1b      	lsrs	r3, r3, #24
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	e00c      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006660:	46020c00 	.word	0x46020c00
 8006664:	08008b18 	.word	0x08008b18
 8006668:	00f42400 	.word	0x00f42400
 800666c:	4ba1      	ldr	r3, [pc, #644]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800666e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	0e1b      	lsrs	r3, r3, #24
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	4a9f      	ldr	r2, [pc, #636]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800667c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
 8006682:	f000 bc1d 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
 800668a:	f000 bc19 	b.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800668e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006692:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006696:	430b      	orrs	r3, r1
 8006698:	d151      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800669a:	4b96      	ldr	r3, [pc, #600]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800669c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066a0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80066aa:	d024      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b0:	d842      	bhi.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2b80      	cmp	r3, #128	@ 0x80
 80066b6:	d00d      	beq.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d83c      	bhi.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d011      	beq.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80066ca:	e035      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80066cc:	f7fe f804 	bl	80046d8 <HAL_RCC_GetPCLK3Freq>
 80066d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80066d2:	e3f5      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066d4:	4b87      	ldr	r3, [pc, #540]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e0:	d102      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80066e2:	4b86      	ldr	r3, [pc, #536]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066e6:	e3eb      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ec:	e3e8      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fd feaf 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80066f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80066f4:	e3e4      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066f6:	4b7f      	ldr	r3, [pc, #508]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d117      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006702:	4b7c      	ldr	r3, [pc, #496]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800670e:	4b79      	ldr	r3, [pc, #484]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0e1b      	lsrs	r3, r3, #24
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800671a:	4b76      	ldr	r3, [pc, #472]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800671c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	0e1b      	lsrs	r3, r3, #24
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	4a73      	ldr	r2, [pc, #460]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006730:	e3c6      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006736:	e3c3      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800673c:	e3c0      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800673e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006742:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006746:	430b      	orrs	r3, r1
 8006748:	d147      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800674a:	4b6a      	ldr	r3, [pc, #424]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800674c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006754:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d103      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800675c:	f7fd ff94 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006760:	6378      	str	r0, [r7, #52]	@ 0x34
 8006762:	e3ad      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676a:	d103      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800676c:	f7fd fe70 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006770:	6378      	str	r0, [r7, #52]	@ 0x34
 8006772:	e3a5      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006774:	4b5f      	ldr	r3, [pc, #380]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006780:	d106      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006788:	d102      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800678a:	4b5c      	ldr	r3, [pc, #368]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800678c:	637b      	str	r3, [r7, #52]	@ 0x34
 800678e:	e397      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006790:	4b58      	ldr	r3, [pc, #352]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b20      	cmp	r3, #32
 800679a:	d11b      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067a2:	d117      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067a4:	4b53      	ldr	r3, [pc, #332]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80067b0:	4b50      	ldr	r3, [pc, #320]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	0e1b      	lsrs	r3, r3, #24
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	e006      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80067bc:	4b4d      	ldr	r3, [pc, #308]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	4a4b      	ldr	r2, [pc, #300]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d2:	e375      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d8:	e372      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80067da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80067e2:	430b      	orrs	r3, r1
 80067e4:	d164      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80067e6:	4b43      	ldr	r3, [pc, #268]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d120      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067f8:	4b3e      	ldr	r3, [pc, #248]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d117      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006804:	4b3b      	ldr	r3, [pc, #236]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006810:	4b38      	ldr	r3, [pc, #224]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	e006      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800681c:	4b35      	ldr	r3, [pc, #212]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800681e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	0e1b      	lsrs	r3, r3, #24
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	4a33      	ldr	r2, [pc, #204]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
 8006832:	e345      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
 8006838:	e342      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800683a:	4b2e      	ldr	r3, [pc, #184]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800683c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006848:	d112      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006850:	d10e      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006852:	4b28      	ldr	r3, [pc, #160]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006860:	d102      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006862:	23fa      	movs	r3, #250	@ 0xfa
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006866:	e32b      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006868:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800686e:	e327      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006870:	4b20      	ldr	r3, [pc, #128]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687c:	d106      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006884:	d102      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006886:	4b1d      	ldr	r3, [pc, #116]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
 800688a:	e319      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800688c:	4b19      	ldr	r3, [pc, #100]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800688e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d107      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068a0:	d103      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	e30a      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ae:	e307      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80068b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80068b8:	430b      	orrs	r3, r1
 80068ba:	d16b      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068bc:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d127      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068ce:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d11e      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068da:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80068e6:	4b03      	ldr	r3, [pc, #12]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	0e1b      	lsrs	r3, r3, #24
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	e00d      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80068f2:	bf00      	nop
 80068f4:	46020c00 	.word	0x46020c00
 80068f8:	08008b18 	.word	0x08008b18
 80068fc:	00f42400 	.word	0x00f42400
 8006900:	4b94      	ldr	r3, [pc, #592]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	4a92      	ldr	r2, [pc, #584]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	e2d3      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
 800691c:	e2d0      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800691e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692c:	d112      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006934:	d10e      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006936:	4b87      	ldr	r3, [pc, #540]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800693c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006944:	d102      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006946:	23fa      	movs	r3, #250	@ 0xfa
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800694a:	e2b9      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800694c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006952:	e2b5      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006954:	4b7f      	ldr	r3, [pc, #508]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006960:	d106      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006968:	d102      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800696a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
 800696e:	e2a7      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006970:	4b78      	ldr	r3, [pc, #480]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b02      	cmp	r3, #2
 800697c:	d107      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006984:	d103      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800698a:	637b      	str	r3, [r7, #52]	@ 0x34
 800698c:	e298      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	637b      	str	r3, [r7, #52]	@ 0x34
 8006992:	e295      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006998:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800699c:	430b      	orrs	r3, r1
 800699e:	d147      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80069aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069b2:	f7fd fe69 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80069b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80069b8:	e282      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80069ba:	4b66      	ldr	r3, [pc, #408]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069c8:	d112      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069d0:	d10e      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069d2:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e0:	d102      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80069e2:	23fa      	movs	r3, #250	@ 0xfa
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069e6:	e26b      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80069e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069ee:	e267      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80069f0:	4b58      	ldr	r3, [pc, #352]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fc:	d106      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a04:	d102      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006a06:	4b55      	ldr	r3, [pc, #340]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0a:	e259      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006a0c:	4b51      	ldr	r3, [pc, #324]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a20:	d103      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a28:	e24a      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2e:	e247      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a34:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	d12d      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006a3c:	4b45      	ldr	r3, [pc, #276]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a42:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006a46:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006a48:	4b42      	ldr	r3, [pc, #264]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a54:	d105      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a60:	e22e      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a68:	d107      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fc70 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a78:	e222      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a80:	d107      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a82:	f107 0318 	add.w	r3, r7, #24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fdbe 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a90:	e216      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a96:	e213      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	d15d      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aaa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006aae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ab6:	d028      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006abe:	d845      	bhi.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ac6:	d013      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ace:	d83d      	bhi.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006adc:	d004      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006ade:	e035      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fd fde6 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ae6:	e1eb      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ae8:	f7fd fcb2 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006aec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006aee:	e1e7      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006af0:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afc:	d102      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006afe:	4b17      	ldr	r3, [pc, #92]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b02:	e1dd      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b08:	e1da      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b0a:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d117      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	0e1b      	lsrs	r3, r3, #24
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	e006      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006b2e:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b34:	041b      	lsls	r3, r3, #16
 8006b36:	0e1b      	lsrs	r3, r3, #24
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	4a06      	ldr	r2, [pc, #24]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b44:	e1bc      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b4a:	e1b9      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b50:	e1b6      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006b52:	bf00      	nop
 8006b54:	46020c00 	.word	0x46020c00
 8006b58:	08008b18 	.word	0x08008b18
 8006b5c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	d156      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006b6c:	4ba5      	ldr	r3, [pc, #660]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b7e:	d028      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b86:	d845      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b8e:	d013      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b96:	d83d      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006ba6:	e035      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fd fd6e 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006bac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bae:	e187      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006bb0:	f7fd fc4e 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006bb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bb6:	e183      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bb8:	4b92      	ldr	r3, [pc, #584]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc4:	d102      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006bc6:	4b90      	ldr	r3, [pc, #576]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bca:	e179      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd0:	e176      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d117      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bde:	4b89      	ldr	r3, [pc, #548]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006bea:	4b86      	ldr	r3, [pc, #536]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0e1b      	lsrs	r3, r3, #24
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	e006      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006bf6:	4b83      	ldr	r3, [pc, #524]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	4a81      	ldr	r2, [pc, #516]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c0c:	e158      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c12:	e155      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c18:	e152      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006c22:	430b      	orrs	r3, r1
 8006c24:	d177      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006c26:	4b77      	ldr	r3, [pc, #476]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c2c:	f003 0318 	and.w	r3, r3, #24
 8006c30:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	2b18      	cmp	r3, #24
 8006c36:	d86b      	bhi.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006d11 	.word	0x08006d11
 8006c48:	08006d11 	.word	0x08006d11
 8006c4c:	08006d11 	.word	0x08006d11
 8006c50:	08006d11 	.word	0x08006d11
 8006c54:	08006d11 	.word	0x08006d11
 8006c58:	08006d11 	.word	0x08006d11
 8006c5c:	08006d11 	.word	0x08006d11
 8006c60:	08006cad 	.word	0x08006cad
 8006c64:	08006d11 	.word	0x08006d11
 8006c68:	08006d11 	.word	0x08006d11
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d11 	.word	0x08006d11
 8006c74:	08006d11 	.word	0x08006d11
 8006c78:	08006d11 	.word	0x08006d11
 8006c7c:	08006d11 	.word	0x08006d11
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006d11 	.word	0x08006d11
 8006c88:	08006d11 	.word	0x08006d11
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006d11 	.word	0x08006d11
 8006c94:	08006d11 	.word	0x08006d11
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006d11 	.word	0x08006d11
 8006ca0:	08006ccf 	.word	0x08006ccf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006ca4:	f7fd fd18 	bl	80046d8 <HAL_RCC_GetPCLK3Freq>
 8006ca8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006caa:	e109      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006cac:	f7fd fbd0 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006cb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006cb2:	e105      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb4:	4b53      	ldr	r3, [pc, #332]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc0:	d102      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006cc2:	4b51      	ldr	r3, [pc, #324]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cc6:	e0fb      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ccc:	e0f8      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cce:	4b4d      	ldr	r3, [pc, #308]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d117      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cda:	4b4a      	ldr	r3, [pc, #296]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006ce6:	4b47      	ldr	r3, [pc, #284]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	e006      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006cf2:	4b44      	ldr	r3, [pc, #272]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	0e1b      	lsrs	r3, r3, #24
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	4a42      	ldr	r2, [pc, #264]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d08:	e0da      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d0e:	e0d7      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d14:	e0d4      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	d155      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006d22:	4b38      	ldr	r3, [pc, #224]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d28:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d34:	d013      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d3c:	d844      	bhi.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d44:	d013      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d4c:	d83c      	bhi.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d014      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d5a:	d014      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006d5c:	e034      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5e:	f107 0318 	add.w	r3, r7, #24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fc50 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d6c:	e0a8      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe faee 	bl	8005354 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d7c:	e0a0      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fd fb67 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006d82:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d84:	e09c      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d86:	4b1f      	ldr	r3, [pc, #124]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d117      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d92:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006d9e:	4b19      	ldr	r3, [pc, #100]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	0e1b      	lsrs	r3, r3, #24
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	e006      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006daa:	4b16      	ldr	r3, [pc, #88]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	0e1b      	lsrs	r3, r3, #24
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	4a14      	ldr	r2, [pc, #80]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dc0:	e07e      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc6:	e07b      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dcc:	e078      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	d138      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006de4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006de6:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d10d      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e00:	e05e      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006e02:	bf00      	nop
 8006e04:	46020c00 	.word	0x46020c00
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	08008b18 	.word	0x08008b18
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006e10:	4b2e      	ldr	r3, [pc, #184]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e1e:	d112      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e26:	d10e      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e28:	4b28      	ldr	r3, [pc, #160]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e36:	d102      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006e38:	23fa      	movs	r3, #250	@ 0xfa
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e3c:	e040      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e44:	e03c      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4a:	e039      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006e54:	430b      	orrs	r3, r1
 8006e56:	d131      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006e58:	4b1c      	ldr	r3, [pc, #112]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006e64:	4b19      	ldr	r3, [pc, #100]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e70:	d105      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006e78:	4b15      	ldr	r3, [pc, #84]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	e020      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006e7e:	4b13      	ldr	r3, [pc, #76]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8a:	d106      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e92:	d102      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e98:	e012      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eae:	d102      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006eb0:	4b09      	ldr	r3, [pc, #36]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb4:	e004      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3738      	adds	r7, #56	@ 0x38
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	46020c00 	.word	0x46020c00
 8006ed0:	02dc6c00 	.word	0x02dc6c00
 8006ed4:	016e3600 	.word	0x016e3600
 8006ed8:	00f42400 	.word	0x00f42400

08006edc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006ee4:	4b47      	ldr	r3, [pc, #284]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a46      	ldr	r2, [pc, #280]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ef0:	f7fa f8b0 	bl	8001054 <HAL_GetTick>
 8006ef4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ef6:	e008      	b.n	8006f0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ef8:	f7fa f8ac 	bl	8001054 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e077      	b.n	8006ffa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006f16:	4b3b      	ldr	r3, [pc, #236]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6811      	ldr	r1, [r2, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6852      	ldr	r2, [r2, #4]
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	0212      	lsls	r2, r2, #8
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	4934      	ldr	r1, [pc, #208]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006f36:	4b33      	ldr	r3, [pc, #204]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f3a:	4b33      	ldr	r3, [pc, #204]	@ (8007008 <RCCEx_PLL2_Config+0x12c>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6892      	ldr	r2, [r2, #8]
 8006f42:	3a01      	subs	r2, #1
 8006f44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68d2      	ldr	r2, [r2, #12]
 8006f4c:	3a01      	subs	r2, #1
 8006f4e:	0252      	lsls	r2, r2, #9
 8006f50:	b292      	uxth	r2, r2
 8006f52:	4311      	orrs	r1, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6912      	ldr	r2, [r2, #16]
 8006f58:	3a01      	subs	r2, #1
 8006f5a:	0412      	lsls	r2, r2, #16
 8006f5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006f60:	4311      	orrs	r1, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6952      	ldr	r2, [r2, #20]
 8006f66:	3a01      	subs	r2, #1
 8006f68:	0612      	lsls	r2, r2, #24
 8006f6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	4924      	ldr	r1, [pc, #144]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006f76:	4b23      	ldr	r3, [pc, #140]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	f023 020c 	bic.w	r2, r3, #12
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	4920      	ldr	r1, [pc, #128]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006f88:	4b1e      	ldr	r3, [pc, #120]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	491c      	ldr	r1, [pc, #112]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006f96:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006f9c:	f023 0310 	bic.w	r3, r3, #16
 8006fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fa2:	4b18      	ldr	r3, [pc, #96]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006faa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	69d2      	ldr	r2, [r2, #28]
 8006fb2:	00d2      	lsls	r2, r2, #3
 8006fb4:	4913      	ldr	r1, [pc, #76]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006fba:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fc0:	f043 0310 	orr.w	r3, r3, #16
 8006fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a0e      	ldr	r2, [pc, #56]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006fd0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006fd2:	f7fa f83f 	bl	8001054 <HAL_GetTick>
 8006fd6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fda:	f7fa f83b 	bl	8001054 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e006      	b.n	8006ffa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fec:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <RCCEx_PLL2_Config+0x128>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0

}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	46020c00 	.word	0x46020c00
 8007008:	80800000 	.word	0x80800000

0800700c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007014:	4b47      	ldr	r3, [pc, #284]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a46      	ldr	r2, [pc, #280]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 800701a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800701e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007020:	f7fa f818 	bl	8001054 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007026:	e008      	b.n	800703a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007028:	f7fa f814 	bl	8001054 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e077      	b.n	800712a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800703a:	4b3e      	ldr	r3, [pc, #248]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007046:	4b3b      	ldr	r3, [pc, #236]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6852      	ldr	r2, [r2, #4]
 800705a:	3a01      	subs	r2, #1
 800705c:	0212      	lsls	r2, r2, #8
 800705e:	430a      	orrs	r2, r1
 8007060:	4934      	ldr	r1, [pc, #208]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 8007062:	4313      	orrs	r3, r2
 8007064:	630b      	str	r3, [r1, #48]	@ 0x30
 8007066:	4b33      	ldr	r3, [pc, #204]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 8007068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706a:	4b33      	ldr	r3, [pc, #204]	@ (8007138 <RCCEx_PLL3_Config+0x12c>)
 800706c:	4013      	ands	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6892      	ldr	r2, [r2, #8]
 8007072:	3a01      	subs	r2, #1
 8007074:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68d2      	ldr	r2, [r2, #12]
 800707c:	3a01      	subs	r2, #1
 800707e:	0252      	lsls	r2, r2, #9
 8007080:	b292      	uxth	r2, r2
 8007082:	4311      	orrs	r1, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6912      	ldr	r2, [r2, #16]
 8007088:	3a01      	subs	r2, #1
 800708a:	0412      	lsls	r2, r2, #16
 800708c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007090:	4311      	orrs	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6952      	ldr	r2, [r2, #20]
 8007096:	3a01      	subs	r2, #1
 8007098:	0612      	lsls	r2, r2, #24
 800709a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800709e:	430a      	orrs	r2, r1
 80070a0:	4924      	ldr	r1, [pc, #144]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80070a6:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	f023 020c 	bic.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	4920      	ldr	r1, [pc, #128]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80070b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	491c      	ldr	r1, [pc, #112]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80070c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070cc:	f023 0310 	bic.w	r3, r3, #16
 80070d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070d2:	4b18      	ldr	r3, [pc, #96]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	69d2      	ldr	r2, [r2, #28]
 80070e2:	00d2      	lsls	r2, r2, #3
 80070e4:	4913      	ldr	r1, [pc, #76]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80070ea:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	4a11      	ldr	r2, [pc, #68]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070f0:	f043 0310 	orr.w	r3, r3, #16
 80070f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80070f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 80070fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007100:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007102:	f7f9 ffa7 	bl	8001054 <HAL_GetTick>
 8007106:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007108:	e008      	b.n	800711c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800710a:	f7f9 ffa3 	bl	8001054 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800711c:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <RCCEx_PLL3_Config+0x128>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	46020c00 	.word	0x46020c00
 8007138:	80800000 	.word	0x80800000

0800713c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e042      	b.n	80071d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7f9 fd25 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2224      	movs	r2, #36	@ 0x24
 800716a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9ca 	bl	8007520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f825 	bl	80071dc <UART_SetConfig>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e01b      	b.n	80071d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa49 	bl	8007664 <UART_CheckIdleState>
 80071d2:	4603      	mov	r3, r0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e0:	b094      	sub	sp, #80	@ 0x50
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b7e      	ldr	r3, [pc, #504]	@ (80073ec <UART_SetConfig+0x210>)
 80071f2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	431a      	orrs	r2, r3
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	4313      	orrs	r3, r2
 800720a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4977      	ldr	r1, [pc, #476]	@ (80073f0 <UART_SetConfig+0x214>)
 8007214:	4019      	ands	r1, r3
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800721c:	430b      	orrs	r3, r1
 800721e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	ea40 0301 	orr.w	r3, r0, r1
 8007236:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b6a      	ldr	r3, [pc, #424]	@ (80073ec <UART_SetConfig+0x210>)
 8007244:	429a      	cmp	r2, r3
 8007246:	d009      	beq.n	800725c <UART_SetConfig+0x80>
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4b69      	ldr	r3, [pc, #420]	@ (80073f4 <UART_SetConfig+0x218>)
 800724e:	429a      	cmp	r2, r3
 8007250:	d004      	beq.n	800725c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007258:	4313      	orrs	r3, r2
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007266:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007270:	430b      	orrs	r3, r1
 8007272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	f023 000f 	bic.w	r0, r3, #15
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	ea40 0301 	orr.w	r3, r0, r1
 800728a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b59      	ldr	r3, [pc, #356]	@ (80073f8 <UART_SetConfig+0x21c>)
 8007292:	429a      	cmp	r2, r3
 8007294:	d102      	bne.n	800729c <UART_SetConfig+0xc0>
 8007296:	2301      	movs	r3, #1
 8007298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800729a:	e029      	b.n	80072f0 <UART_SetConfig+0x114>
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b56      	ldr	r3, [pc, #344]	@ (80073fc <UART_SetConfig+0x220>)
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d102      	bne.n	80072ac <UART_SetConfig+0xd0>
 80072a6:	2302      	movs	r3, #2
 80072a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072aa:	e021      	b.n	80072f0 <UART_SetConfig+0x114>
 80072ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4b53      	ldr	r3, [pc, #332]	@ (8007400 <UART_SetConfig+0x224>)
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d102      	bne.n	80072bc <UART_SetConfig+0xe0>
 80072b6:	2304      	movs	r3, #4
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ba:	e019      	b.n	80072f0 <UART_SetConfig+0x114>
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b50      	ldr	r3, [pc, #320]	@ (8007404 <UART_SetConfig+0x228>)
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d102      	bne.n	80072cc <UART_SetConfig+0xf0>
 80072c6:	2308      	movs	r3, #8
 80072c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ca:	e011      	b.n	80072f0 <UART_SetConfig+0x114>
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007408 <UART_SetConfig+0x22c>)
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d102      	bne.n	80072dc <UART_SetConfig+0x100>
 80072d6:	2310      	movs	r3, #16
 80072d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072da:	e009      	b.n	80072f0 <UART_SetConfig+0x114>
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b42      	ldr	r3, [pc, #264]	@ (80073ec <UART_SetConfig+0x210>)
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d102      	bne.n	80072ec <UART_SetConfig+0x110>
 80072e6:	2320      	movs	r3, #32
 80072e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ea:	e001      	b.n	80072f0 <UART_SetConfig+0x114>
 80072ec:	2300      	movs	r3, #0
 80072ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b3d      	ldr	r3, [pc, #244]	@ (80073ec <UART_SetConfig+0x210>)
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d005      	beq.n	8007306 <UART_SetConfig+0x12a>
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b3d      	ldr	r3, [pc, #244]	@ (80073f4 <UART_SetConfig+0x218>)
 8007300:	429a      	cmp	r2, r3
 8007302:	f040 8085 	bne.w	8007410 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007308:	2200      	movs	r2, #0
 800730a:	623b      	str	r3, [r7, #32]
 800730c:	627a      	str	r2, [r7, #36]	@ 0x24
 800730e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007312:	f7fe fc2d 	bl	8005b70 <HAL_RCCEx_GetPeriphCLKFreq>
 8007316:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80e8 	beq.w	80074f0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	4a39      	ldr	r2, [pc, #228]	@ (800740c <UART_SetConfig+0x230>)
 8007326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800732a:	461a      	mov	r2, r3
 800732c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	4413      	add	r3, r2
 800733e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007340:	429a      	cmp	r2, r3
 8007342:	d305      	bcc.n	8007350 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800734a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800734c:	429a      	cmp	r2, r3
 800734e:	d903      	bls.n	8007358 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007356:	e048      	b.n	80073ea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800735a:	2200      	movs	r2, #0
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	61fa      	str	r2, [r7, #28]
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	4a29      	ldr	r2, [pc, #164]	@ (800740c <UART_SetConfig+0x230>)
 8007366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800736a:	b29b      	uxth	r3, r3
 800736c:	2200      	movs	r2, #0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	617a      	str	r2, [r7, #20]
 8007372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800737a:	f7f8 ff7d 	bl	8000278 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	020b      	lsls	r3, r1, #8
 8007390:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007394:	0202      	lsls	r2, r0, #8
 8007396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	0849      	lsrs	r1, r1, #1
 800739c:	2000      	movs	r0, #0
 800739e:	460c      	mov	r4, r1
 80073a0:	4605      	mov	r5, r0
 80073a2:	eb12 0804 	adds.w	r8, r2, r4
 80073a6:	eb43 0905 	adc.w	r9, r3, r5
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	60fa      	str	r2, [r7, #12]
 80073b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f8 ff5c 	bl	8000278 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ce:	d308      	bcc.n	80073e2 <UART_SetConfig+0x206>
 80073d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d6:	d204      	bcs.n	80073e2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073de:	60da      	str	r2, [r3, #12]
 80073e0:	e003      	b.n	80073ea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80073e8:	e082      	b.n	80074f0 <UART_SetConfig+0x314>
 80073ea:	e081      	b.n	80074f0 <UART_SetConfig+0x314>
 80073ec:	46002400 	.word	0x46002400
 80073f0:	cfff69f3 	.word	0xcfff69f3
 80073f4:	56002400 	.word	0x56002400
 80073f8:	40013800 	.word	0x40013800
 80073fc:	40004400 	.word	0x40004400
 8007400:	40004800 	.word	0x40004800
 8007404:	40004c00 	.word	0x40004c00
 8007408:	40005000 	.word	0x40005000
 800740c:	08008bd8 	.word	0x08008bd8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007418:	d13c      	bne.n	8007494 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800741a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800741c:	2200      	movs	r2, #0
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007426:	f7fe fba3 	bl	8005b70 <HAL_RCCEx_GetPeriphCLKFreq>
 800742a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800742c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d05e      	beq.n	80074f0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	4a39      	ldr	r2, [pc, #228]	@ (800751c <UART_SetConfig+0x340>)
 8007438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743c:	461a      	mov	r2, r3
 800743e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007440:	fbb3 f3f2 	udiv	r3, r3, r2
 8007444:	005a      	lsls	r2, r3, #1
 8007446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	441a      	add	r2, r3
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d916      	bls.n	800748c <UART_SetConfig+0x2b0>
 800745e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007464:	d212      	bcs.n	800748c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	b29b      	uxth	r3, r3
 800746a:	f023 030f 	bic.w	r3, r3, #15
 800746e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	b29b      	uxth	r3, r3
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	b29a      	uxth	r2, r3
 800747c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800747e:	4313      	orrs	r3, r2
 8007480:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007488:	60da      	str	r2, [r3, #12]
 800748a:	e031      	b.n	80074f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007492:	e02d      	b.n	80074f0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007496:	2200      	movs	r2, #0
 8007498:	469a      	mov	sl, r3
 800749a:	4693      	mov	fp, r2
 800749c:	4650      	mov	r0, sl
 800749e:	4659      	mov	r1, fp
 80074a0:	f7fe fb66 	bl	8005b70 <HAL_RCCEx_GetPeriphCLKFreq>
 80074a4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80074a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d021      	beq.n	80074f0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	4a1a      	ldr	r2, [pc, #104]	@ (800751c <UART_SetConfig+0x340>)
 80074b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	441a      	add	r2, r3
 80074c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d2:	2b0f      	cmp	r3, #15
 80074d4:	d909      	bls.n	80074ea <UART_SetConfig+0x30e>
 80074d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074dc:	d205      	bcs.n	80074ea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60da      	str	r2, [r3, #12]
 80074e8:	e002      	b.n	80074f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fa:	2201      	movs	r2, #1
 80074fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	2200      	movs	r2, #0
 8007504:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007508:	2200      	movs	r2, #0
 800750a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800750c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007510:	4618      	mov	r0, r3
 8007512:	3750      	adds	r7, #80	@ 0x50
 8007514:	46bd      	mov	sp, r7
 8007516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751a:	bf00      	nop
 800751c:	08008bd8 	.word	0x08008bd8

08007520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01a      	beq.n	8007636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761e:	d10a      	bne.n	8007636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b098      	sub	sp, #96	@ 0x60
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007674:	f7f9 fcee 	bl	8001054 <HAL_GetTick>
 8007678:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b08      	cmp	r3, #8
 8007686:	d12f      	bne.n	80076e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f88e 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d022      	beq.n	80076e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e063      	b.n	80077b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d149      	bne.n	800778a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076fe:	2200      	movs	r2, #0
 8007700:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f857 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d03c      	beq.n	800778a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	623b      	str	r3, [r7, #32]
   return(result);
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007730:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	60fb      	str	r3, [r7, #12]
   return(result);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007762:	61fa      	str	r2, [r7, #28]
 8007764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	69b9      	ldr	r1, [r7, #24]
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	617b      	str	r3, [r7, #20]
   return(result);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e012      	b.n	80077b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3758      	adds	r7, #88	@ 0x58
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c8:	e04f      	b.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077d0:	d04b      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d2:	f7f9 fc3f 	bl	8001054 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d302      	bcc.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e04e      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d037      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b80      	cmp	r3, #128	@ 0x80
 80077fe:	d034      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d031      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b08      	cmp	r3, #8
 8007812:	d110      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2208      	movs	r2, #8
 800781a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f838 	bl	8007892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2208      	movs	r2, #8
 8007826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e029      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007844:	d111      	bne.n	800786a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800784e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f81e 	bl	8007892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e00f      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	429a      	cmp	r2, r3
 8007886:	d0a0      	beq.n	80077ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007892:	b480      	push	{r7}
 8007894:	b095      	sub	sp, #84	@ 0x54
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e6      	bne.n	800789a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	61fb      	str	r3, [r7, #28]
   return(result);
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e3      	bne.n	80078cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d118      	bne.n	800793e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	60bb      	str	r3, [r7, #8]
   return(result);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f023 0310 	bic.w	r3, r3, #16
 8007920:	647b      	str	r3, [r7, #68]	@ 0x44
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6979      	ldr	r1, [r7, #20]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	613b      	str	r3, [r7, #16]
   return(result);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e6      	bne.n	800790c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007952:	bf00      	nop
 8007954:	3754      	adds	r7, #84	@ 0x54
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_UARTEx_DisableFifoMode+0x16>
 8007970:	2302      	movs	r3, #2
 8007972:	e027      	b.n	80079c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2224      	movs	r2, #36	@ 0x24
 8007980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0201 	bic.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e02d      	b.n	8007a44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	@ 0x24
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f84f 	bl	8007ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e02d      	b.n	8007ac0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	@ 0x24
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f811 	bl	8007ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d108      	bne.n	8007aea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ae8:	e031      	b.n	8007b4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aea:	2308      	movs	r3, #8
 8007aec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aee:	2308      	movs	r3, #8
 8007af0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	0e5b      	lsrs	r3, r3, #25
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	0f5b      	lsrs	r3, r3, #29
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	7b3a      	ldrb	r2, [r7, #12]
 8007b16:	4911      	ldr	r1, [pc, #68]	@ (8007b5c <UARTEx_SetNbDataToProcess+0x94>)
 8007b18:	5c8a      	ldrb	r2, [r1, r2]
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b1e:	7b3a      	ldrb	r2, [r7, #12]
 8007b20:	490f      	ldr	r1, [pc, #60]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x98>)
 8007b22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	7b7a      	ldrb	r2, [r7, #13]
 8007b34:	4909      	ldr	r1, [pc, #36]	@ (8007b5c <UARTEx_SetNbDataToProcess+0x94>)
 8007b36:	5c8a      	ldrb	r2, [r1, r2]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b3c:	7b7a      	ldrb	r2, [r7, #13]
 8007b3e:	4908      	ldr	r1, [pc, #32]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x98>)
 8007b40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	08008bf0 	.word	0x08008bf0
 8007b60:	08008bf8 	.word	0x08008bf8

08007b64 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b08b      	sub	sp, #44	@ 0x2c
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	fa93 f3a3 	rbit	r3, r3
 8007b7e:	613b      	str	r3, [r7, #16]
  return result;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007b8a:	2320      	movs	r3, #32
 8007b8c:	e003      	b.n	8007b96 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	fab3 f383 	clz	r3, r3
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	2103      	movs	r1, #3
 8007b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	401a      	ands	r2, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	fa93 f3a3 	rbit	r3, r3
 8007bac:	61fb      	str	r3, [r7, #28]
  return result;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007bb8:	2320      	movs	r3, #32
 8007bba:	e003      	b.n	8007bc4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	fab3 f383 	clz	r3, r3
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8007bd2:	bf00      	nop
 8007bd4:	372c      	adds	r7, #44	@ 0x2c
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	605a      	str	r2, [r3, #4]
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b08b      	sub	sp, #44	@ 0x2c
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	fa93 f3a3 	rbit	r3, r3
 8007c28:	613b      	str	r3, [r7, #16]
  return result;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007c34:	2320      	movs	r3, #32
 8007c36:	e003      	b.n	8007c40 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	fab3 f383 	clz	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	2103      	movs	r1, #3
 8007c44:	fa01 f303 	lsl.w	r3, r1, r3
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	fa93 f3a3 	rbit	r3, r3
 8007c56:	61fb      	str	r3, [r7, #28]
  return result;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007c62:	2320      	movs	r3, #32
 8007c64:	e003      	b.n	8007c6e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	fab3 f383 	clz	r3, r3
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	fa01 f303 	lsl.w	r3, r1, r3
 8007c76:	431a      	orrs	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8007c7c:	bf00      	nop
 8007c7e:	372c      	adds	r7, #44	@ 0x2c
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b08b      	sub	sp, #44	@ 0x2c
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	fa93 f3a3 	rbit	r3, r3
 8007ca2:	613b      	str	r3, [r7, #16]
  return result;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007cae:	2320      	movs	r3, #32
 8007cb0:	e003      	b.n	8007cba <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	fab3 f383 	clz	r3, r3
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	2103      	movs	r1, #3
 8007cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	401a      	ands	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	fa93 f3a3 	rbit	r3, r3
 8007cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007cdc:	2320      	movs	r3, #32
 8007cde:	e003      	b.n	8007ce8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	fab3 f383 	clz	r3, r3
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8007cf6:	bf00      	nop
 8007cf8:	372c      	adds	r7, #44	@ 0x2c
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b08b      	sub	sp, #44	@ 0x2c
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1a      	ldr	r2, [r3, #32]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	fa93 f3a3 	rbit	r3, r3
 8007d1c:	613b      	str	r3, [r7, #16]
  return result;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007d28:	2320      	movs	r3, #32
 8007d2a:	e003      	b.n	8007d34 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	fab3 f383 	clz	r3, r3
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	210f      	movs	r1, #15
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	401a      	ands	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	fa93 f3a3 	rbit	r3, r3
 8007d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007d56:	2320      	movs	r3, #32
 8007d58:	e003      	b.n	8007d62 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	fab3 f383 	clz	r3, r3
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8007d70:	bf00      	nop
 8007d72:	372c      	adds	r7, #44	@ 0x2c
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b08b      	sub	sp, #44	@ 0x2c
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	fa93 f3a3 	rbit	r3, r3
 8007d98:	613b      	str	r3, [r7, #16]
  return result;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007da4:	2320      	movs	r3, #32
 8007da6:	e003      	b.n	8007db0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	fab3 f383 	clz	r3, r3
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	210f      	movs	r1, #15
 8007db4:	fa01 f303 	lsl.w	r3, r1, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	401a      	ands	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	0a1b      	lsrs	r3, r3, #8
 8007dc0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	fa93 f3a3 	rbit	r3, r3
 8007dc8:	61fb      	str	r3, [r7, #28]
  return result;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	e003      	b.n	8007de0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	fab3 f383 	clz	r3, r3
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8007dee:	bf00      	nop
 8007df0:	372c      	adds	r7, #44	@ 0x2c
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b08a      	sub	sp, #40	@ 0x28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	fa93 f3a3 	rbit	r3, r3
 8007e10:	617b      	str	r3, [r7, #20]
  return result;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <LL_GPIO_Init+0x26>
    return 32U;
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	e003      	b.n	8007e28 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	fab3 f383 	clz	r3, r3
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007e2a:	e058      	b.n	8007ede <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	2101      	movs	r1, #1
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	4013      	ands	r3, r2
 8007e3a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d04a      	beq.n	8007ed8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d003      	beq.n	8007e52 <LL_GPIO_Init+0x58>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d10e      	bne.n	8007e70 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6a39      	ldr	r1, [r7, #32]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fed7 	bl	8007c0e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff feb7 	bl	8007bde <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6a39      	ldr	r1, [r7, #32]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff05 	bl	8007c88 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d121      	bne.n	8007eca <LL_GPIO_Init+0xd0>
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	fa93 f3a3 	rbit	r3, r3
 8007e90:	60bb      	str	r3, [r7, #8]
  return result;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <LL_GPIO_Init+0xa6>
    return 32U;
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	e003      	b.n	8007ea8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	fab3 f383 	clz	r3, r3
 8007ea6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d807      	bhi.n	8007ebc <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6a39      	ldr	r1, [r7, #32]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff24 	bl	8007d02 <LL_GPIO_SetAFPin_0_7>
 8007eba:	e006      	b.n	8007eca <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6a39      	ldr	r1, [r7, #32]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff59 	bl	8007d7c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6a39      	ldr	r1, [r7, #32]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fe46 	bl	8007b64 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d19f      	bne.n	8007e2c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3728      	adds	r7, #40	@ 0x28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	f107 001c 	add.w	r0, r7, #28
 8007f04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fd89 	bl	8008a2c <USB_CoreReset>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f32:	e005      	b.n	8007f40 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f4c:	b004      	add	sp, #16
 8007f4e:	4770      	bx	lr

08007f50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d165      	bne.n	8008030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4a41      	ldr	r2, [pc, #260]	@ (800806c <USB_SetTurnaroundTime+0x11c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d906      	bls.n	8007f7a <USB_SetTurnaroundTime+0x2a>
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4a40      	ldr	r2, [pc, #256]	@ (8008070 <USB_SetTurnaroundTime+0x120>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d202      	bcs.n	8007f7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f74:	230f      	movs	r3, #15
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e062      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8008070 <USB_SetTurnaroundTime+0x120>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d306      	bcc.n	8007f90 <USB_SetTurnaroundTime+0x40>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a3b      	ldr	r2, [pc, #236]	@ (8008074 <USB_SetTurnaroundTime+0x124>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d202      	bcs.n	8007f90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f8a:	230e      	movs	r3, #14
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e057      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4a38      	ldr	r2, [pc, #224]	@ (8008074 <USB_SetTurnaroundTime+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d306      	bcc.n	8007fa6 <USB_SetTurnaroundTime+0x56>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4a37      	ldr	r2, [pc, #220]	@ (8008078 <USB_SetTurnaroundTime+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d202      	bcs.n	8007fa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007fa0:	230d      	movs	r3, #13
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	e04c      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4a33      	ldr	r2, [pc, #204]	@ (8008078 <USB_SetTurnaroundTime+0x128>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d306      	bcc.n	8007fbc <USB_SetTurnaroundTime+0x6c>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	4a32      	ldr	r2, [pc, #200]	@ (800807c <USB_SetTurnaroundTime+0x12c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d802      	bhi.n	8007fbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	e041      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800807c <USB_SetTurnaroundTime+0x12c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d906      	bls.n	8007fd2 <USB_SetTurnaroundTime+0x82>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8008080 <USB_SetTurnaroundTime+0x130>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d802      	bhi.n	8007fd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007fcc:	230b      	movs	r3, #11
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e036      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8008080 <USB_SetTurnaroundTime+0x130>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d906      	bls.n	8007fe8 <USB_SetTurnaroundTime+0x98>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4a29      	ldr	r2, [pc, #164]	@ (8008084 <USB_SetTurnaroundTime+0x134>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d802      	bhi.n	8007fe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007fe2:	230a      	movs	r3, #10
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	e02b      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4a26      	ldr	r2, [pc, #152]	@ (8008084 <USB_SetTurnaroundTime+0x134>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d906      	bls.n	8007ffe <USB_SetTurnaroundTime+0xae>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4a25      	ldr	r2, [pc, #148]	@ (8008088 <USB_SetTurnaroundTime+0x138>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d202      	bcs.n	8007ffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ff8:	2309      	movs	r3, #9
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e020      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4a21      	ldr	r2, [pc, #132]	@ (8008088 <USB_SetTurnaroundTime+0x138>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d306      	bcc.n	8008014 <USB_SetTurnaroundTime+0xc4>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4a20      	ldr	r2, [pc, #128]	@ (800808c <USB_SetTurnaroundTime+0x13c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d802      	bhi.n	8008014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800800e:	2308      	movs	r3, #8
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e015      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <USB_SetTurnaroundTime+0x13c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d906      	bls.n	800802a <USB_SetTurnaroundTime+0xda>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <USB_SetTurnaroundTime+0x140>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d202      	bcs.n	800802a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008024:	2307      	movs	r3, #7
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e00a      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800802a:	2306      	movs	r3, #6
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e007      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008036:	2309      	movs	r3, #9
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	e001      	b.n	8008040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800803c:	2309      	movs	r3, #9
 800803e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	00d8acbf 	.word	0x00d8acbf
 8008070:	00e4e1c0 	.word	0x00e4e1c0
 8008074:	00f42400 	.word	0x00f42400
 8008078:	01067380 	.word	0x01067380
 800807c:	011a499f 	.word	0x011a499f
 8008080:	01312cff 	.word	0x01312cff
 8008084:	014ca43f 	.word	0x014ca43f
 8008088:	016e3600 	.word	0x016e3600
 800808c:	01a6ab1f 	.word	0x01a6ab1f
 8008090:	01e84800 	.word	0x01e84800

08008094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 0201 	bic.w	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d115      	bne.n	8008104 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080e4:	200a      	movs	r0, #10
 80080e6:	f7f8 ffc1 	bl	800106c <HAL_Delay>
      ms += 10U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	330a      	adds	r3, #10
 80080ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fc0b 	bl	800890c <USB_GetMode>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d01e      	beq.n	800813a <USB_SetCurrentMode+0x84>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8008100:	d9f0      	bls.n	80080e4 <USB_SetCurrentMode+0x2e>
 8008102:	e01a      	b.n	800813a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d115      	bne.n	8008136 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008116:	200a      	movs	r0, #10
 8008118:	f7f8 ffa8 	bl	800106c <HAL_Delay>
      ms += 10U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	330a      	adds	r3, #10
 8008120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fbf2 	bl	800890c <USB_GetMode>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <USB_SetCurrentMode+0x84>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2bc7      	cmp	r3, #199	@ 0xc7
 8008132:	d9f0      	bls.n	8008116 <USB_SetCurrentMode+0x60>
 8008134:	e001      	b.n	800813a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e005      	b.n	8008146 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2bc8      	cmp	r3, #200	@ 0xc8
 800813e:	d101      	bne.n	8008144 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008150:	b084      	sub	sp, #16
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800815e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e009      	b.n	8008184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3340      	adds	r3, #64	@ 0x40
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3301      	adds	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b0e      	cmp	r3, #14
 8008188:	d9f2      	bls.n	8008170 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800818a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11c      	bne.n	80081cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e005      	b.n	80081d8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081de:	461a      	mov	r2, r3
 80081e0:	2300      	movs	r3, #0
 80081e2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081e4:	2103      	movs	r1, #3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f95e 	bl	80084a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081ec:	2110      	movs	r1, #16
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8fa 	bl	80083e8 <USB_FlushTxFifo>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f924 	bl	800844c <USB_FlushRxFifo>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	461a      	mov	r2, r3
 8008216:	2300      	movs	r3, #0
 8008218:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008220:	461a      	mov	r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	461a      	mov	r2, r3
 800822e:	2300      	movs	r3, #0
 8008230:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	e043      	b.n	80082c0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800824a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800824e:	d118      	bne.n	8008282 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e013      	b.n	8008294 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	461a      	mov	r2, r3
 800827a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e008      	b.n	8008294 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828e:	461a      	mov	r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a0:	461a      	mov	r2, r3
 80082a2:	2300      	movs	r3, #0
 80082a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b2:	461a      	mov	r2, r3
 80082b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082c4:	461a      	mov	r2, r3
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d3b5      	bcc.n	8008238 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	e043      	b.n	800835a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082e8:	d118      	bne.n	800831c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082fc:	461a      	mov	r2, r3
 80082fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	e013      	b.n	800832e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008312:	461a      	mov	r2, r3
 8008314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e008      	b.n	800832e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008328:	461a      	mov	r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833a:	461a      	mov	r2, r3
 800833c:	2300      	movs	r3, #0
 800833e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008352:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3301      	adds	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800835e:	461a      	mov	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4293      	cmp	r3, r2
 8008364:	d3b5      	bcc.n	80082d2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008378:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008386:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f043 0210 	orr.w	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <USB_DevInit+0x294>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f043 0208 	orr.w	r2, r3, #8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d107      	bne.n	80083d4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083cc:	f043 0304 	orr.w	r3, r3, #4
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083e0:	b004      	add	sp, #16
 80083e2:	4770      	bx	lr
 80083e4:	803c3800 	.word	0x803c3800

080083e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008402:	d901      	bls.n	8008408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e01b      	b.n	8008440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	daf2      	bge.n	80083f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	019b      	lsls	r3, r3, #6
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3301      	adds	r3, #1
 8008424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800842c:	d901      	bls.n	8008432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e006      	b.n	8008440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b20      	cmp	r3, #32
 800843c:	d0f0      	beq.n	8008420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008464:	d901      	bls.n	800846a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e018      	b.n	800849c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	daf2      	bge.n	8008458 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2210      	movs	r2, #16
 800847a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008488:	d901      	bls.n	800848e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e006      	b.n	800849c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	2b10      	cmp	r3, #16
 8008498:	d0f0      	beq.n	800847c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084c8:	4313      	orrs	r3, r2
 80084ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 0306 	and.w	r3, r3, #6
 80084f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75fb      	strb	r3, [r7, #23]
 80084fe:	e00a      	b.n	8008516 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d002      	beq.n	800850c <USB_GetDevSpeed+0x32>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b06      	cmp	r3, #6
 800850a:	d102      	bne.n	8008512 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800850c:	2302      	movs	r3, #2
 800850e:	75fb      	strb	r3, [r7, #23]
 8008510:	e001      	b.n	8008516 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008512:	230f      	movs	r3, #15
 8008514:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d14a      	bne.n	80085d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800855a:	f040 8086 	bne.w	800866a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800857c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d902      	bls.n	80085bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ba:	e056      	b.n	800866a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d4:	d0e7      	beq.n	80085a6 <USB_EPStopXfer+0x82>
 80085d6:	e048      	b.n	800866a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f0:	d13b      	bne.n	800866a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008646:	4293      	cmp	r3, r2
 8008648:	d902      	bls.n	8008650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
          break;
 800864e:	e00c      	b.n	800866a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008668:	d0e7      	beq.n	800863a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008678:	b480      	push	{r7}
 800867a:	b089      	sub	sp, #36	@ 0x24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	460b      	mov	r3, r1
 8008688:	71fb      	strb	r3, [r7, #7]
 800868a:	4613      	mov	r3, r2
 800868c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	d123      	bne.n	80086e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800869e:	88bb      	ldrh	r3, [r7, #4]
 80086a0:	3303      	adds	r3, #3
 80086a2:	089b      	lsrs	r3, r3, #2
 80086a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e018      	b.n	80086de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	031a      	lsls	r2, r3, #12
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086b8:	461a      	mov	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3301      	adds	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	3301      	adds	r3, #1
 80086ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3301      	adds	r3, #1
 80086d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3301      	adds	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	3301      	adds	r3, #1
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d3e2      	bcc.n	80086ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3724      	adds	r7, #36	@ 0x24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b08b      	sub	sp, #44	@ 0x2c
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	089b      	lsrs	r3, r3, #2
 800870e:	b29b      	uxth	r3, r3
 8008710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800871a:	2300      	movs	r3, #0
 800871c:	623b      	str	r3, [r7, #32]
 800871e:	e014      	b.n	800874a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	601a      	str	r2, [r3, #0]
    pDest++;
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	3301      	adds	r3, #1
 8008730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	3301      	adds	r3, #1
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	3301      	adds	r3, #1
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	3301      	adds	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	3301      	adds	r3, #1
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	6a3a      	ldr	r2, [r7, #32]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	429a      	cmp	r2, r3
 8008750:	d3e6      	bcc.n	8008720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008752:	8bfb      	ldrh	r3, [r7, #30]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01e      	beq.n	8008796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008762:	461a      	mov	r2, r3
 8008764:	f107 0310 	add.w	r3, r7, #16
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	701a      	strb	r2, [r3, #0]
      i++;
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	3301      	adds	r3, #1
 8008782:	623b      	str	r3, [r7, #32]
      pDest++;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	3301      	adds	r3, #1
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800878a:	8bfb      	ldrh	r3, [r7, #30]
 800878c:	3b01      	subs	r3, #1
 800878e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008790:	8bfb      	ldrh	r3, [r7, #30]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1ea      	bne.n	800876c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008798:	4618      	mov	r0, r3
 800879a:	372c      	adds	r7, #44	@ 0x2c
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087d2:	f043 0302 	orr.w	r3, r3, #2
 80087d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4013      	ands	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087fe:	68fb      	ldr	r3, [r7, #12]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	0c1b      	lsrs	r3, r3, #16
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4013      	ands	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	b29b      	uxth	r3, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	4013      	ands	r3, r2
 80088a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088a2:	68bb      	ldr	r3, [r7, #8]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	01db      	lsls	r3, r3, #7
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4013      	ands	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088fe:	68bb      	ldr	r3, [r7, #8]
}
 8008900:	4618      	mov	r0, r3
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f003 0301 	and.w	r3, r3, #1
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008942:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008946:	f023 0307 	bic.w	r3, r3, #7
 800894a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800895a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800895e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	460b      	mov	r3, r1
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	333c      	adds	r3, #60	@ 0x3c
 8008986:	3304      	adds	r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	4a26      	ldr	r2, [pc, #152]	@ (8008a28 <USB_EP0_OutStart+0xb8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d90a      	bls.n	80089aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089a4:	d101      	bne.n	80089aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e037      	b.n	8008a1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b0:	461a      	mov	r2, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d8:	f043 0318 	orr.w	r3, r3, #24
 80089dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80089f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d10f      	bne.n	8008a18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a12:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008a16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	4f54300a 	.word	0x4f54300a

08008a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a44:	d901      	bls.n	8008a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e01b      	b.n	8008a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	daf2      	bge.n	8008a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f043 0201 	orr.w	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a6e:	d901      	bls.n	8008a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d0f0      	beq.n	8008a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <memset>:
 8008a8e:	4402      	add	r2, r0
 8008a90:	4603      	mov	r3, r0
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d100      	bne.n	8008a98 <memset+0xa>
 8008a96:	4770      	bx	lr
 8008a98:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9c:	e7f9      	b.n	8008a92 <memset+0x4>
	...

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ad8 <__libc_init_array+0x38>)
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	4c0d      	ldr	r4, [pc, #52]	@ (8008adc <__libc_init_array+0x3c>)
 8008aa8:	1b64      	subs	r4, r4, r5
 8008aaa:	10a4      	asrs	r4, r4, #2
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ae0 <__libc_init_array+0x40>)
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8008ae4 <__libc_init_array+0x44>)
 8008ab6:	f000 f817 	bl	8008ae8 <_init>
 8008aba:	1b64      	subs	r4, r4, r5
 8008abc:	10a4      	asrs	r4, r4, #2
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	3601      	adds	r6, #1
 8008aca:	4798      	blx	r3
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	4798      	blx	r3
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	08008c08 	.word	0x08008c08
 8008adc:	08008c08 	.word	0x08008c08
 8008ae0:	08008c08 	.word	0x08008c08
 8008ae4:	08008c0c 	.word	0x08008c0c

08008ae8 <_init>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr

08008af4 <_fini>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	bf00      	nop
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr
