
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c58  08008c58  00009c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c5c  08008c5c  00009c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08008c60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000624  2000000c  08008c69  0000a00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000630  08008c69  0000a630  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017708  00000000  00000000  0000a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d01  00000000  00000000  00021747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001250  00000000  00000000  00024448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e13  00000000  00000000  00025698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036315  00000000  00000000  000264ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000170f7  00000000  00000000  0005c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159cee  00000000  00000000  000738b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cd5a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e24  00000000  00000000  001cd5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001d240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008b38 	.word	0x08008b38

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08008b38 	.word	0x08008b38

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc7c 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f826 	bl	8000658 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800060c:	f000 f888 	bl	8000720 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9a0 	bl	8000954 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000614:	f000 f892 	bl	800073c <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000618:	f000 f8d4 	bl	80007c4 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800061c:	f000 f8e6 	bl	80007ec <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f91a 	bl	8000858 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f964 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Continuously reads the status of the USER_BUTTON
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) { // If USER_BUTTON is pressed
 8000628:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <main+0x50>)
 800062e:	f001 fc85 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <main+0x44>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	4805      	ldr	r0, [pc, #20]	@ (8000654 <main+0x54>)
 800063e:	f001 fc95 	bl	8001f6c <HAL_GPIO_WritePin>
 8000642:	e7f1      	b.n	8000628 <main+0x28>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <main+0x54>)
 800064a:	f001 fc8f 	bl	8001f6c <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) { // If USER_BUTTON is pressed
 800064e:	e7eb      	b.n	8000628 <main+0x28>
 8000650:	42020800 	.word	0x42020800
 8000654:	42020400 	.word	0x42020400

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09e      	sub	sp, #120	@ 0x78
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2260      	movs	r2, #96	@ 0x60
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 fa39 	bl	8008ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000680:	f002 fd34 	bl	80030ec <HAL_PWREx_ControlVoltageScaling>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800068a:	f000 fa19 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800068e:	2332      	movs	r3, #50	@ 0x32
 8000690:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006c0:	2350      	movs	r3, #80	@ 0x50
 80006c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fe11 	bl	8003304 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f9ea 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	231f      	movs	r3, #31
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fcd7 	bl	80040bc <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000714:	f000 f9d4 	bl	8000ac0 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3778      	adds	r7, #120	@ 0x78
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000724:	f002 fdce 	bl	80032c4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000728:	2002      	movs	r0, #2
 800072a:	f002 fd6b 	bl	8003204 <HAL_PWREx_ConfigSupply>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000734:	f000 f9c4 	bl	8000ac0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <MX_ADC1_Init+0x84>)
 8000744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_ADC1_Init+0x80>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_ADC1_Init+0x80>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000760:	2204      	movs	r2, #4
 8000762:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ADC1_Init+0x80>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000774:	2201      	movs	r2, #1
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_ADC1_Init+0x80>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_ADC1_Init+0x80>)
 800078a:	2200      	movs	r2, #0
 800078c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_ADC1_Init+0x80>)
 8000796:	2200      	movs	r2, #0
 8000798:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_ADC1_Init+0x80>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_ADC1_Init+0x80>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_ADC1_Init+0x80>)
 80007aa:	f000 fd91 	bl	80012d0 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f984 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000028 	.word	0x20000028
 80007c0:	42028000 	.word	0x42028000

080007c4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 fbe7 	bl	8001f9c <HAL_ICACHE_ConfigAssociativityMode>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007d4:	f000 f974 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007d8:	f001 fc00 	bl	8001fdc <HAL_ICACHE_Enable>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007e2:	f000 f96d 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000802:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000806:	f7ff fedf 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff fec0 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff febd 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_UCPD1_Init+0x64>)
 800082a:	f007 fb0e 	bl	8007e4a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800082e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000832:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000834:	2303      	movs	r3, #3
 8000836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_UCPD1_Init+0x68>)
 8000842:	f007 fb02 	bl	8007e4a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	42020400 	.word	0x42020400
 8000854:	42020000 	.word	0x42020000

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <MX_USART1_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 80008a2:	f006 fc73 	bl	800718c <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f908 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 80008b4:	f007 f8b4 	bl	8007a20 <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f8ff 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 80008c6:	f007 f8e9 	bl	8007a9c <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f8f6 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_USART1_UART_Init+0x90>)
 80008d6:	f007 f86a 	bl	80079ae <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f8ee 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000b4 	.word	0x200000b4
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fc:	2206      	movs	r2, #6
 80008fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000902:	2202      	movs	r2, #2
 8000904:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000908:	2202      	movs	r2, #2
 800090a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	f001 fb60 	bl	8001ffc <HAL_PCD_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f8bd 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000148 	.word	0x20000148
 8000950:	42040000 	.word	0x42040000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b50      	ldr	r3, [pc, #320]	@ (8000aac <MX_GPIO_Init+0x158>)
 800096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000970:	4a4e      	ldr	r2, [pc, #312]	@ (8000aac <MX_GPIO_Init+0x158>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097a:	4b4c      	ldr	r3, [pc, #304]	@ (8000aac <MX_GPIO_Init+0x158>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b48      	ldr	r3, [pc, #288]	@ (8000aac <MX_GPIO_Init+0x158>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	4a47      	ldr	r2, [pc, #284]	@ (8000aac <MX_GPIO_Init+0x158>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000998:	4b44      	ldr	r3, [pc, #272]	@ (8000aac <MX_GPIO_Init+0x158>)
 800099a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ac:	4a3f      	ldr	r2, [pc, #252]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b6:	4b3d      	ldr	r3, [pc, #244]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b39      	ldr	r3, [pc, #228]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4a38      	ldr	r2, [pc, #224]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d4:	4b35      	ldr	r3, [pc, #212]	@ (8000aac <MX_GPIO_Init+0x158>)
 80009d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	4832      	ldr	r0, [pc, #200]	@ (8000ab0 <MX_GPIO_Init+0x15c>)
 80009e8:	f001 fac0 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	4830      	ldr	r0, [pc, #192]	@ (8000ab4 <MX_GPIO_Init+0x160>)
 80009f2:	f001 fabb 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	21a0      	movs	r1, #160	@ 0xa0
 80009fa:	482f      	ldr	r0, [pc, #188]	@ (8000ab8 <MX_GPIO_Init+0x164>)
 80009fc:	f001 fab6 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <MX_GPIO_Init+0x168>)
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4827      	ldr	r0, [pc, #156]	@ (8000ab4 <MX_GPIO_Init+0x160>)
 8000a16:	f001 f8b9 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4822      	ldr	r0, [pc, #136]	@ (8000ab8 <MX_GPIO_Init+0x164>)
 8000a30:	f001 f8ac 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a34:	2304      	movs	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4819      	ldr	r0, [pc, #100]	@ (8000ab0 <MX_GPIO_Init+0x15c>)
 8000a4c:	f001 f89e 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <MX_GPIO_Init+0x160>)
 8000a68:	f001 f890 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <MX_GPIO_Init+0x164>)
 8000a84:	f001 f882 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <MX_GPIO_Init+0x164>)
 8000aa0:	f001 f874 	bl	8001b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	46020c00 	.word	0x46020c00
 8000ab0:	42021800 	.word	0x42021800
 8000ab4:	42020800 	.word	0x42020800
 8000ab8:	42020400 	.word	0x42020400
 8000abc:	10210000 	.word	0x10210000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000af0:	f002 fbf8 	bl	80032e4 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f000 ff62 	bl	80019be <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	46020c00 	.word	0x46020c00

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	22c0      	movs	r2, #192	@ 0xc0
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f007 ffd8 	bl	8008ade <memset>
  if(hadc->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a24      	ldr	r2, [pc, #144]	@ (8000bc4 <HAL_ADC_MspInit+0xbc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d140      	bne.n	8000bba <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000b44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fe83 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000b5c:	f7ff ffb0 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b66:	4a18      	ldr	r2, [pc, #96]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b84:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000bb6:	f000 ffe9 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	37e8      	adds	r7, #232	@ 0xe8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	42028000 	.word	0x42028000
 8000bc8:	46020c00 	.word	0x46020c00
 8000bcc:	42020800 	.word	0x42020800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	22c0      	movs	r2, #192	@ 0xc0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 ff74 	bl	8008ade <memset>
  if(huart->Instance==USART1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <HAL_UART_MspInit+0xc4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d145      	bne.n	8000c8c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c00:	f04f 0201 	mov.w	r2, #1
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fe21 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000c20:	f7ff ff4e 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c30:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c48:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_UART_MspInit+0xc8>)
 8000c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <HAL_UART_MspInit+0xcc>)
 8000c88:	f000 ff80 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	37e8      	adds	r7, #232	@ 0xe8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	46020c00 	.word	0x46020c00
 8000c9c:	42020000 	.word	0x42020000

08000ca0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0bc      	sub	sp, #240	@ 0xf0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	22c0      	movs	r2, #192	@ 0xc0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 ff0c 	bl	8008ade <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a3c      	ldr	r2, [pc, #240]	@ (8000dbc <HAL_PCD_MspInit+0x11c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d171      	bne.n	8000db4 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fdb8 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000cf2:	f7ff fee5 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfc:	4a30      	ldr	r2, [pc, #192]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d06:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000d14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d2e:	230a      	movs	r3, #10
 8000d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4822      	ldr	r0, [pc, #136]	@ (8000dc4 <HAL_PCD_MspInit+0x124>)
 8000d3c:	f000 ff26 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d46:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5e:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d119      	bne.n	8000da0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d72:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000d8a:	f002 fa8b 	bl	80032a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d94:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_PCD_MspInit+0x120>)
 8000d96:	f023 0304 	bic.w	r3, r3, #4
 8000d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d9e:	e001      	b.n	8000da4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000da0:	f002 fa80 	bl	80032a4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2049      	movs	r0, #73	@ 0x49
 8000daa:	f000 fe13 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000dae:	2049      	movs	r0, #73	@ 0x49
 8000db0:	f000 fe2a 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	37f0      	adds	r7, #240	@ 0xf0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	42040000 	.word	0x42040000
 8000dc0:	46020c00 	.word	0x46020c00
 8000dc4:	42020000 	.word	0x42020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f915 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <OTG_FS_IRQHandler+0x10>)
 8000e2e:	f001 f9fd 	bl	800222c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000148 	.word	0x20000148

08000e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <SystemInit+0x68>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <SystemInit+0x68>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <SystemInit+0x6c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <SystemInit+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <SystemInit+0x6c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <SystemInit+0x6c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <SystemInit+0x6c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <SystemInit+0x6c>)
 8000e6e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e72:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e76:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <SystemInit+0x6c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <SystemInit+0x6c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <SystemInit+0x6c>)
 8000e84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <SystemInit+0x6c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SystemInit+0x68>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	46020c00 	.word	0x46020c00

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f7ff ffc4 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eb6:	e003      	b.n	8000ec0 <LoopCopyDataInit>

08000eb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ebc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ebe:	3104      	adds	r1, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ec0:	480a      	ldr	r0, [pc, #40]	@ (8000eec <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ec4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ec6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec8:	d3f6      	bcc.n	8000eb8 <CopyDataInit>
	ldr	r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ecc:	e002      	b.n	8000ed4 <LoopFillZerobss>

08000ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ece:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ed0:	f842 3b04 	str.w	r3, [r2], #4

08000ed4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ed6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed8:	d3f9      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f007 fe09 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff fb8f 	bl	8000600 <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000ee4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000ee8:	08008c60 	.word	0x08008c60
	ldr	r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ef0:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000ef4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ef8:	20000630 	.word	0x20000630

08000efc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_Init+0x50>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a11      	ldr	r2, [pc, #68]	@ (8000f50 <HAL_Init+0x50>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd54 	bl	80019be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f16:	f003 fac3 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_Init+0x54>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <HAL_Init+0x58>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <HAL_Init+0x5c>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f30:	2004      	movs	r0, #4
 8000f32:	f000 fd99 	bl	8001a68 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f812 	bl	8000f60 <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e002      	b.n	8000f4c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fdc1 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40022000 	.word	0x40022000
 8000f54:	46020c00 	.word	0x46020c00
 8000f58:	08008b50 	.word	0x08008b50
 8000f5c:	20000000 	.word	0x20000000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f6c:	4b33      	ldr	r3, [pc, #204]	@ (800103c <HAL_InitTick+0xdc>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e05c      	b.n	8001032 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <HAL_InitTick+0xe0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d10c      	bne.n	8000f9e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f84:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <HAL_InitTick+0xe4>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <HAL_InitTick+0xdc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e037      	b.n	800100e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f9e:	f000 fdbb 	bl	8001b18 <HAL_SYSTICK_GetCLKSourceConfig>
 8000fa2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d023      	beq.n	8000ff2 <HAL_InitTick+0x92>
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d82d      	bhi.n	800100c <HAL_InitTick+0xac>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_InitTick+0x5e>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d00d      	beq.n	8000fd8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000fbc:	e026      	b.n	800100c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <HAL_InitTick+0xe4>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_InitTick+0xdc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
        break;
 8000fd6:	e01a      	b.n	800100e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_InitTick+0xdc>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	60fb      	str	r3, [r7, #12]
        break;
 8000ff0:	e00d      	b.n	800100e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0xdc>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001000:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	60fb      	str	r3, [r7, #12]
        break;
 800100a:	e000      	b.n	800100e <HAL_InitTick+0xae>
        break;
 800100c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f000 fd08 	bl	8001a24 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e009      	b.n	8001032 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101e:	2200      	movs	r2, #0
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	f04f 30ff 	mov.w	r0, #4294967295
 8001026:	f000 fcd5 	bl	80019d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800102a:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_InitTick+0xe8>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	e000e010 	.word	0xe000e010
 8001044:	20000000 	.word	0x20000000
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	2000062c 	.word	0x2000062c

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000062c 	.word	0x2000062c

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LL_ADC_SetResolution+0x3c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d104      	bne.n	800111c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3b01      	subs	r3, #1
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f023 020c 	bic.w	r2, r3, #12
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60da      	str	r2, [r3, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	46021000 	.word	0x46021000

0800113c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800114a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800114e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800115e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	2a00      	cmp	r2, #0
 8001166:	d002      	beq.n	800116e <LL_ADC_SetGainCompensation+0x32>
 8001168:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800116c:	e000      	b.n	8001170 <LL_ADC_SetGainCompensation+0x34>
 800116e:	2200      	movs	r2, #0
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2107      	movs	r1, #7
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	401a      	ands	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6093      	str	r3, [r2, #8]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011f8:	d101      	bne.n	80011fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001220:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001248:	d101      	bne.n	800124e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <LL_ADC_IsEnabled+0x18>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <LL_ADC_IsEnabled+0x1a>
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b04      	cmp	r3, #4
 8001294:	d101      	bne.n	800129a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e2b3      	b.n	8001858 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a8b      	ldr	r2, [pc, #556]	@ (800152c <HAL_ADC_Init+0x25c>)
 80012fe:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fbfd 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff45 	bl	80011c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff7a 	bl	8001234 <LL_ADC_IsInternalRegulatorEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff5e 	bl	800120c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001350:	4b77      	ldr	r3, [pc, #476]	@ (8001530 <HAL_ADC_Init+0x260>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_ADC_Init+0x264>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	3301      	adds	r3, #1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001364:	e002      	b.n	800136c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3b01      	subs	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff5c 	bl	8001234 <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10e      	bne.n	80013a0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff6c 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 80013aa:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 8244 	bne.w	8001842 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 8240 	bne.w	8001842 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80013c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013ca:	f043 0202 	orr.w	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff40 	bl	800125c <LL_ADC_IsEnabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d140      	bne.n	8001464 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a51      	ldr	r2, [pc, #324]	@ (800152c <HAL_ADC_Init+0x25c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d028      	beq.n	800143e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a51      	ldr	r2, [pc, #324]	@ (8001538 <HAL_ADC_Init+0x268>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d109      	bne.n	800140a <HAL_ADC_Init+0x13a>
 80013f6:	4850      	ldr	r0, [pc, #320]	@ (8001538 <HAL_ADC_Init+0x268>)
 80013f8:	f7ff ff30 	bl	800125c <LL_ADC_IsEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	e008      	b.n	800141c <HAL_ADC_Init+0x14c>
 800140a:	4848      	ldr	r0, [pc, #288]	@ (800152c <HAL_ADC_Init+0x25c>)
 800140c:	f7ff ff26 	bl	800125c <LL_ADC_IsEnabled>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a44      	ldr	r2, [pc, #272]	@ (8001538 <HAL_ADC_Init+0x268>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_ADC_Init+0x15e>
 800142a:	4a44      	ldr	r2, [pc, #272]	@ (800153c <HAL_ADC_Init+0x26c>)
 800142c:	e000      	b.n	8001430 <HAL_ADC_Init+0x160>
 800142e:	4a44      	ldr	r2, [pc, #272]	@ (8001540 <HAL_ADC_Init+0x270>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff fe4c 	bl	80010d4 <LL_ADC_SetCommonClock>
 800143c:	e012      	b.n	8001464 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fe57 	bl	80010fc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <HAL_ADC_Init+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800145e:	4938      	ldr	r1, [pc, #224]	@ (8001540 <HAL_ADC_Init+0x270>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a30      	ldr	r2, [pc, #192]	@ (800152c <HAL_ADC_Init+0x25c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d010      	beq.n	8001490 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001474:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800147a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001480:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001488:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800148a:	4313      	orrs	r3, r2
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	e030      	b.n	80014f2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7f1b      	ldrb	r3, [r3, #28]
 8001494:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800149c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800149e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d002      	beq.n	80014ae <HAL_ADC_Init+0x1de>
 80014a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ac:	e000      	b.n	80014b0 <HAL_ADC_Init+0x1e0>
 80014ae:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014b0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80014b6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da04      	bge.n	80014ca <HAL_ADC_Init+0x1fa>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014c8:	e001      	b.n	80014ce <HAL_ADC_Init+0x1fe>
 80014ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80014ce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4918      	ldr	r1, [pc, #96]	@ (8001538 <HAL_ADC_Init+0x268>)
 80014d6:	428b      	cmp	r3, r1
 80014d8:	d103      	bne.n	80014e2 <HAL_ADC_Init+0x212>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014e0:	e003      	b.n	80014ea <HAL_ADC_Init+0x21a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014e8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80014ea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12f      	bne.n	800155c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_ADC_Init+0x25c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	3b01      	subs	r3, #1
 800150c:	045b      	lsls	r3, r3, #17
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	4313      	orrs	r3, r2
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	e022      	b.n	800155c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	e018      	b.n	800155c <HAL_ADC_Init+0x28c>
 800152a:	bf00      	nop
 800152c:	46021000 	.word	0x46021000
 8001530:	20000000 	.word	0x20000000
 8001534:	053e2d63 	.word	0x053e2d63
 8001538:	42028000 	.word	0x42028000
 800153c:	42028308 	.word	0x42028308
 8001540:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a92      	ldr	r2, [pc, #584]	@ (80017ac <HAL_ADC_Init+0x4dc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d018      	beq.n	8001598 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001572:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800157a:	4313      	orrs	r3, r2
 800157c:	6a3a      	ldr	r2, [r7, #32]
 800157e:	4313      	orrs	r3, r2
 8001580:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4b89      	ldr	r3, [pc, #548]	@ (80017b0 <HAL_ADC_Init+0x4e0>)
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	430b      	orrs	r3, r1
 8001594:	60d3      	str	r3, [r2, #12]
 8001596:	e031      	b.n	80015fc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ac:	4313      	orrs	r3, r2
 80015ae:	6a3a      	ldr	r2, [r7, #32]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b7e      	ldr	r3, [pc, #504]	@ (80017b4 <HAL_ADC_Init+0x4e4>)
 80015bc:	4013      	ands	r3, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	6a39      	ldr	r1, [r7, #32]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <HAL_ADC_Init+0x4dc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	f000 8093 	beq.w	800172e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe38 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001612:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe45 	bl	80012a8 <LL_ADC_INJ_IsConversionOngoing>
 800161e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d161      	bne.n	80016ea <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d15e      	bne.n	80016ea <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7f1b      	ldrb	r3, [r3, #28]
 8001630:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4960      	ldr	r1, [pc, #384]	@ (80017b8 <HAL_ADC_Init+0x4e8>)
 8001638:	428b      	cmp	r3, r1
 800163a:	d102      	bne.n	8001642 <HAL_ADC_Init+0x372>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001640:	e002      	b.n	8001648 <HAL_ADC_Init+0x378>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001646:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001648:	4313      	orrs	r3, r2
 800164a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	6a39      	ldr	r1, [r7, #32]
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f7ff fd60 	bl	800113c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001682:	2b01      	cmp	r3, #1
 8001684:	d11e      	bne.n	80016c4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	4b4a      	ldr	r3, [pc, #296]	@ (80017bc <HAL_ADC_Init+0x4ec>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800169a:	0411      	lsls	r1, r2, #16
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80016b2:	0892      	lsrs	r2, r2, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f023 010f 	bic.w	r1, r3, #15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
 800170a:	e007      	b.n	800171c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 020f 	bic.w	r2, r2, #15
 800171a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800172c:	e092      	b.n	8001854 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001734:	2b01      	cmp	r3, #1
 8001736:	d111      	bne.n	800175c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001740:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001746:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800174c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4313      	orrs	r3, r2
 8001752:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_ADC_Init+0x4f0>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	430b      	orrs	r3, r1
 800176e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001778:	461a      	mov	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	f7ff fd01 	bl	8001182 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001788:	461a      	mov	r2, r3
 800178a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800178e:	f7ff fcf8 	bl	8001182 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d114      	bne.n	80017c4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f062 020f 	orn	r2, r2, #15
 80017a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80017aa:	e024      	b.n	80017f6 <HAL_ADC_Init+0x526>
 80017ac:	46021000 	.word	0x46021000
 80017b0:	fff0c013 	.word	0xfff0c013
 80017b4:	ffde800d 	.word	0xffde800d
 80017b8:	42028000 	.word	0x42028000
 80017bc:	fc00f81e 	.word	0xfc00f81e
 80017c0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017cc:	d113      	bne.n	80017f6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	f06f 020f 	mvn.w	r2, #15
 80017e4:	fa02 f103 	lsl.w	r1, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_ADC_Init+0x590>)
 80017fe:	4013      	ands	r3, r2
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	429a      	cmp	r2, r3
 8001804:	d10b      	bne.n	800181e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001810:	f023 0303 	bic.w	r3, r3, #3
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800181c:	e01a      	b.n	8001854 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001822:	f023 0312 	bic.w	r3, r3, #18
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001840:	e008      	b.n	8001854 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001858:	4618      	mov	r0, r3
 800185a:	3728      	adds	r7, #40	@ 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	833ffff3 	.word	0x833ffff3

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	@ (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	@ (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	@ 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff4c 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e2:	f7ff ff63 	bl	80018ac <__NVIC_GetPriorityGrouping>
 80019e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	6978      	ldr	r0, [r7, #20]
 80019ee:	f7ff ffb3 	bl	8001958 <NVIC_EncodePriority>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff82 	bl	8001904 <__NVIC_SetPriority>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff56 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00d      	b.n	8001a56 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a4e:	f043 0303 	orr.w	r3, r3, #3
 8001a52:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d844      	bhi.n	8001b00 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a9f 	.word	0x08001a9f
 8001a80:	08001abd 	.word	0x08001abd
 8001a84:	08001adf 	.word	0x08001adf
 8001a88:	08001b01 	.word	0x08001b01
 8001a8c:	08001a91 	.word	0x08001a91
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6013      	str	r3, [r2, #0]
      break;
 8001a9c:	e031      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab0:	4a18      	ldr	r2, [pc, #96]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ab2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001aba:	e022      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ace:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001adc:	e011      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001afe:	e000      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b00:	bf00      	nop
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010
 8001b14:	46020c00 	.word	0x46020c00

08001b18 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e021      	b.n	8001b74 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001b3a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b42:	d011      	beq.n	8001b68 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b4a:	d810      	bhi.n	8001b6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b58:	d003      	beq.n	8001b62 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001b5a:	e008      	b.n	8001b6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
        break;
 8001b60:	e008      	b.n	8001b74 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
        break;
 8001b66:	e005      	b.n	8001b74 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	607b      	str	r3, [r7, #4]
        break;
 8001b6c:	e002      	b.n	8001b74 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
        break;
 8001b72:	bf00      	nop
    }
  }
  return systick_source;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010
 8001b88:	46020c00 	.word	0x46020c00

08001b8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b9e:	e1ba      	b.n	8001f16 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 81aa 	beq.w	8001f10 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a55      	ldr	r2, [pc, #340]	@ (8001d14 <HAL_GPIO_Init+0x188>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d15d      	bne.n	8001c80 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_GPIO_Init+0x18c>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bfc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001bfe:	4a46      	ldr	r2, [pc, #280]	@ (8001d18 <HAL_GPIO_Init+0x18c>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220b      	movs	r2, #11
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69f9      	ldr	r1, [r7, #28]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e067      	b.n	8001d50 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x104>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d145      	bne.n	8001d1c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e01e      	b.n	8001d50 <HAL_GPIO_Init+0x1c4>
 8001d12:	bf00      	nop
 8001d14:	46020000 	.word	0x46020000
 8001d18:	08008ba8 	.word	0x08008ba8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d00b      	beq.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d64:	2b11      	cmp	r3, #17
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b12      	cmp	r3, #18
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001da6:	2201      	movs	r2, #1
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d017      	beq.n	8001e0a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d07c      	beq.n	8001f10 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e16:	4a47      	ldr	r2, [pc, #284]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0a9a      	lsrs	r2, r3, #10
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_GPIO_Init+0x3ac>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	00d2      	lsls	r2, r2, #3
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e52:	4938      	ldr	r1, [pc, #224]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3318      	adds	r3, #24
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001e84:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001eda:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ee8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_GPIO_Init+0x3a8>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f ae3d 	bne.w	8001ba0 <HAL_GPIO_Init+0x14>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	@ 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	46022000 	.word	0x46022000
 8001f38:	002f7f7f 	.word	0x002f7f7f

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e007      	b.n	8001fca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0204 	bic.w	r2, r3, #4
 8001fc2:	4905      	ldr	r1, [pc, #20]	@ (8001fd8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40030400 	.word	0x40030400

08001fdc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_ICACHE_Enable+0x1c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_ICACHE_Enable+0x1c>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40030400 	.word	0x40030400

08001ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e108      	b.n	8002220 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe fe39 	bl	8000ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a7b      	ldr	r2, [pc, #492]	@ (8002228 <HAL_PCD_Init+0x22c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d102      	bne.n	8002044 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f006 f84b 	bl	80080e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7c1a      	ldrb	r2, [r3, #16]
 8002056:	f88d 2000 	strb.w	r2, [sp]
 800205a:	3304      	adds	r3, #4
 800205c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205e:	f005 ff72 	bl	8007f46 <USB_CoreInit>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d5      	b.n	8002220 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f006 f843 	bl	8008106 <USB_SetCurrentMode>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0c6      	b.n	8002220 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	e04a      	b.n	800212e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3315      	adds	r3, #21
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3314      	adds	r3, #20
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	b298      	uxth	r0, r3
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	332e      	adds	r3, #46	@ 0x2e
 80020d4:	4602      	mov	r2, r0
 80020d6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3318      	adds	r3, #24
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	331c      	adds	r3, #28
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3320      	adds	r3, #32
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3324      	adds	r3, #36	@ 0x24
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	3301      	adds	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3af      	bcc.n	8002098 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e044      	b.n	80021c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	791b      	ldrb	r3, [r3, #4]
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3b5      	bcc.n	800213e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7c1a      	ldrb	r2, [r3, #16]
 80021da:	f88d 2000 	strb.w	r2, [sp]
 80021de:	3304      	adds	r3, #4
 80021e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e2:	f005 ffdd 	bl	80081a0 <USB_DevInit>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e013      	b.n	8002220 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7b1b      	ldrb	r3, [r3, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 ff3c 	bl	800308c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f006 faeb 	bl	80087f4 <USB_DevDisconnect>

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	42040000 	.word	0x42040000

0800222c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08d      	sub	sp, #52	@ 0x34
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f006 fb8a 	bl	800895c <USB_GetMode>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 84b9 	bne.w	8002bc2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f006 faee 	bl	8008836 <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 84af 	beq.w	8002bc0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f006 fadb 	bl	8008836 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 0202 	and.w	r2, r2, #2
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 fac9 	bl	8008836 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d161      	bne.n	8002372 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0210 	bic.w	r2, r2, #16
 80022bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 020f 	and.w	r2, r3, #15
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	0c5b      	lsrs	r3, r3, #17
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d124      	bne.n	8002334 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d035      	beq.n	8002362 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6a38      	ldr	r0, [r7, #32]
 800230a:	f006 fa1b 	bl	8008744 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231a:	441a      	add	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232c:	441a      	add	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	e016      	b.n	8002362 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	0c5b      	lsrs	r3, r3, #17
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	2b06      	cmp	r3, #6
 800233e:	d110      	bne.n	8002362 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002346:	2208      	movs	r2, #8
 8002348:	4619      	mov	r1, r3
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f006 f9fa 	bl	8008744 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0210 	orr.w	r2, r2, #16
 8002370:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f006 fa5d 	bl	8008836 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002382:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002386:	f040 80a7 	bne.w	80024d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f006 fa62 	bl	800885c <USB_ReadDevAllOutEpInterrupt>
 8002398:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800239a:	e099      	b.n	80024d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 808e 	beq.w	80024c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f006 fa86 	bl	80088c4 <USB_ReadDevOutEPInterrupt>
 80023b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fd29 	bl	8002e30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2308      	movs	r3, #8
 80023f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fdff 	bl	8003000 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	2310      	movs	r3, #16
 800241c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d030      	beq.n	800248a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002430:	2b80      	cmp	r3, #128	@ 0x80
 8002432:	d109      	bne.n	8002448 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002446:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	78db      	ldrb	r3, [r3, #3]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fbf2 	bl	8002c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	2302      	movs	r3, #2
 8002488:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	2320      	movs	r3, #32
 80024a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	3301      	adds	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f af62 	bne.w	800239c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f006 f9aa 	bl	8008836 <USB_ReadInterrupts>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024ec:	f040 80db 	bne.w	80026a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f006 f9cb 	bl	8008890 <USB_ReadDevAllInEpInterrupt>
 80024fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002500:	e0cd      	b.n	800269e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80c2 	beq.w	8002692 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f006 f9f1 	bl	8008900 <USB_ReadDevInEPInterrupt>
 800251e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d057      	beq.n	80025da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800253e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	69f9      	ldr	r1, [r7, #28]
 8002546:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800254a:	4013      	ands	r3, r2
 800254c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800255a:	461a      	mov	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	799b      	ldrb	r3, [r3, #6]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d132      	bne.n	80025ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3320      	adds	r3, #32
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4403      	add	r3, r0
 8002588:	331c      	adds	r3, #28
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4419      	add	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	3320      	adds	r3, #32
 800259e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <HAL_PCD_IRQHandler+0x3a2>
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3324      	adds	r3, #36	@ 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d108      	bne.n	80025ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025c6:	461a      	mov	r2, r3
 80025c8:	2101      	movs	r1, #1
 80025ca:	f006 f9f9 	bl	80089c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb03 	bl	8002be0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025f0:	461a      	mov	r2, r3
 80025f2:	2308      	movs	r3, #8
 80025f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800260c:	461a      	mov	r2, r3
 800260e:	2310      	movs	r3, #16
 8002610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002628:	461a      	mov	r2, r3
 800262a:	2340      	movs	r3, #64	@ 0x40
 800262c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d023      	beq.n	8002680 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800263a:	6a38      	ldr	r0, [r7, #32]
 800263c:	f005 fefc 	bl	8008438 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3310      	adds	r3, #16
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	78db      	ldrb	r3, [r3, #3]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2200      	movs	r2, #0
 8002660:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb03 	bl	8002c74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267a:	461a      	mov	r2, r3
 800267c:	2302      	movs	r3, #2
 800267e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800268a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fb42 	bl	8002d16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f af2e 	bne.w	8002502 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f006 f8c3 	bl	8008836 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026ba:	d122      	bne.n	8002702 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026e2:	2100      	movs	r1, #0
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fcf5 	bl	80030d4 <HAL_PCDEx_LPM_Callback>
 80026ea:	e002      	b.n	80026f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 faab 	bl	8002c48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f006 f895 	bl	8008836 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002716:	d112      	bne.n	800273e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fa83 	bl	8002c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f006 f877 	bl	8008836 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800274e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002752:	d121      	bne.n	8002798 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002762:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800276a:	2b00      	cmp	r3, #0
 800276c:	d111      	bne.n	8002792 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002788:	2101      	movs	r1, #1
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fca2 	bl	80030d4 <HAL_PCDEx_LPM_Callback>
 8002790:	e002      	b.n	8002798 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa4e 	bl	8002c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f006 f84a 	bl	8008836 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ac:	f040 80b7 	bne.w	800291e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2110      	movs	r1, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 fe34 	bl	8008438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d4:	e046      	b.n	8002864 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027e2:	461a      	mov	r2, r3
 80027e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027fa:	0151      	lsls	r1, r2, #5
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	440a      	add	r2, r1
 8002800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002804:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002808:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002816:	461a      	mov	r2, r3
 8002818:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800281c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800282e:	0151      	lsls	r1, r2, #5
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	440a      	add	r2, r1
 8002834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002838:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800283c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	440a      	add	r2, r1
 8002854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002858:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800285c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	3301      	adds	r3, #1
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286c:	4293      	cmp	r3, r2
 800286e:	d3b2      	bcc.n	80027d6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800287e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002882:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7bdb      	ldrb	r3, [r3, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289c:	f043 030b 	orr.w	r3, r3, #11
 80028a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b2:	f043 030b 	orr.w	r3, r3, #11
 80028b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b8:	e015      	b.n	80028e6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e0:	f043 030b 	orr.w	r3, r3, #11
 80028e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002908:	461a      	mov	r2, r3
 800290a:	f006 f859 	bl	80089c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800291c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f005 ff87 	bl	8008836 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002932:	d123      	bne.n	800297c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f006 f81d 	bl	8008978 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f005 fdf1 	bl	800852a <USB_GetDevSpeed>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681c      	ldr	r4, [r3, #0]
 8002954:	f001 fea6 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8002958:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800295e:	461a      	mov	r2, r3
 8002960:	4620      	mov	r0, r4
 8002962:	f005 fb1d 	bl	8007fa0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f95a 	bl	8002c20 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800297a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f005 ff58 	bl	8008836 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b08      	cmp	r3, #8
 800298e:	d10a      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f93b 	bl	8002c0c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 0208 	and.w	r2, r2, #8
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 ff43 	bl	8008836 <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b80      	cmp	r3, #128	@ 0x80
 80029b8:	d123      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c6:	2301      	movs	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ca:	e014      	b.n	80029f6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f962 	bl	8002cb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	3301      	adds	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	461a      	mov	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d3e4      	bcc.n	80029cc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 ff15 	bl	8008836 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a16:	d13c      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1c:	e02b      	b.n	8002a76 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d115      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da12      	bge.n	8002a70 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3317      	adds	r3, #23
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f922 	bl	8002cb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	3301      	adds	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	791b      	ldrb	r3, [r3, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d3cd      	bcc.n	8002a1e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fecd 	bl	8008836 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa6:	d156      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aac:	e045      	b.n	8002b3a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d12e      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ad6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da2b      	bge.n	8002b34 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ae8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d121      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b30:	6053      	str	r3, [r2, #4]
            break;
 8002b32:	e008      	b.n	8002b46 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d3b3      	bcc.n	8002aae <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fe6b 	bl	8008836 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f88d 	bl	8002c8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 fe55 	bl	8008836 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d115      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f879 	bl	8002ca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e000      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x996>
      return;
 8002bc0:	bf00      	nop
    }
  }
}
 8002bc2:	3734      	adds	r7, #52	@ 0x34
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}

08002bc8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da0c      	bge.n	8002ce2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3304      	adds	r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e00c      	b.n	8002cfc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fc36 	bl	8008574 <USB_EPStopXfer>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08a      	sub	sp, #40	@ 0x28
 8002d1a:	af02      	add	r7, sp, #8
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	3310      	adds	r3, #16
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d901      	bls.n	8002d4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d902      	bls.n	8002d6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3303      	adds	r3, #3
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d72:	e02a      	b.n	8002dca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d902      	bls.n	8002d90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3303      	adds	r3, #3
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4603      	mov	r3, r0
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f005 fc8b 	bl	80086c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	441a      	add	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d809      	bhi.n	8002df4 <PCD_WriteEmptyTxFifo+0xde>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d203      	bcs.n	8002df4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1bf      	bne.n	8002d74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d811      	bhi.n	8002e24 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2201      	movs	r2, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	6939      	ldr	r1, [r7, #16]
 8002e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e20:	4013      	ands	r3, r2
 8002e22:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	333c      	adds	r3, #60	@ 0x3c
 8002e48:	3304      	adds	r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	799b      	ldrb	r3, [r3, #6]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d17b      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4a61      	ldr	r2, [pc, #388]	@ (8002ff8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f240 80b9 	bls.w	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80b3 	beq.w	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e92:	461a      	mov	r2, r3
 8002e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e98:	6093      	str	r3, [r2, #8]
 8002e9a:	e0a7      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	6093      	str	r3, [r2, #8]
 8002eb8:	e098      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 8093 	bne.w	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d90f      	bls.n	8002eee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eea:	6093      	str	r3, [r2, #8]
 8002eec:	e07e      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	3304      	adds	r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d114      	bne.n	8002f50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	f005 fd40 	bl	80089c0 <USB_EP0_OutStart>
 8002f40:	e006      	b.n	8002f50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fe36 	bl	8002bc8 <HAL_PCD_DataOutStageCallback>
 8002f5c:	e046      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d124      	bne.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f82:	6093      	str	r3, [r2, #8]
 8002f84:	e032      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe0d 	bl	8002bc8 <HAL_PCD_DataOutStageCallback>
 8002fae:	e01d      	b.n	8002fec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d114      	bne.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f005 fcf0 	bl	80089c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fdee 	bl	8002bc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	4f54300a 	.word	0x4f54300a
 8002ffc:	4f54310a 	.word	0x4f54310a

08003000 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	333c      	adds	r3, #60	@ 0x3c
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a15      	ldr	r2, [pc, #84]	@ (8003088 <PCD_EP_OutSetupPacket_int+0x88>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d90e      	bls.n	8003054 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003052:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fdcf 	bl	8002bf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <PCD_EP_OutSetupPacket_int+0x88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d90c      	bls.n	800307c <PCD_EP_OutSetupPacket_int+0x7c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003074:	461a      	mov	r2, r3
 8003076:	2101      	movs	r1, #1
 8003078:	f005 fca2 	bl	80089c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	4f54300a 	.word	0x4f54300a

0800308c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030be:	f043 0303 	orr.w	r3, r3, #3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80030f4:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310c:	d905      	bls.n	800311a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800310e:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	4a32      	ldr	r2, [pc, #200]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003118:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e057      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003124:	d90a      	bls.n	800313c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003126:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e007      	b.n	800314c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003144:	4925      	ldr	r1, [pc, #148]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800314c:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a24      	ldr	r2, [pc, #144]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2232      	movs	r2, #50	@ 0x32
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800316a:	e002      	b.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3b01      	subs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x98>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f3      	bne.n	800316c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800318a:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a15      	ldr	r2, [pc, #84]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2232      	movs	r2, #50	@ 0x32
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031a8:	e002      	b.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f3      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e000      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	46020800 	.word	0x46020800
 80031e0:	20000000 	.word	0x20000000
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <HAL_PWREx_GetVoltageRange+0x18>)
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	46020800 	.word	0x46020800

08003204 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800320c:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <HAL_PWREx_ConfigSupply+0x94>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	@ (800329c <HAL_PWREx_ConfigSupply+0x98>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2232      	movs	r2, #50	@ 0x32
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a1f      	ldr	r2, [pc, #124]	@ (800329c <HAL_PWREx_ConfigSupply+0x98>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a1a      	ldr	r2, [pc, #104]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003236:	f023 0302 	bic.w	r3, r3, #2
 800323a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800323c:	e002      	b.n	8003244 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f3      	bne.n	800323e <HAL_PWREx_ConfigSupply+0x3a>
 8003256:	e012      	b.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003264:	e002      	b.n	800326c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b01      	subs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f3      	bne.n	8003266 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e000      	b.n	800328a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000
 800329c:	10624dd3 	.word	0x10624dd3
 80032a0:	46020800 	.word	0x46020800

080032a4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	6113      	str	r3, [r2, #16]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	46020800 	.word	0x46020800

080032c4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032d2:	6113      	str	r3, [r2, #16]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	46020800 	.word	0x46020800

080032e4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <HAL_PWREx_EnableVddA+0x1c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <HAL_PWREx_EnableVddA+0x1c>)
 80032ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032f2:	6113      	str	r3, [r2, #16]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	46020800 	.word	0x46020800

08003304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	@ 0x38
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f000 bec8 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331e:	4b99      	ldr	r3, [pc, #612]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003328:	4b96      	ldr	r3, [pc, #600]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 816c 	beq.w	8003618 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_RCC_OscConfig+0x52>
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	2b0c      	cmp	r3, #12
 800334a:	f040 80de 	bne.w	800350a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b01      	cmp	r3, #1
 8003352:	f040 80da 	bne.w	800350a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f000 bea5 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003368:	4b86      	ldr	r3, [pc, #536]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_RCC_OscConfig+0x7a>
 8003374:	4b83      	ldr	r3, [pc, #524]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800337c:	e005      	b.n	800338a <HAL_RCC_OscConfig+0x86>
 800337e:	4b81      	ldr	r3, [pc, #516]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800338a:	4293      	cmp	r3, r2
 800338c:	d255      	bcs.n	800343a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	4618      	mov	r0, r3
 800339a:	f001 f9d9 	bl	8004750 <RCC_SetFlashLatencyFromMSIRange>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f000 be82 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033aa:	4b76      	ldr	r3, [pc, #472]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a75      	ldr	r2, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033b4:	6093      	str	r3, [r2, #8]
 80033b6:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	4970      	ldr	r1, [pc, #448]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80033d0:	d309      	bcc.n	80033e6 <HAL_RCC_OscConfig+0xe2>
 80033d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 021f 	bic.w	r2, r3, #31
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4969      	ldr	r1, [pc, #420]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
 80033e4:	e07e      	b.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da0a      	bge.n	8003404 <HAL_RCC_OscConfig+0x100>
 80033ee:	4b65      	ldr	r3, [pc, #404]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	015b      	lsls	r3, r3, #5
 80033fc:	4961      	ldr	r1, [pc, #388]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]
 8003402:	e06f      	b.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800340c:	d30a      	bcc.n	8003424 <HAL_RCC_OscConfig+0x120>
 800340e:	4b5d      	ldr	r3, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4959      	ldr	r1, [pc, #356]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
 8003422:	e05f      	b.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
 8003424:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	03db      	lsls	r3, r3, #15
 8003432:	4954      	ldr	r1, [pc, #336]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003434:	4313      	orrs	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
 8003438:	e054      	b.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800343a:	4b52      	ldr	r3, [pc, #328]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4a51      	ldr	r2, [pc, #324]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003440:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	4b4f      	ldr	r3, [pc, #316]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	494c      	ldr	r1, [pc, #304]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003460:	d309      	bcc.n	8003476 <HAL_RCC_OscConfig+0x172>
 8003462:	4b48      	ldr	r3, [pc, #288]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 021f 	bic.w	r2, r3, #31
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4945      	ldr	r1, [pc, #276]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
 8003474:	e028      	b.n	80034c8 <HAL_RCC_OscConfig+0x1c4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	da0a      	bge.n	8003494 <HAL_RCC_OscConfig+0x190>
 800347e:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	015b      	lsls	r3, r3, #5
 800348c:	493d      	ldr	r1, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800348e:	4313      	orrs	r3, r2
 8003490:	60cb      	str	r3, [r1, #12]
 8003492:	e019      	b.n	80034c8 <HAL_RCC_OscConfig+0x1c4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349c:	d30a      	bcc.n	80034b4 <HAL_RCC_OscConfig+0x1b0>
 800349e:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	4935      	ldr	r1, [pc, #212]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
 80034b2:	e009      	b.n	80034c8 <HAL_RCC_OscConfig+0x1c4>
 80034b4:	4b33      	ldr	r3, [pc, #204]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	03db      	lsls	r3, r3, #15
 80034c2:	4930      	ldr	r1, [pc, #192]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f93c 	bl	8004750 <RCC_SetFlashLatencyFromMSIRange>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f000 bde5 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80034e4:	f001 f8de 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_RCC_OscConfig+0x284>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fd37 	bl	8000f60 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 808a 	beq.w	8003616 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003506:	f000 bdd2 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d066      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003512:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800351e:	f7fd fda9 	bl	8001074 <HAL_GetTick>
 8003522:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003524:	e009      	b.n	800353a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003526:	f7fd fda5 	bl	8001074 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d902      	bls.n	800353a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	f000 bdba 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ef      	beq.n	8003526 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003546:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	4909      	ldr	r1, [pc, #36]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800356c:	d30e      	bcc.n	800358c <HAL_RCC_OscConfig+0x288>
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f023 021f 	bic.w	r2, r3, #31
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4902      	ldr	r1, [pc, #8]	@ (8003584 <HAL_RCC_OscConfig+0x280>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e04a      	b.n	8003618 <HAL_RCC_OscConfig+0x314>
 8003582:	bf00      	nop
 8003584:	46020c00 	.word	0x46020c00
 8003588:	20000004 	.word	0x20000004
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	da0a      	bge.n	80035aa <HAL_RCC_OscConfig+0x2a6>
 8003594:	4b98      	ldr	r3, [pc, #608]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	015b      	lsls	r3, r3, #5
 80035a2:	4995      	ldr	r1, [pc, #596]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e036      	b.n	8003618 <HAL_RCC_OscConfig+0x314>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d30a      	bcc.n	80035ca <HAL_RCC_OscConfig+0x2c6>
 80035b4:	4b90      	ldr	r3, [pc, #576]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	029b      	lsls	r3, r3, #10
 80035c2:	498d      	ldr	r1, [pc, #564]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60cb      	str	r3, [r1, #12]
 80035c8:	e026      	b.n	8003618 <HAL_RCC_OscConfig+0x314>
 80035ca:	4b8b      	ldr	r3, [pc, #556]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	03db      	lsls	r3, r3, #15
 80035d8:	4987      	ldr	r1, [pc, #540]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]
 80035de:	e01b      	b.n	8003618 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80035e0:	4b85      	ldr	r3, [pc, #532]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a84      	ldr	r2, [pc, #528]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035ec:	f7fd fd42 	bl	8001074 <HAL_GetTick>
 80035f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035f2:	e009      	b.n	8003608 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f4:	f7fd fd3e 	bl	8001074 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d902      	bls.n	8003608 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	f000 bd53 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ef      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2f0>
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003616:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 808b 	beq.w	800373c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	2b08      	cmp	r3, #8
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x334>
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d109      	bne.n	8003646 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003634:	2b03      	cmp	r3, #3
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d17d      	bne.n	800373c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f000 bd34 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x35a>
 8003650:	4b69      	ldr	r3, [pc, #420]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a68      	ldr	r2, [pc, #416]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e041      	b.n	80036e2 <HAL_RCC_OscConfig+0x3de>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003666:	d112      	bne.n	800368e <HAL_RCC_OscConfig+0x38a>
 8003668:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a62      	ldr	r2, [pc, #392]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5f      	ldr	r2, [pc, #380]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b5d      	ldr	r3, [pc, #372]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e029      	b.n	80036e2 <HAL_RCC_OscConfig+0x3de>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003696:	d112      	bne.n	80036be <HAL_RCC_OscConfig+0x3ba>
 8003698:	4b57      	ldr	r3, [pc, #348]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a56      	ldr	r2, [pc, #344]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b54      	ldr	r3, [pc, #336]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a53      	ldr	r2, [pc, #332]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b51      	ldr	r3, [pc, #324]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a50      	ldr	r2, [pc, #320]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e011      	b.n	80036e2 <HAL_RCC_OscConfig+0x3de>
 80036be:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b4b      	ldr	r3, [pc, #300]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4a      	ldr	r2, [pc, #296]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b48      	ldr	r3, [pc, #288]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a47      	ldr	r2, [pc, #284]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80036ea:	f7fd fcc3 	bl	8001074 <HAL_GetTick>
 80036ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f0:	e009      	b.n	8003706 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f2:	f7fd fcbf 	bl	8001074 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b64      	cmp	r3, #100	@ 0x64
 80036fe:	d902      	bls.n	8003706 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	f000 bcd4 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4b3c      	ldr	r3, [pc, #240]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3ee>
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003714:	f7fd fcae 	bl	8001074 <HAL_GetTick>
 8003718:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e009      	b.n	8003730 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd fcaa 	bl	8001074 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d902      	bls.n	8003730 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	f000 bcbf 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003730:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ef      	bne.n	800371c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d05f      	beq.n	8003808 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	2b04      	cmp	r3, #4
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x456>
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d114      	bne.n	800377e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	2b02      	cmp	r3, #2
 8003758:	d111      	bne.n	800377e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f000 bca3 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	4920      	ldr	r1, [pc, #128]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800377c:	e044      	b.n	8003808 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d024      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003786:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003792:	f7fd fc6f 	bl	8001074 <HAL_GetTick>
 8003796:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	e009      	b.n	80037ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fd fc6b 	bl	8001074 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d902      	bls.n	80037ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	f000 bc80 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ae:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ef      	beq.n	800379a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	490b      	ldr	r1, [pc, #44]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	610b      	str	r3, [r1, #16]
 80037ce:	e01b      	b.n	8003808 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a08      	ldr	r2, [pc, #32]	@ (80037f8 <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037dc:	f7fd fc4a 	bl	8001074 <HAL_GetTick>
 80037e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fd fc46 	bl	8001074 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d904      	bls.n	80037fc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	f000 bc5b 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
 80037f8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037fc:	4baf      	ldr	r3, [pc, #700]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ed      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80c8 	beq.w	80039a6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381c:	4ba7      	ldr	r3, [pc, #668]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d111      	bne.n	800384e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4ba4      	ldr	r3, [pc, #656]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003830:	4aa2      	ldr	r2, [pc, #648]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800383a:	4ba0      	ldr	r3, [pc, #640]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800384e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d119      	bne.n	800388e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800385a:	4b99      	ldr	r3, [pc, #612]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	4a98      	ldr	r2, [pc, #608]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fd fc05 	bl	8001074 <HAL_GetTick>
 800386a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800386c:	e009      	b.n	8003882 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fd fc01 	bl	8001074 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d902      	bls.n	8003882 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f000 bc16 	b.w	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003882:	4b8f      	ldr	r3, [pc, #572]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ef      	beq.n	800386e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d05f      	beq.n	8003956 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003896:	4b89      	ldr	r3, [pc, #548]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800389c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d037      	beq.n	800391c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e3f4      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01b      	beq.n	8003906 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80038ce:	4b7b      	ldr	r3, [pc, #492]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80038d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d4:	4a79      	ldr	r2, [pc, #484]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80038d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80038da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80038de:	f7fd fbc9 	bl	8001074 <HAL_GetTick>
 80038e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fd fbc5 	bl	8001074 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e3da      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038f8:	4b70      	ldr	r3, [pc, #448]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80038fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003906:	4b6d      	ldr	r3, [pc, #436]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	4969      	ldr	r1, [pc, #420]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800391c:	4b67      	ldr	r3, [pc, #412]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003922:	4a66      	ldr	r2, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003928:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800392c:	f7fd fba2 	bl	8001074 <HAL_GetTick>
 8003930:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd fb9e 	bl	8001074 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b05      	cmp	r3, #5
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e3b3      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003946:	4b5d      	ldr	r3, [pc, #372]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800394c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <HAL_RCC_OscConfig+0x630>
 8003954:	e01b      	b.n	800398e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003956:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800395c:	4a57      	ldr	r2, [pc, #348]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800395e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003962:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003966:	f7fd fb85 	bl	8001074 <HAL_GetTick>
 800396a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396e:	f7fd fb81 	bl	8001074 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b05      	cmp	r3, #5
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e396      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003980:	4b4e      	ldr	r3, [pc, #312]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ef      	bne.n	800396e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800398e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b49      	ldr	r3, [pc, #292]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399c:	4a47      	ldr	r2, [pc, #284]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8111 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d111      	bne.n	80039ec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b3c      	ldr	r3, [pc, #240]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ce:	4a3b      	ldr	r2, [pc, #236]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039d8:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ec:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d118      	bne.n	8003a2a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039f8:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a04:	f7fd fb36 	bl	8001074 <HAL_GetTick>
 8003a08:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0c:	f7fd fb32 	bl	8001074 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e347      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <HAL_RCC_OscConfig+0x7bc>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01f      	beq.n	8003a76 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a48:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a52:	4b1a      	ldr	r3, [pc, #104]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a62:	e018      	b.n	8003a96 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a64:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6a:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a74:	e00f      	b.n	8003a96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003abc <HAL_RCC_OscConfig+0x7b8>)
 8003a8e:	f023 0304 	bic.w	r3, r3, #4
 8003a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d057      	beq.n	8003b4e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003a9e:	f7fd fae9 	bl	8001074 <HAL_GetTick>
 8003aa2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa4:	e00e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fd fae5 	bl	8001074 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d905      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e2f8      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
 8003abc:	46020c00 	.word	0x46020c00
 8003ac0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0e9      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ade:	4b96      	ldr	r3, [pc, #600]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae4:	4a94      	ldr	r2, [pc, #592]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd fac0 	bl	8001074 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e2d3      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b06:	4b8c      	ldr	r3, [pc, #560]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ed      	beq.n	8003af0 <HAL_RCC_OscConfig+0x7ec>
 8003b14:	e053      	b.n	8003bbe <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b16:	4b88      	ldr	r3, [pc, #544]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1c:	4a86      	ldr	r2, [pc, #536]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fd faa4 	bl	8001074 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e2b7      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ed      	bne.n	8003b28 <HAL_RCC_OscConfig+0x824>
 8003b4c:	e037      	b.n	8003bbe <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003b4e:	f7fd fa91 	bl	8001074 <HAL_GetTick>
 8003b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fa8d 	bl	8001074 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e2a0      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b6c:	4b72      	ldr	r3, [pc, #456]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ed      	bne.n	8003b56 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01a      	beq.n	8003bbe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b88:	4b6b      	ldr	r3, [pc, #428]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b8e:	4a6a      	ldr	r2, [pc, #424]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd fa6b 	bl	8001074 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e27e      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bb0:	4b61      	ldr	r3, [pc, #388]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ed      	bne.n	8003b9a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d036      	beq.n	8003c50 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d019      	beq.n	8003c1e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003bea:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a52      	ldr	r2, [pc, #328]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bf4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bf6:	f7fd fa3d 	bl	8001074 <HAL_GetTick>
 8003bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfe:	f7fd fa39 	bl	8001074 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e24e      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c10:	4b49      	ldr	r3, [pc, #292]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x8fa>
 8003c1c:	e018      	b.n	8003c50 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003c1e:	4b46      	ldr	r3, [pc, #280]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a45      	ldr	r2, [pc, #276]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c2a:	f7fd fa23 	bl	8001074 <HAL_GetTick>
 8003c2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c32:	f7fd fa1f 	bl	8001074 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e234      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c44:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d036      	beq.n	8003cca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d019      	beq.n	8003c98 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c64:	4b34      	ldr	r3, [pc, #208]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a33      	ldr	r2, [pc, #204]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c70:	f7fd fa00 	bl	8001074 <HAL_GetTick>
 8003c74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c78:	f7fd f9fc 	bl	8001074 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e211      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x974>
 8003c96:	e018      	b.n	8003cca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c98:	4b27      	ldr	r3, [pc, #156]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ca4:	f7fd f9e6 	bl	8001074 <HAL_GetTick>
 8003ca8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003cac:	f7fd f9e2 	bl	8001074 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1f7      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07f      	beq.n	8003dd6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d062      	beq.n	8003da4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003cde:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	4910      	ldr	r1, [pc, #64]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003d04:	d309      	bcc.n	8003d1a <HAL_RCC_OscConfig+0xa16>
 8003d06:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f023 021f 	bic.w	r2, r3, #31
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4909      	ldr	r1, [pc, #36]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60cb      	str	r3, [r1, #12]
 8003d18:	e02a      	b.n	8003d70 <HAL_RCC_OscConfig+0xa6c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da0c      	bge.n	8003d3c <HAL_RCC_OscConfig+0xa38>
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	4901      	ldr	r1, [pc, #4]	@ (8003d38 <HAL_RCC_OscConfig+0xa34>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
 8003d36:	e01b      	b.n	8003d70 <HAL_RCC_OscConfig+0xa6c>
 8003d38:	46020c00 	.word	0x46020c00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d30a      	bcc.n	8003d5c <HAL_RCC_OscConfig+0xa58>
 8003d46:	4ba1      	ldr	r3, [pc, #644]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	029b      	lsls	r3, r3, #10
 8003d54:	499d      	ldr	r1, [pc, #628]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
 8003d5a:	e009      	b.n	8003d70 <HAL_RCC_OscConfig+0xa6c>
 8003d5c:	4b9b      	ldr	r3, [pc, #620]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	03db      	lsls	r3, r3, #15
 8003d6a:	4998      	ldr	r1, [pc, #608]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d70:	4b96      	ldr	r3, [pc, #600]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a95      	ldr	r2, [pc, #596]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d76:	f043 0310 	orr.w	r3, r3, #16
 8003d7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d7c:	f7fd f97a 	bl	8001074 <HAL_GetTick>
 8003d80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d84:	f7fd f976 	bl	8001074 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e18b      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d96:	4b8d      	ldr	r3, [pc, #564]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xa80>
 8003da2:	e018      	b.n	8003dd6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003da4:	4b89      	ldr	r3, [pc, #548]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a88      	ldr	r2, [pc, #544]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003db0:	f7fd f960 	bl	8001074 <HAL_GetTick>
 8003db4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003db8:	f7fd f95c 	bl	8001074 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e171      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003dca:	4b80      	ldr	r3, [pc, #512]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8166 	beq.w	80040ac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de6:	4b79      	ldr	r3, [pc, #484]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	f000 80f2 	beq.w	8003fd8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f040 80c5 	bne.w	8003f88 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b73      	ldr	r3, [pc, #460]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a72      	ldr	r2, [pc, #456]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e0a:	f7fd f933 	bl	8001074 <HAL_GetTick>
 8003e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fd f92f 	bl	8001074 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e144      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e24:	4b69      	ldr	r3, [pc, #420]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b66      	ldr	r3, [pc, #408]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d111      	bne.n	8003e62 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b63      	ldr	r3, [pc, #396]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e44:	4a61      	ldr	r2, [pc, #388]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e62:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd0 <HAL_RCC_OscConfig+0xccc>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e6e:	d102      	bne.n	8003e76 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e76:	4b56      	ldr	r3, [pc, #344]	@ (8003fd0 <HAL_RCC_OscConfig+0xccc>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a55      	ldr	r2, [pc, #340]	@ (8003fd0 <HAL_RCC_OscConfig+0xccc>)
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e80:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e82:	4b52      	ldr	r3, [pc, #328]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0212      	lsls	r2, r2, #8
 8003e9a:	4311      	orrs	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	494a      	ldr	r1, [pc, #296]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ea8:	4b48      	ldr	r3, [pc, #288]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eac:	4b49      	ldr	r3, [pc, #292]	@ (8003fd4 <HAL_RCC_OscConfig+0xcd0>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0252      	lsls	r2, r2, #9
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0412      	lsls	r2, r2, #16
 8003ece:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003ed2:	4311      	orrs	r1, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0612      	lsls	r2, r2, #24
 8003edc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	493a      	ldr	r1, [pc, #232]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003ee8:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	4a37      	ldr	r2, [pc, #220]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003eee:	f023 0310 	bic.w	r3, r3, #16
 8003ef2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	4a34      	ldr	r2, [pc, #208]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003efe:	4b33      	ldr	r3, [pc, #204]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	4a32      	ldr	r2, [pc, #200]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f04:	f043 0310 	orr.w	r3, r3, #16
 8003f08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003f0a:	4b30      	ldr	r3, [pc, #192]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f023 020c 	bic.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	492d      	ldr	r1, [pc, #180]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <HAL_RCC_OscConfig+0xccc>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <HAL_RCC_OscConfig+0xccc>)
 8003f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003f30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3e:	4a23      	ldr	r2, [pc, #140]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b20      	ldr	r3, [pc, #128]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f54:	f7fd f88e 	bl	8001074 <HAL_GetTick>
 8003f58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd f88a 	bl	8001074 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e09f      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f6e:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f7a:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	4a13      	ldr	r2, [pc, #76]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f84:	6293      	str	r3, [r2, #40]	@ 0x28
 8003f86:	e091      	b.n	80040ac <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f94:	f7fd f86e 	bl	8001074 <HAL_GetTick>
 8003f98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd f86a 	bl	8001074 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003fba:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	4a03      	ldr	r2, [pc, #12]	@ (8003fcc <HAL_RCC_OscConfig+0xcc8>)
 8003fc0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8003fca:	e06f      	b.n	80040ac <HAL_RCC_OscConfig+0xda8>
 8003fcc:	46020c00 	.word	0x46020c00
 8003fd0:	46020800 	.word	0x46020800
 8003fd4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003fd8:	4b37      	ldr	r3, [pc, #220]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d039      	beq.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d132      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d129      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d122      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004024:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d11a      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	0a5b      	lsrs	r3, r3, #9
 800402e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d111      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d108      	bne.n	8004060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	0e1b      	lsrs	r3, r3, #24
 8004052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e024      	b.n	80040ae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004072:	429a      	cmp	r2, r3
 8004074:	d01a      	beq.n	80040ac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	4a0f      	ldr	r2, [pc, #60]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fc fff7 	bl	8001074 <HAL_GetTick>
 8004086:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004088:	bf00      	nop
 800408a:	f7fc fff3 	bl	8001074 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004092:	4293      	cmp	r3, r2
 8004094:	d0f9      	beq.n	800408a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	4a07      	ldr	r2, [pc, #28]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_RCC_OscConfig+0xdb4>)
 80040a6:	f043 0310 	orr.w	r3, r3, #16
 80040aa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3738      	adds	r7, #56	@ 0x38
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	46020c00 	.word	0x46020c00

080040bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e1d9      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004340 <HAL_RCC_ClockConfig+0x284>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b98      	ldr	r3, [pc, #608]	@ (8004340 <HAL_RCC_ClockConfig+0x284>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 020f 	bic.w	r2, r3, #15
 80040e6:	4996      	ldr	r1, [pc, #600]	@ (8004340 <HAL_RCC_ClockConfig+0x284>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b94      	ldr	r3, [pc, #592]	@ (8004340 <HAL_RCC_ClockConfig+0x284>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e1c1      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	4b8c      	ldr	r3, [pc, #560]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004118:	429a      	cmp	r2, r3
 800411a:	d908      	bls.n	800412e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800411c:	4b89      	ldr	r3, [pc, #548]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	4986      	ldr	r1, [pc, #536]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800412a:	4313      	orrs	r3, r2
 800412c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d012      	beq.n	8004160 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	4b81      	ldr	r3, [pc, #516]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004148:	429a      	cmp	r2, r3
 800414a:	d909      	bls.n	8004160 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800414c:	4b7d      	ldr	r3, [pc, #500]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	497a      	ldr	r1, [pc, #488]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800415c:	4313      	orrs	r3, r2
 800415e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	4b74      	ldr	r3, [pc, #464]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004178:	429a      	cmp	r2, r3
 800417a:	d908      	bls.n	800418e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b71      	ldr	r3, [pc, #452]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	496e      	ldr	r1, [pc, #440]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 800418a:	4313      	orrs	r3, r2
 800418c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b69      	ldr	r3, [pc, #420]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d908      	bls.n	80041bc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80041aa:	4b66      	ldr	r3, [pc, #408]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4963      	ldr	r1, [pc, #396]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80d2 	beq.w	800436e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d143      	bne.n	800425e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b57      	ldr	r3, [pc, #348]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	4a56      	ldr	r2, [pc, #344]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80041f4:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004206:	f7fc ff35 	bl	8001074 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800420c:	4b4e      	ldr	r3, [pc, #312]	@ (8004348 <HAL_RCC_ClockConfig+0x28c>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00f      	beq.n	8004238 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800421a:	f7fc ff2b 	bl	8001074 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e12b      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800422c:	4b46      	ldr	r3, [pc, #280]	@ (8004348 <HAL_RCC_ClockConfig+0x28c>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4b41      	ldr	r3, [pc, #260]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004244:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004246:	f023 0304 	bic.w	r3, r3, #4
 800424a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800424e:	4b3d      	ldr	r3, [pc, #244]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d121      	bne.n	800429e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e112      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	4b37      	ldr	r3, [pc, #220]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d115      	bne.n	800429e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e106      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800427e:	4b31      	ldr	r3, [pc, #196]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0fa      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428e:	4b2d      	ldr	r3, [pc, #180]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e0f2      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4926      	ldr	r1, [pc, #152]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80042b0:	f7fc fee0 	bl	8001074 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fc fed8 	bl	8001074 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0d6      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x204>
 80042e2:	e044      	b.n	800436e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ee:	f7fc fec1 	bl	8001074 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0bf      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d1ee      	bne.n	80042ee <HAL_RCC_ClockConfig+0x232>
 8004310:	e02d      	b.n	800436e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d123      	bne.n	8004362 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fc feaa 	bl	8001074 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0a8      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004332:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <HAL_RCC_ClockConfig+0x288>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_ClockConfig+0x260>
 800433e:	e016      	b.n	800436e <HAL_RCC_ClockConfig+0x2b2>
 8004340:	40022000 	.word	0x40022000
 8004344:	46020c00 	.word	0x46020c00
 8004348:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fc fe92 	bl	8001074 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e090      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004362:	4b4a      	ldr	r3, [pc, #296]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d1ee      	bne.n	800434c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	429a      	cmp	r2, r3
 8004388:	d208      	bcs.n	800439c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800438a:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 020f 	bic.w	r2, r3, #15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	493d      	ldr	r1, [pc, #244]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b3c      	ldr	r3, [pc, #240]	@ (8004490 <HAL_RCC_ClockConfig+0x3d4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d210      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b39      	ldr	r3, [pc, #228]	@ (8004490 <HAL_RCC_ClockConfig+0x3d4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	4937      	ldr	r1, [pc, #220]	@ (8004490 <HAL_RCC_ClockConfig+0x3d4>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <HAL_RCC_ClockConfig+0x3d4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e05b      	b.n	8004484 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d208      	bcs.n	80043fa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043e8:	4b28      	ldr	r3, [pc, #160]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4925      	ldr	r1, [pc, #148]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d012      	beq.n	800442c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004414:	429a      	cmp	r2, r3
 8004416:	d209      	bcs.n	800442c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004418:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4919      	ldr	r1, [pc, #100]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004428:	4313      	orrs	r3, r2
 800442a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004448:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	490d      	ldr	r1, [pc, #52]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800445a:	f000 f821 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <HAL_RCC_ClockConfig+0x3d0>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	490a      	ldr	r1, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x3d8>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <HAL_RCC_ClockConfig+0x3dc>)
 8004472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_ClockConfig+0x3e0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fc fd71 	bl	8000f60 <HAL_InitTick>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]

  return status;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	46020c00 	.word	0x46020c00
 8004490:	40022000 	.word	0x40022000
 8004494:	08008b50 	.word	0x08008b50
 8004498:	20000000 	.word	0x20000000
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b08b      	sub	sp, #44	@ 0x2c
 80044a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ae:	4b78      	ldr	r3, [pc, #480]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b8:	4b75      	ldr	r3, [pc, #468]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x34>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d121      	bne.n	8004512 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d11e      	bne.n	8004512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80044d4:	4b6e      	ldr	r3, [pc, #440]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80044e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044e6:	0b1b      	lsrs	r3, r3, #12
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ee:	e005      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80044f0:	4b67      	ldr	r3, [pc, #412]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	0f1b      	lsrs	r3, r3, #28
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044fc:	4a65      	ldr	r2, [pc, #404]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d110      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004510:	e00d      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004512:	4b5f      	ldr	r3, [pc, #380]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d102      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800451e:	4b5e      	ldr	r3, [pc, #376]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e004      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d101      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800452a:	4b5b      	ldr	r3, [pc, #364]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800452c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b0c      	cmp	r3, #12
 8004532:	f040 80a5 	bne.w	8004680 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004536:	4b56      	ldr	r3, [pc, #344]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004540:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800454e:	4b50      	ldr	r3, [pc, #320]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800455a:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d003      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0xe4>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d022      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x128>
 8004582:	e043      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800469c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b3e      	ldr	r3, [pc, #248]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80045aa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80046a0 <HAL_RCC_GetSysClockFreq+0x200>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c6:	e046      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800469c <HAL_RCC_GetSysClockFreq+0x1fc>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80045ee:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80046a0 <HAL_RCC_GetSysClockFreq+0x200>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e024      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	ee07 3a90 	vmov	s15, r3
 800461c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004624:	4b1a      	ldr	r3, [pc, #104]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004634:	ed97 6a01 	vldr	s12, [r7, #4]
 8004638:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80046a0 <HAL_RCC_GetSysClockFreq+0x200>
 800463c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004640:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004648:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004654:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004656:	4b0e      	ldr	r3, [pc, #56]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004660:	3301      	adds	r3, #1
 8004662:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800466e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467a:	ee17 3a90 	vmov	r3, s15
 800467e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004680:	6a3b      	ldr	r3, [r7, #32]
}
 8004682:	4618      	mov	r0, r3
 8004684:	372c      	adds	r7, #44	@ 0x2c
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	46020c00 	.word	0x46020c00
 8004694:	08008b68 	.word	0x08008b68
 8004698:	00f42400 	.word	0x00f42400
 800469c:	4b742400 	.word	0x4b742400
 80046a0:	46000000 	.word	0x46000000

080046a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046a8:	f7ff fefa 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <HAL_RCC_GetHCLKFreq+0x28>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	4906      	ldr	r1, [pc, #24]	@ (80046d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80046b8:	5ccb      	ldrb	r3, [r1, r3]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046c4:	681b      	ldr	r3, [r3, #0]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	46020c00 	.word	0x46020c00
 80046d0:	08008b50 	.word	0x08008b50
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80046dc:	f7ff ffe2 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	46020c00 	.word	0x46020c00
 80046fc:	08008b60 	.word	0x08008b60

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004704:	f7ff ffce 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4903      	ldr	r1, [pc, #12]	@ (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	46020c00 	.word	0x46020c00
 8004724:	08008b60 	.word	0x08008b60

08004728 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800472c:	f7ff ffba 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4903      	ldr	r1, [pc, #12]	@ (800474c <HAL_RCC_GetPCLK3Freq+0x24>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	46020c00 	.word	0x46020c00
 800474c:	08008b60 	.word	0x08008b60

08004750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004758:	4b3e      	ldr	r3, [pc, #248]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004766:	f7fe fd3f 	bl	80031e8 <HAL_PWREx_GetVoltageRange>
 800476a:	6178      	str	r0, [r7, #20]
 800476c:	e019      	b.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004774:	4a37      	ldr	r2, [pc, #220]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004776:	f043 0304 	orr.w	r3, r3, #4
 800477a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800477e:	4b35      	ldr	r3, [pc, #212]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800478c:	f7fe fd2c 	bl	80031e8 <HAL_PWREx_GetVoltageRange>
 8004790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b30      	ldr	r3, [pc, #192]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800479a:	f023 0304 	bic.w	r3, r3, #4
 800479e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047a8:	d003      	beq.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047b0:	d109      	bne.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b8:	d202      	bcs.n	80047c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80047ba:	2301      	movs	r3, #1
 80047bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80047be:	e033      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80047c4:	e030      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047cc:	d208      	bcs.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d102      	bne.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80047d6:	2303      	movs	r3, #3
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e025      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e035      	b.n	800484c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e6:	d90f      	bls.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047f4:	d902      	bls.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e015      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80047fc:	2301      	movs	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	e012      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e00f      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800480e:	d109      	bne.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004816:	d102      	bne.n	800481e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004818:	2301      	movs	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e004      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800481e:	2302      	movs	r3, #2
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e001      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004824:	2301      	movs	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 020f 	bic.w	r2, r3, #15
 8004830:	4909      	ldr	r1, [pc, #36]	@ (8004858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004838:	4b07      	ldr	r3, [pc, #28]	@ (8004858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	46020c00 	.word	0x46020c00
 8004858:	40022000 	.word	0x40022000

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b0b8      	sub	sp, #224	@ 0xe0
 8004862:	af00      	add	r7, sp, #0
 8004864:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004868:	2300      	movs	r3, #0
 800486a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800486e:	2300      	movs	r3, #0
 8004870:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f002 0401 	and.w	r4, r2, #1
 8004880:	2500      	movs	r5, #0
 8004882:	ea54 0305 	orrs.w	r3, r4, r5
 8004886:	d00b      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004888:	4bca      	ldr	r3, [pc, #808]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800488a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800488e:	f023 0103 	bic.w	r1, r3, #3
 8004892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004898:	4ac6      	ldr	r2, [pc, #792]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800489a:	430b      	orrs	r3, r1
 800489c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 0802 	and.w	r8, r2, #2
 80048ac:	f04f 0900 	mov.w	r9, #0
 80048b0:	ea58 0309 	orrs.w	r3, r8, r9
 80048b4:	d00b      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80048b6:	4bbf      	ldr	r3, [pc, #764]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048bc:	f023 010c 	bic.w	r1, r3, #12
 80048c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	4abb      	ldr	r2, [pc, #748]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048c8:	430b      	orrs	r3, r1
 80048ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f002 0a04 	and.w	sl, r2, #4
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	ea5a 030b 	orrs.w	r3, sl, fp
 80048e2:	d00b      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80048e4:	4bb3      	ldr	r3, [pc, #716]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ea:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80048ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f4:	4aaf      	ldr	r2, [pc, #700]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f002 0308 	and.w	r3, r2, #8
 8004908:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004912:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004916:	460b      	mov	r3, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	d00b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800491c:	4ba5      	ldr	r3, [pc, #660]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800491e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004922:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800492a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492c:	4aa1      	ldr	r2, [pc, #644]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800492e:	430b      	orrs	r3, r1
 8004930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f002 0310 	and.w	r3, r2, #16
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800494a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800494e:	460b      	mov	r3, r1
 8004950:	4313      	orrs	r3, r2
 8004952:	d00b      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004954:	4b97      	ldr	r3, [pc, #604]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800495a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800495e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	4a93      	ldr	r2, [pc, #588]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004966:	430b      	orrs	r3, r1
 8004968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f002 0320 	and.w	r3, r2, #32
 8004978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004982:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004986:	460b      	mov	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	d00b      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800498c:	4b89      	ldr	r3, [pc, #548]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800498e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004992:	f023 0107 	bic.w	r1, r3, #7
 8004996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800499a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800499c:	4a85      	ldr	r2, [pc, #532]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d00b      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80049c4:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80049ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049d4:	4a77      	ldr	r2, [pc, #476]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049f2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049fc:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0c:	4a69      	ldr	r2, [pc, #420]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4313      	orrs	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004a34:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a66:	460b      	mov	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004a6c:	4b51      	ldr	r3, [pc, #324]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a72:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004aa4:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aaa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ad2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004adc:	4b35      	ldr	r3, [pc, #212]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ae2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aee:	430b      	orrs	r3, r1
 8004af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b02:	2300      	movs	r3, #0
 8004b04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d00c      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b22:	4a24      	ldr	r2, [pc, #144]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b36:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b38:	2300      	movs	r3, #0
 8004b3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d04f      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	2b80      	cmp	r3, #128	@ 0x80
 8004b50:	d02d      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004b52:	2b80      	cmp	r3, #128	@ 0x80
 8004b54:	d827      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b56:	2b60      	cmp	r3, #96	@ 0x60
 8004b58:	d02e      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b5a:	2b60      	cmp	r3, #96	@ 0x60
 8004b5c:	d823      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b5e:	2b40      	cmp	r3, #64	@ 0x40
 8004b60:	d006      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004b62:	2b40      	cmp	r3, #64	@ 0x40
 8004b64:	d81f      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d011      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004b6e:	e01a      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b70:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b7c:	e01d      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b82:	3308      	adds	r3, #8
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f9d1 	bl	8006f2c <RCCEx_PLL2_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b90:	e013      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b96:	332c      	adds	r3, #44	@ 0x2c
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 fa5f 	bl	800705c <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ba4:	e009      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004bac:	e005      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e003      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004bb2:	bf00      	nop
 8004bb4:	46020c00 	.word	0x46020c00
        break;
 8004bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004bc2:	4bb6      	ldr	r3, [pc, #728]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bc8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	4ab1      	ldr	r2, [pc, #708]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004be2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bf8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d053      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0e:	d033      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d82c      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c1a:	d02f      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c20:	d826      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c2c:	d820      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d011      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004c38:	e01a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c3a:	4b98      	ldr	r3, [pc, #608]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	4a97      	ldr	r2, [pc, #604]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c46:	e01a      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f002 f96c 	bl	8006f2c <RCCEx_PLL2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c5a:	e010      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c60:	332c      	adds	r3, #44	@ 0x2c
 8004c62:	4618      	mov	r0, r3
 8004c64:	f002 f9fa 	bl	800705c <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c6e:	e006      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c86:	4b85      	ldr	r3, [pc, #532]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	4a80      	ldr	r2, [pc, #512]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ca6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cb8:	2300      	movs	r3, #0
 8004cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d046      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cd2:	d028      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004cd4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cd8:	d821      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cde:	d022      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ce0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce4:	d81b      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004cec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf0:	d815      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d80f      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d00e      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d08:	e009      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0e:	3308      	adds	r3, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 f90b 	bl	8006f2c <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d1c:	e004      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d28:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004d30:	4b5a      	ldr	r3, [pc, #360]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d36:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d42:	4a56      	ldr	r2, [pc, #344]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d50:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d62:	2300      	movs	r3, #0
 8004d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	d03f      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d81e      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004dc3 	.word	0x08004dc3
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004dc3 	.word	0x08004dc3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d98:	4b40      	ldr	r3, [pc, #256]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004da4:	e00e      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004daa:	332c      	adds	r3, #44	@ 0x2c
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 f955 	bl	800705c <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004db8:	e004      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004dc2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dc4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004dcc:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dd2:	f023 0107 	bic.w	r1, r3, #7
 8004dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004de6:	e003      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dfe:	2300      	movs	r3, #0
 8004e00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d04d      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e18:	d028      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e1e:	d821      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e24:	d024      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e2a:	d81b      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e30:	d00e      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e36:	d815      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d110      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e42:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e4e:	e012      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e54:	332c      	adds	r3, #44	@ 0x2c
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 f900 	bl	800705c <RCCEx_PLL3_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e62:	e008      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e6a:	e004      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e002      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004e74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e76:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e90:	4a02      	ldr	r2, [pc, #8]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e98:	e006      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e9a:	bf00      	nop
 8004e9c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ea4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f000 80b5 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ecc:	4b9d      	ldr	r3, [pc, #628]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	4b9a      	ldr	r3, [pc, #616]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee0:	4a98      	ldr	r2, [pc, #608]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004eea:	4b96      	ldr	r3, [pc, #600]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f02:	4b91      	ldr	r3, [pc, #580]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	4a90      	ldr	r2, [pc, #576]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc f8b1 	bl	8001074 <HAL_GetTick>
 8004f12:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f16:	e00b      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f18:	f7fc f8ac 	bl	8001074 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d903      	bls.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f2e:	e005      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f30:	4b85      	ldr	r3, [pc, #532]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ed      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004f3c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d165      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f44:	4b7f      	ldr	r3, [pc, #508]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d023      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f5e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f6a:	4b76      	ldr	r3, [pc, #472]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f78:	4b72      	ldr	r3, [pc, #456]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7e:	4a71      	ldr	r2, [pc, #452]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f88:	4b6e      	ldr	r3, [pc, #440]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f98:	4a6a      	ldr	r2, [pc, #424]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d019      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fc f861 	bl	8001074 <HAL_GetTick>
 8004fb2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb6:	e00d      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fc f85c 	bl	8001074 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004fd2:	e006      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ea      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004fe2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004fea:	4b56      	ldr	r3, [pc, #344]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ffc:	4a51      	ldr	r2, [pc, #324]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ffe:	430b      	orrs	r3, r1
 8005000:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005004:	e008      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005006:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800500a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005014:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005018:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005020:	4b48      	ldr	r3, [pc, #288]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005026:	4a47      	ldr	r2, [pc, #284]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005028:	f023 0304 	bic.w	r3, r3, #4
 800502c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800503c:	643b      	str	r3, [r7, #64]	@ 0x40
 800503e:	2300      	movs	r3, #0
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
 8005042:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d042      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800504c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005054:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005058:	d022      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800505a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800505e:	d81b      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005064:	d011      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800506a:	d815      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d019      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005074:	d110      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800507a:	3308      	adds	r3, #8
 800507c:	4618      	mov	r0, r3
 800507e:	f001 ff55 	bl	8006f2c <RCCEx_PLL2_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005088:	e00d      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508a:	4b2e      	ldr	r3, [pc, #184]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	4a2d      	ldr	r2, [pc, #180]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005094:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005096:	e006      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800509e:	e002      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80050a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10d      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80050ae:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050b4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050c0:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050c2:	430b      	orrs	r3, r1
 80050c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050c8:	e003      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050ce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d032      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80050ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	d00b      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005100:	d804      	bhi.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510a:	d007      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005112:	e004      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800511c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800511e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005122:	2b00      	cmp	r3, #0
 8005124:	d112      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005126:	4b07      	ldr	r3, [pc, #28]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005128:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800512c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005138:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800513a:	430b      	orrs	r3, r1
 800513c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005140:	e008      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005142:	bf00      	nop
 8005144:	46020c00 	.word	0x46020c00
 8005148:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005150:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005160:	633b      	str	r3, [r7, #48]	@ 0x30
 8005162:	2300      	movs	r3, #0
 8005164:	637b      	str	r3, [r7, #52]	@ 0x34
 8005166:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d019      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800517c:	d105      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800517e:	4b88      	ldr	r3, [pc, #544]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	4a87      	ldr	r2, [pc, #540]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005188:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800518a:	4b85      	ldr	r3, [pc, #532]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800518c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005190:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800519c:	4a80      	ldr	r2, [pc, #512]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b2:	2300      	movs	r3, #0
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d00c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051c0:	4b77      	ldr	r3, [pc, #476]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051d2:	4973      	ldr	r1, [pc, #460]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d00c      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005208:	4965      	ldr	r1, [pc, #404]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d00c      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800522c:	4b5c      	ldr	r3, [pc, #368]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800522e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005232:	f023 0218 	bic.w	r2, r3, #24
 8005236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800523a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800523e:	4958      	ldr	r1, [pc, #352]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800525c:	460b      	mov	r3, r1
 800525e:	4313      	orrs	r3, r2
 8005260:	d032      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800526a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b4b      	ldr	r3, [pc, #300]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	4a4a      	ldr	r2, [pc, #296]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800527c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005284:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005288:	d108      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800528a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800528e:	3308      	adds	r3, #8
 8005290:	4618      	mov	r0, r3
 8005292:	f001 fe4b 	bl	8006f2c <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800529c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80052a4:	4b3e      	ldr	r3, [pc, #248]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052b6:	493a      	ldr	r1, [pc, #232]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80052be:	e003      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80052c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	d03a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80052e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f0:	d00e      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80052f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f6:	d815      	bhi.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80052fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005300:	d110      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005302:	4b27      	ldr	r3, [pc, #156]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	4a26      	ldr	r2, [pc, #152]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800530c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800530e:	e00e      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005314:	3308      	adds	r3, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fe08 	bl	8006f2c <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005322:	e004      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800532c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800532e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005336:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005348:	4915      	ldr	r1, [pc, #84]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005350:	e003      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005356:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800535a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d00c      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005376:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800537c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005384:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005388:	4905      	ldr	r1, [pc, #20]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005390:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005394:	4618      	mov	r0, r3
 8005396:	37e0      	adds	r7, #224	@ 0xe0
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	46020c00 	.word	0x46020c00

080053a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	@ 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80053ac:	4ba6      	ldr	r3, [pc, #664]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80053b6:	4ba4      	ldr	r3, [pc, #656]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80053c0:	4ba1      	ldr	r3, [pc, #644]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3301      	adds	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80053ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80053da:	4b9b      	ldr	r3, [pc, #620]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	08db      	lsrs	r3, r3, #3
 80053e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d062      	beq.n	80054c2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f200 8081 	bhi.w	8005506 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d024      	beq.n	8005454 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d17a      	bne.n	8005506 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b89      	ldr	r3, [pc, #548]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005432:	ed97 6a02 	vldr	s12, [r7, #8]
 8005436:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005452:	e08f      	b.n	8005574 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005454:	4b7c      	ldr	r3, [pc, #496]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005460:	4b79      	ldr	r3, [pc, #484]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	e006      	b.n	800547a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800546c:	4b76      	ldr	r3, [pc, #472]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800546e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	0f1b      	lsrs	r3, r3, #28
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	4a76      	ldr	r2, [pc, #472]	@ (8005654 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80054a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054c0:	e058      	b.n	8005574 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054cc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80054d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80054ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005504:	e036      	b.n	8005574 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005506:	4b50      	ldr	r3, [pc, #320]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005512:	4b4d      	ldr	r3, [pc, #308]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0f1b      	lsrs	r3, r3, #28
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	e006      	b.n	800552c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800551e:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	0f1b      	lsrs	r3, r3, #28
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	4a49      	ldr	r2, [pc, #292]	@ (8005654 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a02 	vldr	s12, [r7, #8]
 8005556:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005572:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005574:	4b34      	ldr	r3, [pc, #208]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005580:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005584:	0a5b      	lsrs	r3, r3, #9
 8005586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005596:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800559a:	edd7 6a07 	vldr	s13, [r7, #28]
 800559e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a6:	ee17 2a90 	vmov	r2, s15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80055b6:	4b24      	ldr	r3, [pc, #144]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055c2:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80055d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055d8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e8:	ee17 2a90 	vmov	r2, s15
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d017      	beq.n	8005634 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005604:	4b10      	ldr	r3, [pc, #64]	@ (8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800561a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800561e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005632:	e002      	b.n	800563a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
}
 800563a:	bf00      	nop
 800563c:	3724      	adds	r7, #36	@ 0x24
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	46020c00 	.word	0x46020c00
 800564c:	4b742400 	.word	0x4b742400
 8005650:	46000000 	.word	0x46000000
 8005654:	08008b68 	.word	0x08008b68

08005658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	@ 0x24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005660:	4ba6      	ldr	r3, [pc, #664]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800566a:	4ba4      	ldr	r3, [pc, #656]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005674:	4ba1      	ldr	r3, [pc, #644]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3301      	adds	r3, #1
 8005680:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005682:	4b9e      	ldr	r3, [pc, #632]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800568e:	4b9b      	ldr	r3, [pc, #620]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d062      	beq.n	8005776 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	f200 8081 	bhi.w	80057ba <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d024      	beq.n	8005708 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d17a      	bne.n	80057ba <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b89      	ldr	r3, [pc, #548]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80056e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ea:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005706:	e08f      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005708:	4b7c      	ldr	r3, [pc, #496]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005714:	4b79      	ldr	r3, [pc, #484]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	0f1b      	lsrs	r3, r3, #28
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	e006      	b.n	800572e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005720:	4b76      	ldr	r3, [pc, #472]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	0f1b      	lsrs	r3, r3, #28
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	4a76      	ldr	r2, [pc, #472]	@ (8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005754:	ed97 6a02 	vldr	s12, [r7, #8]
 8005758:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800575c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005768:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800576c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005774:	e058      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005780:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005788:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005798:	ed97 6a02 	vldr	s12, [r7, #8]
 800579c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80057a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80057a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b8:	e036      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80057ba:	4b50      	ldr	r3, [pc, #320]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80057c6:	4b4d      	ldr	r3, [pc, #308]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0f1b      	lsrs	r3, r3, #28
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80057d2:	4b4a      	ldr	r3, [pc, #296]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	4a49      	ldr	r2, [pc, #292]	@ (8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a02 	vldr	s12, [r7, #8]
 800580a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005826:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005828:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005834:	4b31      	ldr	r3, [pc, #196]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	0a5b      	lsrs	r3, r3, #9
 800583a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800584a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800584e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585a:	ee17 2a90 	vmov	r2, s15
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e002      	b.n	800586a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800586a:	4b24      	ldr	r3, [pc, #144]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005876:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800588c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005890:	edd7 6a07 	vldr	s13, [r7, #28]
 8005894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800589c:	ee17 2a90 	vmov	r2, s15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	e002      	b.n	80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80058ac:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d017      	beq.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058b8:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	0e1b      	lsrs	r3, r3, #24
 80058be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80058ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058de:	ee17 2a90 	vmov	r2, s15
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058e6:	e002      	b.n	80058ee <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
}
 80058ee:	bf00      	nop
 80058f0:	3724      	adds	r7, #36	@ 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	46020c00 	.word	0x46020c00
 8005900:	4b742400 	.word	0x4b742400
 8005904:	46000000 	.word	0x46000000
 8005908:	08008b68 	.word	0x08008b68

0800590c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	@ 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005914:	4ba6      	ldr	r3, [pc, #664]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800591e:	4ba4      	ldr	r3, [pc, #656]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005928:	4ba1      	ldr	r3, [pc, #644]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	3301      	adds	r3, #1
 8005934:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005936:	4b9e      	ldr	r3, [pc, #632]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005942:	4b9b      	ldr	r3, [pc, #620]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d062      	beq.n	8005a2a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b03      	cmp	r3, #3
 8005968:	f200 8081 	bhi.w	8005a6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d024      	beq.n	80059bc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d17a      	bne.n	8005a6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b89      	ldr	r3, [pc, #548]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800599a:	ed97 6a02 	vldr	s12, [r7, #8]
 800599e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80059ba:	e08f      	b.n	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80059bc:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80059c8:	4b79      	ldr	r3, [pc, #484]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	0f1b      	lsrs	r3, r3, #28
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	e006      	b.n	80059e2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80059d4:	4b76      	ldr	r3, [pc, #472]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	0f1b      	lsrs	r3, r3, #28
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	4a76      	ldr	r2, [pc, #472]	@ (8005bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80059e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a0c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a28:	e058      	b.n	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a34:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a50:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a6c:	e036      	b.n	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a6e:	4b50      	ldr	r3, [pc, #320]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0f1b      	lsrs	r3, r3, #28
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005a86:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	0f1b      	lsrs	r3, r3, #28
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	4a49      	ldr	r2, [pc, #292]	@ (8005bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005abe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ada:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005adc:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d017      	beq.n	8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ae8:	4b31      	ldr	r3, [pc, #196]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005afe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0e:	ee17 2a90 	vmov	r2, s15
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005b1e:	4b24      	ldr	r3, [pc, #144]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b2a:	4b21      	ldr	r3, [pc, #132]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	0c1b      	lsrs	r3, r3, #16
 8005b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b34:	ee07 3a90 	vmov	s15, r3
 8005b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005b3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b40:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b50:	ee17 2a90 	vmov	r2, s15
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005b60:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d017      	beq.n	8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b6c:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	0e1b      	lsrs	r3, r3, #24
 8005b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b82:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b92:	ee17 2a90 	vmov	r2, s15
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b9a:	e002      	b.n	8005ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
}
 8005ba2:	bf00      	nop
 8005ba4:	3724      	adds	r7, #36	@ 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	46020c00 	.word	0x46020c00
 8005bb4:	4b742400 	.word	0x4b742400
 8005bb8:	46000000 	.word	0x46000000
 8005bbc:	08008b68 	.word	0x08008b68

08005bc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	@ 0x38
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bce:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	d145      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bd6:	4baa      	ldr	r3, [pc, #680]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005be2:	4ba7      	ldr	r3, [pc, #668]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d108      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf6:	d104      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005bf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfe:	f001 b987 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c02:	4b9f      	ldr	r3, [pc, #636]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c10:	d114      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c18:	d110      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c1a:	4b99      	ldr	r3, [pc, #612]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c28:	d103      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005c2a:	23fa      	movs	r3, #250	@ 0xfa
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c2e:	f001 b96f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c32:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005c36:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c38:	f001 b96a 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c3c:	4b90      	ldr	r3, [pc, #576]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c48:	d107      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c50:	d103      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005c52:	4b8c      	ldr	r3, [pc, #560]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c56:	f001 b95b 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5e:	f001 b957 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c66:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	d151      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c6e:	4b84      	ldr	r3, [pc, #528]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c74:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005c78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	2b80      	cmp	r3, #128	@ 0x80
 8005c7e:	d035      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	2b80      	cmp	r3, #128	@ 0x80
 8005c84:	d841      	bhi.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	2b60      	cmp	r3, #96	@ 0x60
 8005c8a:	d02a      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2b60      	cmp	r3, #96	@ 0x60
 8005c90:	d83b      	bhi.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	2b40      	cmp	r3, #64	@ 0x40
 8005c96:	d009      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	2b40      	cmp	r3, #64	@ 0x40
 8005c9c:	d835      	bhi.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d012      	beq.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005caa:	e02e      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fb77 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cba:	f001 b929 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cbe:	f107 0318 	add.w	r3, r7, #24
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fcc8 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ccc:	f001 b920 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd0:	f107 030c 	add.w	r3, r7, #12
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fe19 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cde:	f001 b917 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ce2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ce6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ce8:	f001 b912 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cec:	4b64      	ldr	r3, [pc, #400]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf8:	d103      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005cfa:	4b63      	ldr	r3, [pc, #396]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cfe:	f001 b907 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d06:	f001 b903 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d0e:	f001 b8ff 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d16:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	d158      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d1e:	4b58      	ldr	r3, [pc, #352]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d30:	d03b      	beq.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d38:	d846      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d40:	d02e      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d48:	d83e      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d00b      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d58:	d836      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d66:	d012      	beq.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005d68:	e02e      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fb18 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d78:	f001 b8ca 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d7c:	f107 0318 	add.w	r3, r7, #24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fc69 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d8a:	f001 b8c1 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fdba 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d9c:	f001 b8b8 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005da0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005da6:	f001 b8b3 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005daa:	4b35      	ldr	r3, [pc, #212]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db6:	d103      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005db8:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005dba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dbc:	f001 b8a8 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dc4:	f001 b8a4 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dcc:	f001 b8a0 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	d16e      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005ddc:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005de2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005de6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005dee:	d034      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005df6:	d85c      	bhi.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfe:	d00b      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e06:	d854      	bhi.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d016      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e14:	d009      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005e16:	e04c      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fac1 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e26:	f001 b873 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fc12 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e38:	f001 b86a 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005e3c:	4b10      	ldr	r3, [pc, #64]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e48:	d103      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005e4a:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e4e:	f001 b85f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e56:	f001 b85b 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e5a:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d121      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005e72:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	e00f      	b.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005e7e:	bf00      	nop
 8005e80:	46020c00 	.word	0x46020c00
 8005e84:	0007a120 	.word	0x0007a120
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	02dc6c00 	.word	0x02dc6c00
 8005e90:	4ba7      	ldr	r3, [pc, #668]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	0e1b      	lsrs	r3, r3, #24
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	4aa5      	ldr	r2, [pc, #660]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ea6:	f001 b833 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eae:	f001 b82f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb6:	f001 b82b 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ebe:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	d17f      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005ec6:	4b9a      	ldr	r3, [pc, #616]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ec8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d165      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005ed8:	4b95      	ldr	r3, [pc, #596]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ede:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005ee2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005eea:	d034      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ef2:	d853      	bhi.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005efa:	d00b      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f02:	d84b      	bhi.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f10:	d009      	beq.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005f12:	e043      	b.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fa43 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f22:	f000 bff5 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f26:	f107 0318 	add.w	r3, r7, #24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fb94 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f34:	f000 bfec 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f38:	4b7d      	ldr	r3, [pc, #500]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f44:	d103      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005f46:	4b7c      	ldr	r3, [pc, #496]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005f48:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005f4a:	f000 bfe1 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f52:	f000 bfdd 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f56:	4b76      	ldr	r3, [pc, #472]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d118      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f62:	4b73      	ldr	r3, [pc, #460]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005f6e:	4b70      	ldr	r3, [pc, #448]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0e1b      	lsrs	r3, r3, #24
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	0e1b      	lsrs	r3, r3, #24
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4a6a      	ldr	r2, [pc, #424]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005f90:	f000 bfbe 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f98:	f000 bfba 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005fa0:	f000 bfb6 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005faa:	d108      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff f9f7 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fba:	f000 bfa9 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc2:	f000 bfa5 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fca:	1e51      	subs	r1, r2, #1
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	d136      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005fd0:	4b57      	ldr	r3, [pc, #348]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005fe2:	f7fe fb8d 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8005fe6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005fe8:	f000 bf92 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d104      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fe fa55 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8005ff6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ff8:	f000 bf8a 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006008:	d106      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	2b02      	cmp	r3, #2
 800600e:	d103      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006010:	4b4a      	ldr	r3, [pc, #296]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
 8006014:	f000 bf7c 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006018:	4b45      	ldr	r3, [pc, #276]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800601a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	2b03      	cmp	r3, #3
 800602a:	d104      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800602c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34
 8006032:	f000 bf6d 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34
 800603a:	f000 bf69 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800603e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006042:	1e91      	subs	r1, r2, #2
 8006044:	430b      	orrs	r3, r1
 8006046:	d136      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006048:	4b39      	ldr	r3, [pc, #228]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800604a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800605a:	f7fe fb3d 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 800605e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006060:	f000 bf56 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	2b04      	cmp	r3, #4
 8006068:	d104      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800606a:	f7fe fa19 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800606e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006070:	f000 bf4e 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006074:	4b2e      	ldr	r3, [pc, #184]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006080:	d106      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2b08      	cmp	r3, #8
 8006086:	d103      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006088:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	f000 bf40 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006090:	4b27      	ldr	r3, [pc, #156]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d107      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d104      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80060a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	f000 bf31 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b2:	f000 bf2d 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80060b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ba:	1f11      	subs	r1, r2, #4
 80060bc:	430b      	orrs	r3, r1
 80060be:	d13f      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80060c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060d2:	f7fe fb01 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80060d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80060d8:	f000 bf1a 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d104      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fe f9dd 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 80060e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80060e8:	f000 bf12 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80060ec:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f8:	d106      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d103      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006100:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
 8006104:	f000 bf04 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800610a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b02      	cmp	r3, #2
 8006114:	d107      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	2b30      	cmp	r3, #48	@ 0x30
 800611a:	d104      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800611c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
 8006122:	f000 bef5 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
 800612a:	f000 bef1 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800612e:	bf00      	nop
 8006130:	46020c00 	.word	0x46020c00
 8006134:	08008b68 	.word	0x08008b68
 8006138:	02dc6c00 	.word	0x02dc6c00
 800613c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006144:	f1a2 0108 	sub.w	r1, r2, #8
 8006148:	430b      	orrs	r3, r1
 800614a:	d136      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800614c:	4ba4      	ldr	r3, [pc, #656]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800614e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006156:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800615e:	f7fe fabb 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8006162:	6378      	str	r0, [r7, #52]	@ 0x34
 8006164:	f000 bed4 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d104      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe f997 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006172:	6378      	str	r0, [r7, #52]	@ 0x34
 8006174:	f000 becc 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006178:	4b99      	ldr	r3, [pc, #612]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006184:	d106      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2b80      	cmp	r3, #128	@ 0x80
 800618a:	d103      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800618c:	4b95      	ldr	r3, [pc, #596]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	f000 bebe 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006194:	4b92      	ldr	r3, [pc, #584]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d107      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a6:	d104      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80061a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ae:	f000 beaf 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b6:	f000 beab 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80061ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061be:	f1a2 0110 	sub.w	r1, r2, #16
 80061c2:	430b      	orrs	r3, r1
 80061c4:	d139      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80061c6:	4b86      	ldr	r3, [pc, #536]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fe fa7e 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80061dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80061de:	f000 be97 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e8:	d104      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061ea:	f7fe f959 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 80061ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80061f0:	f000 be8e 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80061f4:	4b7a      	ldr	r3, [pc, #488]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006208:	d103      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800620a:	4b76      	ldr	r3, [pc, #472]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
 800620e:	f000 be7f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006212:	4b73      	ldr	r3, [pc, #460]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d108      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006226:	d104      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006228:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
 800622e:	f000 be6f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
 8006236:	f000 be6b 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800623a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623e:	f1a2 0120 	sub.w	r1, r2, #32
 8006242:	430b      	orrs	r3, r1
 8006244:	d158      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006246:	4b66      	ldr	r3, [pc, #408]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006258:	f7fe fa66 	bl	8004728 <HAL_RCC_GetPCLK3Freq>
 800625c:	6378      	str	r0, [r7, #52]	@ 0x34
 800625e:	f000 be57 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	d104      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006268:	f7fe f91a 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800626c:	6378      	str	r0, [r7, #52]	@ 0x34
 800626e:	f000 be4f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006272:	4b5b      	ldr	r3, [pc, #364]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d106      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	2b02      	cmp	r3, #2
 8006284:	d103      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006286:	4b57      	ldr	r3, [pc, #348]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 be41 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800628e:	4b54      	ldr	r3, [pc, #336]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d107      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d104      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a8:	f000 be32 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80062ac:	4b4c      	ldr	r3, [pc, #304]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d11b      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d118      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062be:	4b48      	ldr	r3, [pc, #288]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80062ca:	4b45      	ldr	r3, [pc, #276]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0e1b      	lsrs	r3, r3, #24
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	e006      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80062d6:	4b42      	ldr	r3, [pc, #264]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	0e1b      	lsrs	r3, r3, #24
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	4a40      	ldr	r2, [pc, #256]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80062e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ec:	f000 be10 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f4:	f000 be0c 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80062f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062fc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006300:	430b      	orrs	r3, r1
 8006302:	d173      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006304:	4b36      	ldr	r3, [pc, #216]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800630a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800630e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d104      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006318:	f7fe f8c2 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800631c:	6378      	str	r0, [r7, #52]	@ 0x34
 800631e:	f000 bdf7 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006328:	d108      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff f992 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
 8006338:	f000 bdea 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006342:	f7fe f9af 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8006346:	6378      	str	r0, [r7, #52]	@ 0x34
 8006348:	f000 bde2 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006352:	d122      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006354:	4b22      	ldr	r3, [pc, #136]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b20      	cmp	r3, #32
 800635e:	d118      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006360:	4b1f      	ldr	r3, [pc, #124]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800636c:	4b1c      	ldr	r3, [pc, #112]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	0e1b      	lsrs	r3, r3, #24
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	e006      	b.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006378:	4b19      	ldr	r3, [pc, #100]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800637a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	0e1b      	lsrs	r3, r3, #24
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	4a18      	ldr	r2, [pc, #96]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
 800638e:	f000 bdbf 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
 8006396:	f000 bdbb 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800639a:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a6:	d107      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ae:	d103      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b4:	f000 bdac 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80063b8:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c4:	d107      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063cc:	d103      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80063ce:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d2:	f000 bd9d 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063da:	f000 bd99 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80063de:	bf00      	nop
 80063e0:	46020c00 	.word	0x46020c00
 80063e4:	00f42400 	.word	0x00f42400
 80063e8:	08008b68 	.word	0x08008b68
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80063ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80063f4:	430b      	orrs	r3, r1
 80063f6:	d158      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80063f8:	4bad      	ldr	r3, [pc, #692]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	2b04      	cmp	r3, #4
 8006408:	d84b      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006449 	.word	0x08006449
 8006414:	08006425 	.word	0x08006425
 8006418:	08006437 	.word	0x08006437
 800641c:	08006453 	.word	0x08006453
 8006420:	0800645d 	.word	0x0800645d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe ffbb 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006432:	f000 bd6d 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006436:	f107 030c 	add.w	r3, r7, #12
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fa66 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006444:	f000 bd64 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006448:	f7fe f92c 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 800644c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800644e:	f000 bd5f 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006452:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006458:	f000 bd5a 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800645c:	4b94      	ldr	r3, [pc, #592]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b20      	cmp	r3, #32
 8006466:	d118      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006468:	4b91      	ldr	r3, [pc, #580]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006474:	4b8e      	ldr	r3, [pc, #568]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	e006      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006480:	4b8b      	ldr	r3, [pc, #556]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	0e1b      	lsrs	r3, r3, #24
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	4a89      	ldr	r2, [pc, #548]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006496:	f000 bd3b 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800649e:	f000 bd37 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064a6:	f000 bd33 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80064aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ae:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80064b2:	430b      	orrs	r3, r1
 80064b4:	d167      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80064b6:	4b7e      	ldr	r3, [pc, #504]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80064c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064c8:	d036      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064d0:	d855      	bhi.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064d8:	d029      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064e0:	d84d      	bhi.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e8:	d013      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f0:	d845      	bhi.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d015      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fe:	d13e      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe ff4d 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800650e:	f000 bcff 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006512:	f107 030c 	add.w	r3, r7, #12
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff f9f8 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006520:	f000 bcf6 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006524:	f7fe f8be 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8006528:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800652a:	f000 bcf1 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800652e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006534:	f000 bcec 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006538:	4b5d      	ldr	r3, [pc, #372]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d118      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006544:	4b5a      	ldr	r3, [pc, #360]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006550:	4b57      	ldr	r3, [pc, #348]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	0e1b      	lsrs	r3, r3, #24
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	e006      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800655c:	4b54      	ldr	r3, [pc, #336]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800655e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	0e1b      	lsrs	r3, r3, #24
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	4a52      	ldr	r2, [pc, #328]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006572:	f000 bccd 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800657a:	f000 bcc9 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006582:	f000 bcc5 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800658e:	430b      	orrs	r3, r1
 8006590:	d14c      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006592:	4b47      	ldr	r3, [pc, #284]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006598:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800659c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe f898 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80065a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80065aa:	f000 bcb1 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b4:	d104      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fd ff73 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 80065ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80065bc:	f000 bca8 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80065c0:	4b3b      	ldr	r3, [pc, #236]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d4:	d103      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80065d6:	4b38      	ldr	r3, [pc, #224]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065da:	f000 bc99 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80065de:	4b34      	ldr	r3, [pc, #208]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d11c      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f0:	d118      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065f2:	4b2f      	ldr	r3, [pc, #188]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80065fe:	4b2c      	ldr	r3, [pc, #176]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0e1b      	lsrs	r3, r3, #24
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	e006      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800660a:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800660c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	0e1b      	lsrs	r3, r3, #24
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	4a26      	ldr	r2, [pc, #152]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800661a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006620:	f000 bc76 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34
 8006628:	f000 bc72 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800662c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006630:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006634:	430b      	orrs	r3, r1
 8006636:	d152      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006638:	4b1d      	ldr	r3, [pc, #116]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006642:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fe f845 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 800664e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006650:	f000 bc5e 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800665a:	d104      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800665c:	f7fd ff20 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006660:	6378      	str	r0, [r7, #52]	@ 0x34
 8006662:	f000 bc55 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006666:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006672:	d107      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800667a:	d103      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800667c:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	f000 bc46 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006684:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b20      	cmp	r3, #32
 800668e:	d122      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006696:	d11e      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80066a4:	4b02      	ldr	r3, [pc, #8]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	e00c      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80066b0:	46020c00 	.word	0x46020c00
 80066b4:	08008b68 	.word	0x08008b68
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	0e1b      	lsrs	r3, r3, #24
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	4a9f      	ldr	r2, [pc, #636]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d2:	f000 bc1d 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066da:	f000 bc19 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80066de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80066e6:	430b      	orrs	r3, r1
 80066e8:	d151      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066ea:	4b96      	ldr	r3, [pc, #600]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80066fa:	d024      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006700:	d842      	bhi.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d00d      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	2b80      	cmp	r3, #128	@ 0x80
 800670c:	d83c      	bhi.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d011      	beq.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800671a:	e035      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800671c:	f7fe f804 	bl	8004728 <HAL_RCC_GetPCLK3Freq>
 8006720:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006722:	e3f5      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006724:	4b87      	ldr	r3, [pc, #540]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	d102      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006732:	4b86      	ldr	r3, [pc, #536]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006736:	e3eb      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800673c:	e3e8      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800673e:	f7fd feaf 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006742:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006744:	e3e4      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006746:	4b7f      	ldr	r3, [pc, #508]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d117      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006752:	4b7c      	ldr	r3, [pc, #496]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800675e:	4b79      	ldr	r3, [pc, #484]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800676a:	4b76      	ldr	r3, [pc, #472]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800676c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006770:	041b      	lsls	r3, r3, #16
 8006772:	0e1b      	lsrs	r3, r3, #24
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	4a73      	ldr	r2, [pc, #460]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800677a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006780:	e3c6      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006786:	e3c3      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800678c:	e3c0      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800678e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006792:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006796:	430b      	orrs	r3, r1
 8006798:	d147      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800679a:	4b6a      	ldr	r3, [pc, #424]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800679c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fd ff94 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80067b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067b2:	e3ad      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ba:	d103      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067bc:	f7fd fe70 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 80067c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067c2:	e3a5      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80067c4:	4b5f      	ldr	r3, [pc, #380]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d0:	d106      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d8:	d102      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80067da:	4b5c      	ldr	r3, [pc, #368]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067de:	e397      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80067e0:	4b58      	ldr	r3, [pc, #352]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d11b      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067f2:	d117      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067f4:	4b53      	ldr	r3, [pc, #332]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006800:	4b50      	ldr	r3, [pc, #320]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	0e1b      	lsrs	r3, r3, #24
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	e006      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800680c:	4b4d      	ldr	r3, [pc, #308]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800680e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	4a4b      	ldr	r2, [pc, #300]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
 8006822:	e375      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
 8006828:	e372      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800682a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006832:	430b      	orrs	r3, r1
 8006834:	d164      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006836:	4b43      	ldr	r3, [pc, #268]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800683c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006840:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d120      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006848:	4b3e      	ldr	r3, [pc, #248]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b20      	cmp	r3, #32
 8006852:	d117      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006854:	4b3b      	ldr	r3, [pc, #236]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006860:	4b38      	ldr	r3, [pc, #224]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	0e1b      	lsrs	r3, r3, #24
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	e006      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800686c:	4b35      	ldr	r3, [pc, #212]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800686e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	0e1b      	lsrs	r3, r3, #24
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	4a33      	ldr	r2, [pc, #204]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
 8006882:	e345      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	e342      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800688a:	4b2e      	ldr	r3, [pc, #184]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006898:	d112      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a0:	d10e      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a2:	4b28      	ldr	r3, [pc, #160]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b0:	d102      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80068b2:	23fa      	movs	r3, #250	@ 0xfa
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068b6:	e32b      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80068b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068be:	e327      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80068c0:	4b20      	ldr	r3, [pc, #128]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068cc:	d106      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d102      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80068d6:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068da:	e319      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80068dc:	4b19      	ldr	r3, [pc, #100]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d107      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f0:	d103      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80068f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f8:	e30a      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fe:	e307      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006908:	430b      	orrs	r3, r1
 800690a:	d16b      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800690c:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800690e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006912:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	d127      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800691e:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d11e      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800692a:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006936:	4b03      	ldr	r3, [pc, #12]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0e1b      	lsrs	r3, r3, #24
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	e00d      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006942:	bf00      	nop
 8006944:	46020c00 	.word	0x46020c00
 8006948:	08008b68 	.word	0x08008b68
 800694c:	00f42400 	.word	0x00f42400
 8006950:	4b94      	ldr	r3, [pc, #592]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	4a92      	ldr	r2, [pc, #584]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
 8006966:	e2d3      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	637b      	str	r3, [r7, #52]	@ 0x34
 800696c:	e2d0      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800696e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800697c:	d112      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006984:	d10e      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006986:	4b87      	ldr	r3, [pc, #540]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006994:	d102      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006996:	23fa      	movs	r3, #250	@ 0xfa
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800699a:	e2b9      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800699c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069a2:	e2b5      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80069a4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b0:	d106      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b8:	d102      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80069ba:	4b7c      	ldr	r3, [pc, #496]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069be:	e2a7      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80069c0:	4b78      	ldr	r3, [pc, #480]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d4:	d103      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
 80069dc:	e298      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e2:	e295      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80069ec:	430b      	orrs	r3, r1
 80069ee:	d147      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069f0:	4b6c      	ldr	r3, [pc, #432]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80069fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d103      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a02:	f7fd fe69 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8006a06:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a08:	e282      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006a0a:	4b66      	ldr	r3, [pc, #408]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a18:	d112      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a20:	d10e      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a22:	4b60      	ldr	r3, [pc, #384]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a30:	d102      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006a32:	23fa      	movs	r3, #250	@ 0xfa
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a36:	e26b      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a3e:	e267      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006a40:	4b58      	ldr	r3, [pc, #352]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a54:	d102      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006a56:	4b55      	ldr	r3, [pc, #340]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	e259      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006a5c:	4b51      	ldr	r3, [pc, #324]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d107      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a70:	d103      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a78:	e24a      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7e:	e247      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a84:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	d12d      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006a8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a92:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006a96:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006a98:	4b42      	ldr	r3, [pc, #264]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa4:	d105      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006aac:	4b3f      	ldr	r3, [pc, #252]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab0:	e22e      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab8:	d107      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fc70 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	e222      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad2:	f107 0318 	add.w	r3, r7, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fdbe 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae0:	e216      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae6:	e213      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aec:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006af0:	430b      	orrs	r3, r1
 8006af2:	d15d      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006af4:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006afa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006afe:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b06:	d028      	beq.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b0e:	d845      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b16:	d013      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b1e:	d83d      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2c:	d004      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006b2e:	e035      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006b30:	f7fd fde6 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8006b34:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b36:	e1eb      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b38:	f7fd fcb2 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006b3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b3e:	e1e7      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b40:	4b18      	ldr	r3, [pc, #96]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4c:	d102      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006b4e:	4b17      	ldr	r3, [pc, #92]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b52:	e1dd      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b58:	e1da      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d117      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	0e1b      	lsrs	r3, r3, #24
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	e006      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006b7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	0e1b      	lsrs	r3, r3, #24
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	4a06      	ldr	r2, [pc, #24]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b94:	e1bc      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b9a:	e1b9      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba0:	e1b6      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006ba2:	bf00      	nop
 8006ba4:	46020c00 	.word	0x46020c00
 8006ba8:	08008b68 	.word	0x08008b68
 8006bac:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	d156      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006bbc:	4ba5      	ldr	r3, [pc, #660]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bce:	d028      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bd6:	d845      	bhi.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bde:	d013      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006be6:	d83d      	bhi.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf4:	d004      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006bf6:	e035      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006bf8:	f7fd fd6e 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8006bfc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bfe:	e187      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006c00:	f7fd fc4e 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006c04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c06:	e183      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c08:	4b92      	ldr	r3, [pc, #584]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006c16:	4b90      	ldr	r3, [pc, #576]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c1a:	e179      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c20:	e176      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c22:	4b8c      	ldr	r3, [pc, #560]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d117      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c2e:	4b89      	ldr	r3, [pc, #548]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006c3a:	4b86      	ldr	r3, [pc, #536]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	0e1b      	lsrs	r3, r3, #24
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	e006      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006c46:	4b83      	ldr	r3, [pc, #524]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	0e1b      	lsrs	r3, r3, #24
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	4a81      	ldr	r2, [pc, #516]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c5c:	e158      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c62:	e155      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c68:	e152      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006c6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006c72:	430b      	orrs	r3, r1
 8006c74:	d177      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006c76:	4b77      	ldr	r3, [pc, #476]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c7c:	f003 0318 	and.w	r3, r3, #24
 8006c80:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2b18      	cmp	r3, #24
 8006c86:	d86b      	bhi.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006d61 	.word	0x08006d61
 8006c98:	08006d61 	.word	0x08006d61
 8006c9c:	08006d61 	.word	0x08006d61
 8006ca0:	08006d61 	.word	0x08006d61
 8006ca4:	08006d61 	.word	0x08006d61
 8006ca8:	08006d61 	.word	0x08006d61
 8006cac:	08006d61 	.word	0x08006d61
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006d61 	.word	0x08006d61
 8006cb8:	08006d61 	.word	0x08006d61
 8006cbc:	08006d61 	.word	0x08006d61
 8006cc0:	08006d61 	.word	0x08006d61
 8006cc4:	08006d61 	.word	0x08006d61
 8006cc8:	08006d61 	.word	0x08006d61
 8006ccc:	08006d61 	.word	0x08006d61
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d61 	.word	0x08006d61
 8006cd8:	08006d61 	.word	0x08006d61
 8006cdc:	08006d61 	.word	0x08006d61
 8006ce0:	08006d61 	.word	0x08006d61
 8006ce4:	08006d61 	.word	0x08006d61
 8006ce8:	08006d61 	.word	0x08006d61
 8006cec:	08006d61 	.word	0x08006d61
 8006cf0:	08006d1f 	.word	0x08006d1f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006cf4:	f7fd fd18 	bl	8004728 <HAL_RCC_GetPCLK3Freq>
 8006cf8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006cfa:	e109      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006cfc:	f7fd fbd0 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006d00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d02:	e105      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d04:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d102      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006d12:	4b51      	ldr	r3, [pc, #324]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d16:	e0fb      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d1c:	e0f8      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d117      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006d36:	4b47      	ldr	r3, [pc, #284]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	0e1b      	lsrs	r3, r3, #24
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	e006      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006d42:	4b44      	ldr	r3, [pc, #272]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	0e1b      	lsrs	r3, r3, #24
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	4a42      	ldr	r2, [pc, #264]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d58:	e0da      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5e:	e0d7      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d64:	e0d4      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006d6e:	430b      	orrs	r3, r1
 8006d70:	d155      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006d72:	4b38      	ldr	r3, [pc, #224]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d84:	d013      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d8c:	d844      	bhi.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d94:	d013      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d9c:	d83c      	bhi.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d014      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006daa:	d014      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006dac:	e034      	b.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dae:	f107 0318 	add.w	r3, r7, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fc50 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dbc:	e0a8      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe faee 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dcc:	e0a0      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fd fb67 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006dd2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dd4:	e09c      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d117      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006de2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006dee:	4b19      	ldr	r3, [pc, #100]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	0e1b      	lsrs	r3, r3, #24
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006dfa:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	0e1b      	lsrs	r3, r3, #24
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	4a14      	ldr	r2, [pc, #80]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e10:	e07e      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e16:	e07b      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1c:	e078      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e22:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006e26:	430b      	orrs	r3, r1
 8006e28:	d138      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006e36:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e50:	e05e      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006e52:	bf00      	nop
 8006e54:	46020c00 	.word	0x46020c00
 8006e58:	00f42400 	.word	0x00f42400
 8006e5c:	08008b68 	.word	0x08008b68
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006e60:	4b2e      	ldr	r3, [pc, #184]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e6e:	d112      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e76:	d10e      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e78:	4b28      	ldr	r3, [pc, #160]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006e88:	23fa      	movs	r3, #250	@ 0xfa
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e8c:	e040      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e92:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e94:	e03c      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9a:	e039      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	d131      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006eaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006eb2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006eb4:	4b19      	ldr	r3, [pc, #100]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006ec8:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	e020      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006ece:	4b13      	ldr	r3, [pc, #76]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eda:	d106      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee2:	d102      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee8:	e012      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006eea:	4b0c      	ldr	r3, [pc, #48]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006efe:	d102      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006f00:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f04:	e004      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0a:	e001      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3738      	adds	r7, #56	@ 0x38
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	46020c00 	.word	0x46020c00
 8006f20:	02dc6c00 	.word	0x02dc6c00
 8006f24:	016e3600 	.word	0x016e3600
 8006f28:	00f42400 	.word	0x00f42400

08006f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006f34:	4b47      	ldr	r3, [pc, #284]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a46      	ldr	r2, [pc, #280]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f40:	f7fa f898 	bl	8001074 <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f46:	e008      	b.n	8006f5a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f48:	f7fa f894 	bl	8001074 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e077      	b.n	800704a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006f66:	4b3b      	ldr	r3, [pc, #236]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6852      	ldr	r2, [r2, #4]
 8006f7a:	3a01      	subs	r2, #1
 8006f7c:	0212      	lsls	r2, r2, #8
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	4934      	ldr	r1, [pc, #208]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006f86:	4b33      	ldr	r3, [pc, #204]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f8a:	4b33      	ldr	r3, [pc, #204]	@ (8007058 <RCCEx_PLL2_Config+0x12c>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6892      	ldr	r2, [r2, #8]
 8006f92:	3a01      	subs	r2, #1
 8006f94:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68d2      	ldr	r2, [r2, #12]
 8006f9c:	3a01      	subs	r2, #1
 8006f9e:	0252      	lsls	r2, r2, #9
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	4311      	orrs	r1, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6912      	ldr	r2, [r2, #16]
 8006fa8:	3a01      	subs	r2, #1
 8006faa:	0412      	lsls	r2, r2, #16
 8006fac:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006fb0:	4311      	orrs	r1, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6952      	ldr	r2, [r2, #20]
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	0612      	lsls	r2, r2, #24
 8006fba:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	4924      	ldr	r1, [pc, #144]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006fc6:	4b23      	ldr	r3, [pc, #140]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	f023 020c 	bic.w	r2, r3, #12
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	4920      	ldr	r1, [pc, #128]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	491c      	ldr	r1, [pc, #112]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	4a1a      	ldr	r2, [pc, #104]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006fec:	f023 0310 	bic.w	r3, r3, #16
 8006ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ff2:	4b18      	ldr	r3, [pc, #96]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ffa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	69d2      	ldr	r2, [r2, #28]
 8007002:	00d2      	lsls	r2, r2, #3
 8007004:	4913      	ldr	r1, [pc, #76]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8007006:	4313      	orrs	r3, r2
 8007008:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800700a:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	4a11      	ldr	r2, [pc, #68]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8007010:	f043 0310 	orr.w	r3, r3, #16
 8007014:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007016:	4b0f      	ldr	r3, [pc, #60]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a0e      	ldr	r2, [pc, #56]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 800701c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007020:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007022:	f7fa f827 	bl	8001074 <HAL_GetTick>
 8007026:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007028:	e008      	b.n	800703c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800702a:	f7fa f823 	bl	8001074 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e006      	b.n	800704a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800703c:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <RCCEx_PLL2_Config+0x128>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0f0      	beq.n	800702a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0

}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	46020c00 	.word	0x46020c00
 8007058:	80800000 	.word	0x80800000

0800705c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007064:	4b47      	ldr	r3, [pc, #284]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a46      	ldr	r2, [pc, #280]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800706a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800706e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007070:	f7fa f800 	bl	8001074 <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007076:	e008      	b.n	800708a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007078:	f7f9 fffc 	bl	8001074 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e077      	b.n	800717a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800708a:	4b3e      	ldr	r3, [pc, #248]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6852      	ldr	r2, [r2, #4]
 80070aa:	3a01      	subs	r2, #1
 80070ac:	0212      	lsls	r2, r2, #8
 80070ae:	430a      	orrs	r2, r1
 80070b0:	4934      	ldr	r1, [pc, #208]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	630b      	str	r3, [r1, #48]	@ 0x30
 80070b6:	4b33      	ldr	r3, [pc, #204]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 80070b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ba:	4b33      	ldr	r3, [pc, #204]	@ (8007188 <RCCEx_PLL3_Config+0x12c>)
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6892      	ldr	r2, [r2, #8]
 80070c2:	3a01      	subs	r2, #1
 80070c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68d2      	ldr	r2, [r2, #12]
 80070cc:	3a01      	subs	r2, #1
 80070ce:	0252      	lsls	r2, r2, #9
 80070d0:	b292      	uxth	r2, r2
 80070d2:	4311      	orrs	r1, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6912      	ldr	r2, [r2, #16]
 80070d8:	3a01      	subs	r2, #1
 80070da:	0412      	lsls	r2, r2, #16
 80070dc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80070e0:	4311      	orrs	r1, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6952      	ldr	r2, [r2, #20]
 80070e6:	3a01      	subs	r2, #1
 80070e8:	0612      	lsls	r2, r2, #24
 80070ea:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80070ee:	430a      	orrs	r2, r1
 80070f0:	4924      	ldr	r1, [pc, #144]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80070f6:	4b23      	ldr	r3, [pc, #140]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	f023 020c 	bic.w	r2, r3, #12
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	4920      	ldr	r1, [pc, #128]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007104:	4313      	orrs	r3, r2
 8007106:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007108:	4b1e      	ldr	r3, [pc, #120]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800710a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	491c      	ldr	r1, [pc, #112]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007112:	4313      	orrs	r3, r2
 8007114:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007116:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	4a1a      	ldr	r2, [pc, #104]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800711c:	f023 0310 	bic.w	r3, r3, #16
 8007120:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007122:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	69d2      	ldr	r2, [r2, #28]
 8007132:	00d2      	lsls	r2, r2, #3
 8007134:	4913      	ldr	r1, [pc, #76]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007136:	4313      	orrs	r3, r2
 8007138:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800713a:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800713c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713e:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007140:	f043 0310 	orr.w	r3, r3, #16
 8007144:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007146:	4b0f      	ldr	r3, [pc, #60]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a0e      	ldr	r2, [pc, #56]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800714c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007150:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007152:	f7f9 ff8f 	bl	8001074 <HAL_GetTick>
 8007156:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007158:	e008      	b.n	800716c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800715a:	f7f9 ff8b 	bl	8001074 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e006      	b.n	800717a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800716c:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <RCCEx_PLL3_Config+0x128>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	46020c00 	.word	0x46020c00
 8007188:	80800000 	.word	0x80800000

0800718c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e042      	b.n	8007224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7f9 fd0d 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2224      	movs	r2, #36	@ 0x24
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9ca 	bl	8007570 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f825 	bl	800722c <UART_SetConfig>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e01b      	b.n	8007224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800720a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa49 	bl	80076b4 <UART_CheckIdleState>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007230:	b094      	sub	sp, #80	@ 0x50
 8007232:	af00      	add	r7, sp, #0
 8007234:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	4b7e      	ldr	r3, [pc, #504]	@ (800743c <UART_SetConfig+0x210>)
 8007242:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	431a      	orrs	r2, r3
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4977      	ldr	r1, [pc, #476]	@ (8007440 <UART_SetConfig+0x214>)
 8007264:	4019      	ands	r1, r3
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800726c:	430b      	orrs	r3, r1
 800726e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	68d9      	ldr	r1, [r3, #12]
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	ea40 0301 	orr.w	r3, r0, r1
 8007286:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b6a      	ldr	r3, [pc, #424]	@ (800743c <UART_SetConfig+0x210>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d009      	beq.n	80072ac <UART_SetConfig+0x80>
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b69      	ldr	r3, [pc, #420]	@ (8007444 <UART_SetConfig+0x218>)
 800729e:	429a      	cmp	r2, r3
 80072a0:	d004      	beq.n	80072ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a8:	4313      	orrs	r3, r2
 80072aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80072b6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	f023 000f 	bic.w	r0, r3, #15
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	ea40 0301 	orr.w	r3, r0, r1
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b59      	ldr	r3, [pc, #356]	@ (8007448 <UART_SetConfig+0x21c>)
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d102      	bne.n	80072ec <UART_SetConfig+0xc0>
 80072e6:	2301      	movs	r3, #1
 80072e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ea:	e029      	b.n	8007340 <UART_SetConfig+0x114>
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b56      	ldr	r3, [pc, #344]	@ (800744c <UART_SetConfig+0x220>)
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d102      	bne.n	80072fc <UART_SetConfig+0xd0>
 80072f6:	2302      	movs	r3, #2
 80072f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072fa:	e021      	b.n	8007340 <UART_SetConfig+0x114>
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b53      	ldr	r3, [pc, #332]	@ (8007450 <UART_SetConfig+0x224>)
 8007302:	429a      	cmp	r2, r3
 8007304:	d102      	bne.n	800730c <UART_SetConfig+0xe0>
 8007306:	2304      	movs	r3, #4
 8007308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800730a:	e019      	b.n	8007340 <UART_SetConfig+0x114>
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b50      	ldr	r3, [pc, #320]	@ (8007454 <UART_SetConfig+0x228>)
 8007312:	429a      	cmp	r2, r3
 8007314:	d102      	bne.n	800731c <UART_SetConfig+0xf0>
 8007316:	2308      	movs	r3, #8
 8007318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800731a:	e011      	b.n	8007340 <UART_SetConfig+0x114>
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b4d      	ldr	r3, [pc, #308]	@ (8007458 <UART_SetConfig+0x22c>)
 8007322:	429a      	cmp	r2, r3
 8007324:	d102      	bne.n	800732c <UART_SetConfig+0x100>
 8007326:	2310      	movs	r3, #16
 8007328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800732a:	e009      	b.n	8007340 <UART_SetConfig+0x114>
 800732c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4b42      	ldr	r3, [pc, #264]	@ (800743c <UART_SetConfig+0x210>)
 8007332:	429a      	cmp	r2, r3
 8007334:	d102      	bne.n	800733c <UART_SetConfig+0x110>
 8007336:	2320      	movs	r3, #32
 8007338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800733a:	e001      	b.n	8007340 <UART_SetConfig+0x114>
 800733c:	2300      	movs	r3, #0
 800733e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b3d      	ldr	r3, [pc, #244]	@ (800743c <UART_SetConfig+0x210>)
 8007346:	429a      	cmp	r2, r3
 8007348:	d005      	beq.n	8007356 <UART_SetConfig+0x12a>
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b3d      	ldr	r3, [pc, #244]	@ (8007444 <UART_SetConfig+0x218>)
 8007350:	429a      	cmp	r2, r3
 8007352:	f040 8085 	bne.w	8007460 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007358:	2200      	movs	r2, #0
 800735a:	623b      	str	r3, [r7, #32]
 800735c:	627a      	str	r2, [r7, #36]	@ 0x24
 800735e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007362:	f7fe fc2d 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007366:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80e8 	beq.w	8007540 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	4a39      	ldr	r2, [pc, #228]	@ (800745c <UART_SetConfig+0x230>)
 8007376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800737a:	461a      	mov	r2, r3
 800737c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4413      	add	r3, r2
 800738e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007390:	429a      	cmp	r2, r3
 8007392:	d305      	bcc.n	80073a0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800739a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800739c:	429a      	cmp	r2, r3
 800739e:	d903      	bls.n	80073a8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073a6:	e048      	b.n	800743a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073aa:	2200      	movs	r2, #0
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	61fa      	str	r2, [r7, #28]
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	4a29      	ldr	r2, [pc, #164]	@ (800745c <UART_SetConfig+0x230>)
 80073b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2200      	movs	r2, #0
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	617a      	str	r2, [r7, #20]
 80073c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073ca:	f7f8 ff55 	bl	8000278 <__aeabi_uldivmod>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	020b      	lsls	r3, r1, #8
 80073e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073e4:	0202      	lsls	r2, r0, #8
 80073e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e8:	6849      	ldr	r1, [r1, #4]
 80073ea:	0849      	lsrs	r1, r1, #1
 80073ec:	2000      	movs	r0, #0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4605      	mov	r5, r0
 80073f2:	eb12 0804 	adds.w	r8, r2, r4
 80073f6:	eb43 0905 	adc.w	r9, r3, r5
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	60fa      	str	r2, [r7, #12]
 8007404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f8 ff34 	bl	8000278 <__aeabi_uldivmod>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4613      	mov	r3, r2
 8007416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741e:	d308      	bcc.n	8007432 <UART_SetConfig+0x206>
 8007420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007426:	d204      	bcs.n	8007432 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	e003      	b.n	800743a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007438:	e082      	b.n	8007540 <UART_SetConfig+0x314>
 800743a:	e081      	b.n	8007540 <UART_SetConfig+0x314>
 800743c:	46002400 	.word	0x46002400
 8007440:	cfff69f3 	.word	0xcfff69f3
 8007444:	56002400 	.word	0x56002400
 8007448:	40013800 	.word	0x40013800
 800744c:	40004400 	.word	0x40004400
 8007450:	40004800 	.word	0x40004800
 8007454:	40004c00 	.word	0x40004c00
 8007458:	40005000 	.word	0x40005000
 800745c:	08008c28 	.word	0x08008c28
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007468:	d13c      	bne.n	80074e4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800746a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800746c:	2200      	movs	r2, #0
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007476:	f7fe fba3 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800747a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d05e      	beq.n	8007540 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	4a39      	ldr	r2, [pc, #228]	@ (800756c <UART_SetConfig+0x340>)
 8007488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748c:	461a      	mov	r2, r3
 800748e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007490:	fbb3 f3f2 	udiv	r3, r3, r2
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d916      	bls.n	80074dc <UART_SetConfig+0x2b0>
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b4:	d212      	bcs.n	80074dc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f023 030f 	bic.w	r3, r3, #15
 80074be:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80074ce:	4313      	orrs	r3, r2
 80074d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80074d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e031      	b.n	8007540 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80074e2:	e02d      	b.n	8007540 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80074e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e6:	2200      	movs	r2, #0
 80074e8:	469a      	mov	sl, r3
 80074ea:	4693      	mov	fp, r2
 80074ec:	4650      	mov	r0, sl
 80074ee:	4659      	mov	r1, fp
 80074f0:	f7fe fb66 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 80074f4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80074f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d021      	beq.n	8007540 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	4a1a      	ldr	r2, [pc, #104]	@ (800756c <UART_SetConfig+0x340>)
 8007502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007506:	461a      	mov	r2, r3
 8007508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750a:	fbb3 f2f2 	udiv	r2, r3, r2
 800750e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	441a      	add	r2, r3
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007522:	2b0f      	cmp	r3, #15
 8007524:	d909      	bls.n	800753a <UART_SetConfig+0x30e>
 8007526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800752c:	d205      	bcs.n	800753a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800752e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007530:	b29a      	uxth	r2, r3
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60da      	str	r2, [r3, #12]
 8007538:	e002      	b.n	8007540 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	2201      	movs	r2, #1
 8007544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	2201      	movs	r2, #1
 800754c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	2200      	movs	r2, #0
 8007554:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2200      	movs	r2, #0
 800755a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800755c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007560:	4618      	mov	r0, r3
 8007562:	3750      	adds	r7, #80	@ 0x50
 8007564:	46bd      	mov	sp, r7
 8007566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756a:	bf00      	nop
 800756c:	08008c28 	.word	0x08008c28

08007570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766e:	d10a      	bne.n	8007686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b098      	sub	sp, #96	@ 0x60
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076c4:	f7f9 fcd6 	bl	8001074 <HAL_GetTick>
 80076c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d12f      	bne.n	8007738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e0:	2200      	movs	r2, #0
 80076e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f88e 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d022      	beq.n	8007738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007706:	653b      	str	r3, [r7, #80]	@ 0x50
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007710:	647b      	str	r3, [r7, #68]	@ 0x44
 8007712:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e6      	bne.n	80076f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e063      	b.n	8007800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b04      	cmp	r3, #4
 8007744:	d149      	bne.n	80077da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007746:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800774e:	2200      	movs	r2, #0
 8007750:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f857 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d03c      	beq.n	80077da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	623b      	str	r3, [r7, #32]
   return(result);
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007780:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800778c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e6      	bne.n	8007760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b2:	61fa      	str	r2, [r7, #28]
 80077b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69b9      	ldr	r1, [r7, #24]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	617b      	str	r3, [r7, #20]
   return(result);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e012      	b.n	8007800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3758      	adds	r7, #88	@ 0x58
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007818:	e04f      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d04b      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007822:	f7f9 fc27 	bl	8001074 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	429a      	cmp	r2, r3
 8007830:	d302      	bcc.n	8007838 <UART_WaitOnFlagUntilTimeout+0x30>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e04e      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d037      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b80      	cmp	r3, #128	@ 0x80
 800784e:	d034      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d031      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d110      	bne.n	8007886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2208      	movs	r2, #8
 800786a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f838 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2208      	movs	r2, #8
 8007876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e029      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007894:	d111      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800789e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f81e 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e00f      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4013      	ands	r3, r2
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d0a0      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b095      	sub	sp, #84	@ 0x54
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007908:	643b      	str	r3, [r7, #64]	@ 0x40
 800790a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800790e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	61fb      	str	r3, [r7, #28]
   return(result);
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e3      	bne.n	800791c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d118      	bne.n	800798e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	60bb      	str	r3, [r7, #8]
   return(result);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f023 0310 	bic.w	r3, r3, #16
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6979      	ldr	r1, [r7, #20]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079a2:	bf00      	nop
 80079a4:	3754      	adds	r7, #84	@ 0x54
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e027      	b.n	8007a14 <HAL_UARTEx_DisableFifoMode+0x66>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2224      	movs	r2, #36	@ 0x24
 80079d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e02d      	b.n	8007a94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2224      	movs	r2, #36	@ 0x24
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f84f 	bl	8007b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e02d      	b.n	8007b10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2224      	movs	r2, #36	@ 0x24
 8007ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f811 	bl	8007b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d108      	bne.n	8007b3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b38:	e031      	b.n	8007b9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b3e:	2308      	movs	r3, #8
 8007b40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	0e5b      	lsrs	r3, r3, #25
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	0f5b      	lsrs	r3, r3, #29
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	7b3a      	ldrb	r2, [r7, #12]
 8007b66:	4911      	ldr	r1, [pc, #68]	@ (8007bac <UARTEx_SetNbDataToProcess+0x94>)
 8007b68:	5c8a      	ldrb	r2, [r1, r2]
 8007b6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b6e:	7b3a      	ldrb	r2, [r7, #12]
 8007b70:	490f      	ldr	r1, [pc, #60]	@ (8007bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	7b7a      	ldrb	r2, [r7, #13]
 8007b84:	4909      	ldr	r1, [pc, #36]	@ (8007bac <UARTEx_SetNbDataToProcess+0x94>)
 8007b86:	5c8a      	ldrb	r2, [r1, r2]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b8c:	7b7a      	ldrb	r2, [r7, #13]
 8007b8e:	4908      	ldr	r1, [pc, #32]	@ (8007bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	08008c40 	.word	0x08008c40
 8007bb0:	08008c48 	.word	0x08008c48

08007bb4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b08b      	sub	sp, #44	@ 0x2c
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	fa93 f3a3 	rbit	r3, r3
 8007bce:	613b      	str	r3, [r7, #16]
  return result;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007bda:	2320      	movs	r3, #32
 8007bdc:	e003      	b.n	8007be6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	fab3 f383 	clz	r3, r3
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	2103      	movs	r1, #3
 8007bea:	fa01 f303 	lsl.w	r3, r1, r3
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	401a      	ands	r2, r3
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	fa93 f3a3 	rbit	r3, r3
 8007bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007c08:	2320      	movs	r3, #32
 8007c0a:	e003      	b.n	8007c14 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	fab3 f383 	clz	r3, r3
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8007c22:	bf00      	nop
 8007c24:	372c      	adds	r7, #44	@ 0x2c
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	605a      	str	r2, [r3, #4]
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b08b      	sub	sp, #44	@ 0x2c
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	fa93 f3a3 	rbit	r3, r3
 8007c78:	613b      	str	r3, [r7, #16]
  return result;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007c84:	2320      	movs	r3, #32
 8007c86:	e003      	b.n	8007c90 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	fab3 f383 	clz	r3, r3
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	2103      	movs	r1, #3
 8007c94:	fa01 f303 	lsl.w	r3, r1, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	fa93 f3a3 	rbit	r3, r3
 8007ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007cb2:	2320      	movs	r3, #32
 8007cb4:	e003      	b.n	8007cbe <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	fab3 f383 	clz	r3, r3
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8007ccc:	bf00      	nop
 8007cce:	372c      	adds	r7, #44	@ 0x2c
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b08b      	sub	sp, #44	@ 0x2c
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	fa93 f3a3 	rbit	r3, r3
 8007cf2:	613b      	str	r3, [r7, #16]
  return result;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007cfe:	2320      	movs	r3, #32
 8007d00:	e003      	b.n	8007d0a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	fab3 f383 	clz	r3, r3
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	2103      	movs	r1, #3
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	401a      	ands	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	fa93 f3a3 	rbit	r3, r3
 8007d20:	61fb      	str	r3, [r7, #28]
  return result;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	e003      	b.n	8007d38 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	fab3 f383 	clz	r3, r3
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d40:	431a      	orrs	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8007d46:	bf00      	nop
 8007d48:	372c      	adds	r7, #44	@ 0x2c
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b08b      	sub	sp, #44	@ 0x2c
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a1a      	ldr	r2, [r3, #32]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	fa93 f3a3 	rbit	r3, r3
 8007d6c:	613b      	str	r3, [r7, #16]
  return result;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007d78:	2320      	movs	r3, #32
 8007d7a:	e003      	b.n	8007d84 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	fab3 f383 	clz	r3, r3
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	210f      	movs	r1, #15
 8007d88:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	fa93 f3a3 	rbit	r3, r3
 8007d9a:	61fb      	str	r3, [r7, #28]
  return result;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007da6:	2320      	movs	r3, #32
 8007da8:	e003      	b.n	8007db2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	fab3 f383 	clz	r3, r3
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8007dc0:	bf00      	nop
 8007dc2:	372c      	adds	r7, #44	@ 0x2c
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b08b      	sub	sp, #44	@ 0x2c
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	fa93 f3a3 	rbit	r3, r3
 8007de8:	613b      	str	r3, [r7, #16]
  return result;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007df4:	2320      	movs	r3, #32
 8007df6:	e003      	b.n	8007e00 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	fab3 f383 	clz	r3, r3
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	210f      	movs	r1, #15
 8007e04:	fa01 f303 	lsl.w	r3, r1, r3
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	fa93 f3a3 	rbit	r3, r3
 8007e18:	61fb      	str	r3, [r7, #28]
  return result;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007e24:	2320      	movs	r3, #32
 8007e26:	e003      	b.n	8007e30 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	fab3 f383 	clz	r3, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8007e3e:	bf00      	nop
 8007e40:	372c      	adds	r7, #44	@ 0x2c
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b08a      	sub	sp, #40	@ 0x28
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	fa93 f3a3 	rbit	r3, r3
 8007e60:	617b      	str	r3, [r7, #20]
  return result;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <LL_GPIO_Init+0x26>
    return 32U;
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	e003      	b.n	8007e78 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	fab3 f383 	clz	r3, r3
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007e7a:	e058      	b.n	8007f2e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	2101      	movs	r1, #1
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	fa01 f303 	lsl.w	r3, r1, r3
 8007e88:	4013      	ands	r3, r2
 8007e8a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d04a      	beq.n	8007f28 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d003      	beq.n	8007ea2 <LL_GPIO_Init+0x58>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d10e      	bne.n	8007ec0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	6a39      	ldr	r1, [r7, #32]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fed7 	bl	8007c5e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff feb7 	bl	8007c2e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6a39      	ldr	r1, [r7, #32]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff05 	bl	8007cd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d121      	bne.n	8007f1a <LL_GPIO_Init+0xd0>
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	fa93 f3a3 	rbit	r3, r3
 8007ee0:	60bb      	str	r3, [r7, #8]
  return result;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <LL_GPIO_Init+0xa6>
    return 32U;
 8007eec:	2320      	movs	r3, #32
 8007eee:	e003      	b.n	8007ef8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	fab3 f383 	clz	r3, r3
 8007ef6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	d807      	bhi.n	8007f0c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6a39      	ldr	r1, [r7, #32]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff ff24 	bl	8007d52 <LL_GPIO_SetAFPin_0_7>
 8007f0a:	e006      	b.n	8007f1a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6a39      	ldr	r1, [r7, #32]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff ff59 	bl	8007dcc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6a39      	ldr	r1, [r7, #32]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fe46 	bl	8007bb4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d19f      	bne.n	8007e7c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	@ 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f46:	b084      	sub	sp, #16
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	f107 001c 	add.w	r0, r7, #28
 8007f54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fd89 	bl	8008a7c <USB_CoreReset>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f82:	e005      	b.n	8007f90 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f9c:	b004      	add	sp, #16
 8007f9e:	4770      	bx	lr

08007fa0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d165      	bne.n	8008080 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4a41      	ldr	r2, [pc, #260]	@ (80080bc <USB_SetTurnaroundTime+0x11c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d906      	bls.n	8007fca <USB_SetTurnaroundTime+0x2a>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4a40      	ldr	r2, [pc, #256]	@ (80080c0 <USB_SetTurnaroundTime+0x120>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d202      	bcs.n	8007fca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007fc4:	230f      	movs	r3, #15
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e062      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80080c0 <USB_SetTurnaroundTime+0x120>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d306      	bcc.n	8007fe0 <USB_SetTurnaroundTime+0x40>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80080c4 <USB_SetTurnaroundTime+0x124>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d202      	bcs.n	8007fe0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007fda:	230e      	movs	r3, #14
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	e057      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4a38      	ldr	r2, [pc, #224]	@ (80080c4 <USB_SetTurnaroundTime+0x124>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d306      	bcc.n	8007ff6 <USB_SetTurnaroundTime+0x56>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4a37      	ldr	r2, [pc, #220]	@ (80080c8 <USB_SetTurnaroundTime+0x128>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d202      	bcs.n	8007ff6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ff0:	230d      	movs	r3, #13
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e04c      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	4a33      	ldr	r2, [pc, #204]	@ (80080c8 <USB_SetTurnaroundTime+0x128>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d306      	bcc.n	800800c <USB_SetTurnaroundTime+0x6c>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4a32      	ldr	r2, [pc, #200]	@ (80080cc <USB_SetTurnaroundTime+0x12c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d802      	bhi.n	800800c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008006:	230c      	movs	r3, #12
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e041      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	4a2f      	ldr	r2, [pc, #188]	@ (80080cc <USB_SetTurnaroundTime+0x12c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d906      	bls.n	8008022 <USB_SetTurnaroundTime+0x82>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4a2e      	ldr	r2, [pc, #184]	@ (80080d0 <USB_SetTurnaroundTime+0x130>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d802      	bhi.n	8008022 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800801c:	230b      	movs	r3, #11
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e036      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4a2a      	ldr	r2, [pc, #168]	@ (80080d0 <USB_SetTurnaroundTime+0x130>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d906      	bls.n	8008038 <USB_SetTurnaroundTime+0x98>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4a29      	ldr	r2, [pc, #164]	@ (80080d4 <USB_SetTurnaroundTime+0x134>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d802      	bhi.n	8008038 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008032:	230a      	movs	r3, #10
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e02b      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4a26      	ldr	r2, [pc, #152]	@ (80080d4 <USB_SetTurnaroundTime+0x134>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d906      	bls.n	800804e <USB_SetTurnaroundTime+0xae>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4a25      	ldr	r2, [pc, #148]	@ (80080d8 <USB_SetTurnaroundTime+0x138>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d202      	bcs.n	800804e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008048:	2309      	movs	r3, #9
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e020      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <USB_SetTurnaroundTime+0x138>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d306      	bcc.n	8008064 <USB_SetTurnaroundTime+0xc4>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4a20      	ldr	r2, [pc, #128]	@ (80080dc <USB_SetTurnaroundTime+0x13c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d802      	bhi.n	8008064 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800805e:	2308      	movs	r3, #8
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	e015      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <USB_SetTurnaroundTime+0x13c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d906      	bls.n	800807a <USB_SetTurnaroundTime+0xda>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a1c      	ldr	r2, [pc, #112]	@ (80080e0 <USB_SetTurnaroundTime+0x140>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d202      	bcs.n	800807a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008074:	2307      	movs	r3, #7
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e00a      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800807a:	2306      	movs	r3, #6
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e007      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008086:	2309      	movs	r3, #9
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	e001      	b.n	8008090 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800808c:	2309      	movs	r3, #9
 800808e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	029b      	lsls	r3, r3, #10
 80080a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80080a8:	431a      	orrs	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	00d8acbf 	.word	0x00d8acbf
 80080c0:	00e4e1c0 	.word	0x00e4e1c0
 80080c4:	00f42400 	.word	0x00f42400
 80080c8:	01067380 	.word	0x01067380
 80080cc:	011a499f 	.word	0x011a499f
 80080d0:	01312cff 	.word	0x01312cff
 80080d4:	014ca43f 	.word	0x014ca43f
 80080d8:	016e3600 	.word	0x016e3600
 80080dc:	01a6ab1f 	.word	0x01a6ab1f
 80080e0:	01e84800 	.word	0x01e84800

080080e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f023 0201 	bic.w	r2, r3, #1
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d115      	bne.n	8008154 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008134:	200a      	movs	r0, #10
 8008136:	f7f8 ffa9 	bl	800108c <HAL_Delay>
      ms += 10U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	330a      	adds	r3, #10
 800813e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fc0b 	bl	800895c <USB_GetMode>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d01e      	beq.n	800818a <USB_SetCurrentMode+0x84>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008150:	d9f0      	bls.n	8008134 <USB_SetCurrentMode+0x2e>
 8008152:	e01a      	b.n	800818a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d115      	bne.n	8008186 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008166:	200a      	movs	r0, #10
 8008168:	f7f8 ff90 	bl	800108c <HAL_Delay>
      ms += 10U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	330a      	adds	r3, #10
 8008170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fbf2 	bl	800895c <USB_GetMode>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <USB_SetCurrentMode+0x84>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2bc7      	cmp	r3, #199	@ 0xc7
 8008182:	d9f0      	bls.n	8008166 <USB_SetCurrentMode+0x60>
 8008184:	e001      	b.n	800818a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e005      	b.n	8008196 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2bc8      	cmp	r3, #200	@ 0xc8
 800818e:	d101      	bne.n	8008194 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081a0:	b084      	sub	sp, #16
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80081ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	e009      	b.n	80081d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3340      	adds	r3, #64	@ 0x40
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3301      	adds	r3, #1
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b0e      	cmp	r3, #14
 80081d8:	d9f2      	bls.n	80081c0 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11c      	bne.n	800821c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f0:	f043 0302 	orr.w	r3, r3, #2
 80081f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e005      	b.n	8008228 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008220:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800822e:	461a      	mov	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008234:	2103      	movs	r1, #3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f95e 	bl	80084f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800823c:	2110      	movs	r1, #16
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8fa 	bl	8008438 <USB_FlushTxFifo>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f924 	bl	800849c <USB_FlushRxFifo>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008264:	461a      	mov	r2, r3
 8008266:	2300      	movs	r3, #0
 8008268:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008270:	461a      	mov	r2, r3
 8008272:	2300      	movs	r3, #0
 8008274:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800827c:	461a      	mov	r2, r3
 800827e:	2300      	movs	r3, #0
 8008280:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e043      	b.n	8008310 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800829a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800829e:	d118      	bne.n	80082d2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b2:	461a      	mov	r2, r3
 80082b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e013      	b.n	80082e4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	461a      	mov	r2, r3
 80082ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e008      	b.n	80082e4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082de:	461a      	mov	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f0:	461a      	mov	r2, r3
 80082f2:	2300      	movs	r3, #0
 80082f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008302:	461a      	mov	r2, r3
 8008304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	3301      	adds	r3, #1
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008314:	461a      	mov	r2, r3
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4293      	cmp	r3, r2
 800831a:	d3b5      	bcc.n	8008288 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800831c:	2300      	movs	r3, #0
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	e043      	b.n	80083aa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008338:	d118      	bne.n	800836c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e013      	b.n	800837e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008362:	461a      	mov	r2, r3
 8008364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	e008      	b.n	800837e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008378:	461a      	mov	r2, r3
 800837a:	2300      	movs	r3, #0
 800837c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838a:	461a      	mov	r2, r3
 800838c:	2300      	movs	r3, #0
 800838e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	3301      	adds	r3, #1
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083ae:	461a      	mov	r2, r3
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d3b5      	bcc.n	8008322 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80083d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f043 0210 	orr.w	r2, r3, #16
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	4b10      	ldr	r3, [pc, #64]	@ (8008434 <USB_DevInit+0x294>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f043 0208 	orr.w	r2, r3, #8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800840c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008410:	2b01      	cmp	r3, #1
 8008412:	d107      	bne.n	8008424 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800841c:	f043 0304 	orr.w	r3, r3, #4
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008430:	b004      	add	sp, #16
 8008432:	4770      	bx	lr
 8008434:	803c3800 	.word	0x803c3800

08008438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008452:	d901      	bls.n	8008458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e01b      	b.n	8008490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	daf2      	bge.n	8008446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	019b      	lsls	r3, r3, #6
 8008468:	f043 0220 	orr.w	r2, r3, #32
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3301      	adds	r3, #1
 8008474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800847c:	d901      	bls.n	8008482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e006      	b.n	8008490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b20      	cmp	r3, #32
 800848c:	d0f0      	beq.n	8008470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3301      	adds	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084b4:	d901      	bls.n	80084ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e018      	b.n	80084ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	daf2      	bge.n	80084a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2210      	movs	r2, #16
 80084ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084d8:	d901      	bls.n	80084de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e006      	b.n	80084ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d0f0      	beq.n	80084cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008518:	4313      	orrs	r3, r2
 800851a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800852a:	b480      	push	{r7}
 800852c:	b087      	sub	sp, #28
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 0306 	and.w	r3, r3, #6
 8008542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]
 800854e:	e00a      	b.n	8008566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d002      	beq.n	800855c <USB_GetDevSpeed+0x32>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b06      	cmp	r3, #6
 800855a:	d102      	bne.n	8008562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800855c:	2302      	movs	r3, #2
 800855e:	75fb      	strb	r3, [r7, #23]
 8008560:	e001      	b.n	8008566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008562:	230f      	movs	r3, #15
 8008564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
}
 8008568:	4618      	mov	r0, r3
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d14a      	bne.n	8008628 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085aa:	f040 8086 	bne.w	80086ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008602:	4293      	cmp	r3, r2
 8008604:	d902      	bls.n	800860c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
          break;
 800860a:	e056      	b.n	80086ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008624:	d0e7      	beq.n	80085f6 <USB_EPStopXfer+0x82>
 8008626:	e048      	b.n	80086ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800863c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008640:	d13b      	bne.n	80086ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008660:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008664:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008688:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008696:	4293      	cmp	r3, r2
 8008698:	d902      	bls.n	80086a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	75fb      	strb	r3, [r7, #23]
          break;
 800869e:	e00c      	b.n	80086ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086b8:	d0e7      	beq.n	800868a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b089      	sub	sp, #36	@ 0x24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	460b      	mov	r3, r1
 80086d8:	71fb      	strb	r3, [r7, #7]
 80086da:	4613      	mov	r3, r2
 80086dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d123      	bne.n	8008736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086ee:	88bb      	ldrh	r3, [r7, #4]
 80086f0:	3303      	adds	r3, #3
 80086f2:	089b      	lsrs	r3, r3, #2
 80086f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	e018      	b.n	800872e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	031a      	lsls	r2, r3, #12
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	4413      	add	r3, r2
 8008704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008708:	461a      	mov	r2, r3
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	3301      	adds	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	3301      	adds	r3, #1
 8008720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	3301      	adds	r3, #1
 8008726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	3301      	adds	r3, #1
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	429a      	cmp	r2, r3
 8008734:	d3e2      	bcc.n	80086fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3724      	adds	r7, #36	@ 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008744:	b480      	push	{r7}
 8008746:	b08b      	sub	sp, #44	@ 0x2c
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	089b      	lsrs	r3, r3, #2
 800875e:	b29b      	uxth	r3, r3
 8008760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800876a:	2300      	movs	r3, #0
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	e014      	b.n	800879a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	601a      	str	r2, [r3, #0]
    pDest++;
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	3301      	adds	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	3301      	adds	r3, #1
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	3301      	adds	r3, #1
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	3301      	adds	r3, #1
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	3301      	adds	r3, #1
 8008798:	623b      	str	r3, [r7, #32]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d3e6      	bcc.n	8008770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087a2:	8bfb      	ldrh	r3, [r7, #30]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d01e      	beq.n	80087e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087b2:	461a      	mov	r2, r3
 80087b4:	f107 0310 	add.w	r3, r7, #16
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	fa22 f303 	lsr.w	r3, r2, r3
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	701a      	strb	r2, [r3, #0]
      i++;
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	3301      	adds	r3, #1
 80087d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	3301      	adds	r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80087da:	8bfb      	ldrh	r3, [r7, #30]
 80087dc:	3b01      	subs	r3, #1
 80087de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087e0:	8bfb      	ldrh	r3, [r7, #30]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1ea      	bne.n	80087bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	372c      	adds	r7, #44	@ 0x2c
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008822:	f043 0302 	orr.w	r3, r3, #2
 8008826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4013      	ands	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800884e:	68fb      	ldr	r3, [r7, #12]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4013      	ands	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	0c1b      	lsrs	r3, r3, #16
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4013      	ands	r3, r2
 80088b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	b29b      	uxth	r3, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	4013      	ands	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088f2:	68bb      	ldr	r3, [r7, #8]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008922:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
 8008930:	01db      	lsls	r3, r3, #7
 8008932:	b2db      	uxtb	r3, r3
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4313      	orrs	r3, r2
 8008938:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4013      	ands	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800894e:	68bb      	ldr	r3, [r7, #8]
}
 8008950:	4618      	mov	r0, r3
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	f003 0301 	and.w	r3, r3, #1
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008992:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008996:	f023 0307 	bic.w	r3, r3, #7
 800899a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	460b      	mov	r3, r1
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	333c      	adds	r3, #60	@ 0x3c
 80089d6:	3304      	adds	r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	4a26      	ldr	r2, [pc, #152]	@ (8008a78 <USB_EP0_OutStart+0xb8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d90a      	bls.n	80089fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089f4:	d101      	bne.n	80089fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e037      	b.n	8008a6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a00:	461a      	mov	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a28:	f043 0318 	orr.w	r3, r3, #24
 8008a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a3c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008a40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d10f      	bne.n	8008a68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a4e:	461a      	mov	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a62:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	4f54300a 	.word	0x4f54300a

08008a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a94:	d901      	bls.n	8008a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e01b      	b.n	8008ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	daf2      	bge.n	8008a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f043 0201 	orr.w	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008abe:	d901      	bls.n	8008ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e006      	b.n	8008ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d0f0      	beq.n	8008ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <memset>:
 8008ade:	4402      	add	r2, r0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d100      	bne.n	8008ae8 <memset+0xa>
 8008ae6:	4770      	bx	lr
 8008ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8008aec:	e7f9      	b.n	8008ae2 <memset+0x4>
	...

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	@ (8008b28 <__libc_init_array+0x38>)
 8008af4:	2600      	movs	r6, #0
 8008af6:	4c0d      	ldr	r4, [pc, #52]	@ (8008b2c <__libc_init_array+0x3c>)
 8008af8:	1b64      	subs	r4, r4, r5
 8008afa:	10a4      	asrs	r4, r4, #2
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	@ (8008b30 <__libc_init_array+0x40>)
 8008b02:	2600      	movs	r6, #0
 8008b04:	4c0b      	ldr	r4, [pc, #44]	@ (8008b34 <__libc_init_array+0x44>)
 8008b06:	f000 f817 	bl	8008b38 <_init>
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	3601      	adds	r6, #1
 8008b1a:	4798      	blx	r3
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	3601      	adds	r6, #1
 8008b24:	4798      	blx	r3
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	08008c58 	.word	0x08008c58
 8008b2c:	08008c58 	.word	0x08008c58
 8008b30:	08008c58 	.word	0x08008c58
 8008b34:	08008c5c 	.word	0x08008c5c

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
