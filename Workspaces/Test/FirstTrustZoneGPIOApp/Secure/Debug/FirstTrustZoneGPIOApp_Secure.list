
FirstTrustZoneGPIOApp_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008134  0c000238  0c000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0c00836c  0c00836c  0000936c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0c00846c  0c00846c  0000946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0c008474  0c008474  00009474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0c008478  0c008478  00009478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  30000000  0c00847c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .bss          0000062c  3000000c  3000000c  0000c00c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  30000638  30000638  0000c00c  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY
 11 .debug_info   000186ec  00000000  00000000  0000b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002fb5  00000000  00000000  00023742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013a0  00000000  00000000  000266f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f1f  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003747d  00000000  00000000  000289b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a3ed  00000000  00000000  0005fe34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015f35d  00000000  00000000  0007a221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001d957e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000053b8  00000000  00000000  001d95c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008d  00000000  00000000  001de97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	@ (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	@ (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	@ (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	3000000c 	.word	0x3000000c
 c000254:	00000000 	.word	0x00000000
 c000258:	0c008354 	.word	0x0c008354

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	@ (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	@ (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	@ (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000010 	.word	0x30000010
 c000274:	0c008354 	.word	0x0c008354

0c000278 <__gnu_cmse_nonsecure_call>:
 c000278:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	4627      	mov	r7, r4
 c00027e:	46a0      	mov	r8, r4
 c000280:	46a1      	mov	r9, r4
 c000282:	46a2      	mov	sl, r4
 c000284:	46a3      	mov	fp, r4
 c000286:	46a4      	mov	ip, r4
 c000288:	ed2d 8b10 	vpush	{d8-d15}
 c00028c:	f04f 0500 	mov.w	r5, #0
 c000290:	ec45 5b18 	vmov	d8, r5, r5
 c000294:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000298:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00029c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002a0:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002a4:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002a8:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002ac:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002b0:	eef1 5a10 	vmrs	r5, fpscr
 c0002b4:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c0002b8:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c0002bc:	4035      	ands	r5, r6
 c0002be:	eee1 5a10 	vmsr	fpscr, r5
 c0002c2:	f384 8800 	msr	CPSR_f, r4
 c0002c6:	4625      	mov	r5, r4
 c0002c8:	4626      	mov	r6, r4
 c0002ca:	47a4      	blxns	r4
 c0002cc:	ecbd 8b10 	vpop	{d8-d15}
 c0002d0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002d4 <__aeabi_uldivmod>:
 c0002d4:	b953      	cbnz	r3, c0002ec <__aeabi_uldivmod+0x18>
 c0002d6:	b94a      	cbnz	r2, c0002ec <__aeabi_uldivmod+0x18>
 c0002d8:	2900      	cmp	r1, #0
 c0002da:	bf08      	it	eq
 c0002dc:	2800      	cmpeq	r0, #0
 c0002de:	bf1c      	itt	ne
 c0002e0:	f04f 31ff 	movne.w	r1, #4294967295
 c0002e4:	f04f 30ff 	movne.w	r0, #4294967295
 c0002e8:	f000 b97e 	b.w	c0005e8 <__aeabi_idiv0>
 c0002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002f4:	f000 f806 	bl	c000304 <__udivmoddi4>
 c0002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c000300:	b004      	add	sp, #16
 c000302:	4770      	bx	lr

0c000304 <__udivmoddi4>:
 c000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000308:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c00030a:	460c      	mov	r4, r1
 c00030c:	2b00      	cmp	r3, #0
 c00030e:	d14d      	bne.n	c0003ac <__udivmoddi4+0xa8>
 c000310:	428a      	cmp	r2, r1
 c000312:	460f      	mov	r7, r1
 c000314:	4684      	mov	ip, r0
 c000316:	4696      	mov	lr, r2
 c000318:	fab2 f382 	clz	r3, r2
 c00031c:	d960      	bls.n	c0003e0 <__udivmoddi4+0xdc>
 c00031e:	b14b      	cbz	r3, c000334 <__udivmoddi4+0x30>
 c000320:	fa02 fe03 	lsl.w	lr, r2, r3
 c000324:	f1c3 0220 	rsb	r2, r3, #32
 c000328:	409f      	lsls	r7, r3
 c00032a:	fa00 fc03 	lsl.w	ip, r0, r3
 c00032e:	fa20 f202 	lsr.w	r2, r0, r2
 c000332:	4317      	orrs	r7, r2
 c000334:	ea4f 461e 	mov.w	r6, lr, lsr #16
 c000338:	fa1f f48e 	uxth.w	r4, lr
 c00033c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c000340:	fbb7 f1f6 	udiv	r1, r7, r6
 c000344:	fb06 7711 	mls	r7, r6, r1, r7
 c000348:	fb01 f004 	mul.w	r0, r1, r4
 c00034c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000350:	4290      	cmp	r0, r2
 c000352:	d908      	bls.n	c000366 <__udivmoddi4+0x62>
 c000354:	eb1e 0202 	adds.w	r2, lr, r2
 c000358:	f101 37ff 	add.w	r7, r1, #4294967295
 c00035c:	d202      	bcs.n	c000364 <__udivmoddi4+0x60>
 c00035e:	4290      	cmp	r0, r2
 c000360:	f200 812d 	bhi.w	c0005be <__udivmoddi4+0x2ba>
 c000364:	4639      	mov	r1, r7
 c000366:	1a12      	subs	r2, r2, r0
 c000368:	fa1f fc8c 	uxth.w	ip, ip
 c00036c:	fbb2 f0f6 	udiv	r0, r2, r6
 c000370:	fb06 2210 	mls	r2, r6, r0, r2
 c000374:	fb00 f404 	mul.w	r4, r0, r4
 c000378:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c00037c:	4564      	cmp	r4, ip
 c00037e:	d908      	bls.n	c000392 <__udivmoddi4+0x8e>
 c000380:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000384:	f100 32ff 	add.w	r2, r0, #4294967295
 c000388:	d202      	bcs.n	c000390 <__udivmoddi4+0x8c>
 c00038a:	4564      	cmp	r4, ip
 c00038c:	f200 811a 	bhi.w	c0005c4 <__udivmoddi4+0x2c0>
 c000390:	4610      	mov	r0, r2
 c000392:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 c000396:	ebac 0c04 	sub.w	ip, ip, r4
 c00039a:	2100      	movs	r1, #0
 c00039c:	b125      	cbz	r5, c0003a8 <__udivmoddi4+0xa4>
 c00039e:	fa2c f303 	lsr.w	r3, ip, r3
 c0003a2:	2200      	movs	r2, #0
 c0003a4:	e9c5 3200 	strd	r3, r2, [r5]
 c0003a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0003ac:	428b      	cmp	r3, r1
 c0003ae:	d905      	bls.n	c0003bc <__udivmoddi4+0xb8>
 c0003b0:	b10d      	cbz	r5, c0003b6 <__udivmoddi4+0xb2>
 c0003b2:	e9c5 0100 	strd	r0, r1, [r5]
 c0003b6:	2100      	movs	r1, #0
 c0003b8:	4608      	mov	r0, r1
 c0003ba:	e7f5      	b.n	c0003a8 <__udivmoddi4+0xa4>
 c0003bc:	fab3 f183 	clz	r1, r3
 c0003c0:	2900      	cmp	r1, #0
 c0003c2:	d14d      	bne.n	c000460 <__udivmoddi4+0x15c>
 c0003c4:	42a3      	cmp	r3, r4
 c0003c6:	f0c0 80f2 	bcc.w	c0005ae <__udivmoddi4+0x2aa>
 c0003ca:	4290      	cmp	r0, r2
 c0003cc:	f080 80ef 	bcs.w	c0005ae <__udivmoddi4+0x2aa>
 c0003d0:	4606      	mov	r6, r0
 c0003d2:	4623      	mov	r3, r4
 c0003d4:	4608      	mov	r0, r1
 c0003d6:	2d00      	cmp	r5, #0
 c0003d8:	d0e6      	beq.n	c0003a8 <__udivmoddi4+0xa4>
 c0003da:	e9c5 6300 	strd	r6, r3, [r5]
 c0003de:	e7e3      	b.n	c0003a8 <__udivmoddi4+0xa4>
 c0003e0:	2b00      	cmp	r3, #0
 c0003e2:	f040 80a2 	bne.w	c00052a <__udivmoddi4+0x226>
 c0003e6:	1a8a      	subs	r2, r1, r2
 c0003e8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c0003ec:	fa1f f68e 	uxth.w	r6, lr
 c0003f0:	2101      	movs	r1, #1
 c0003f2:	fbb2 f4f7 	udiv	r4, r2, r7
 c0003f6:	fb07 2014 	mls	r0, r7, r4, r2
 c0003fa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c0003fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 c000402:	fb06 f004 	mul.w	r0, r6, r4
 c000406:	4290      	cmp	r0, r2
 c000408:	d90f      	bls.n	c00042a <__udivmoddi4+0x126>
 c00040a:	eb1e 0202 	adds.w	r2, lr, r2
 c00040e:	f104 38ff 	add.w	r8, r4, #4294967295
 c000412:	bf2c      	ite	cs
 c000414:	f04f 0901 	movcs.w	r9, #1
 c000418:	f04f 0900 	movcc.w	r9, #0
 c00041c:	4290      	cmp	r0, r2
 c00041e:	d903      	bls.n	c000428 <__udivmoddi4+0x124>
 c000420:	f1b9 0f00 	cmp.w	r9, #0
 c000424:	f000 80c8 	beq.w	c0005b8 <__udivmoddi4+0x2b4>
 c000428:	4644      	mov	r4, r8
 c00042a:	1a12      	subs	r2, r2, r0
 c00042c:	fa1f fc8c 	uxth.w	ip, ip
 c000430:	fbb2 f0f7 	udiv	r0, r2, r7
 c000434:	fb07 2210 	mls	r2, r7, r0, r2
 c000438:	fb00 f606 	mul.w	r6, r0, r6
 c00043c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c000440:	4566      	cmp	r6, ip
 c000442:	d908      	bls.n	c000456 <__udivmoddi4+0x152>
 c000444:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000448:	f100 32ff 	add.w	r2, r0, #4294967295
 c00044c:	d202      	bcs.n	c000454 <__udivmoddi4+0x150>
 c00044e:	4566      	cmp	r6, ip
 c000450:	f200 80bb 	bhi.w	c0005ca <__udivmoddi4+0x2c6>
 c000454:	4610      	mov	r0, r2
 c000456:	ebac 0c06 	sub.w	ip, ip, r6
 c00045a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 c00045e:	e79d      	b.n	c00039c <__udivmoddi4+0x98>
 c000460:	f1c1 0620 	rsb	r6, r1, #32
 c000464:	408b      	lsls	r3, r1
 c000466:	fa04 fe01 	lsl.w	lr, r4, r1
 c00046a:	fa22 f706 	lsr.w	r7, r2, r6
 c00046e:	fa20 fc06 	lsr.w	ip, r0, r6
 c000472:	40f4      	lsrs	r4, r6
 c000474:	408a      	lsls	r2, r1
 c000476:	431f      	orrs	r7, r3
 c000478:	ea4e 030c 	orr.w	r3, lr, ip
 c00047c:	fa00 fe01 	lsl.w	lr, r0, r1
 c000480:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c000484:	ea4f 4913 	mov.w	r9, r3, lsr #16
 c000488:	fa1f fc87 	uxth.w	ip, r7
 c00048c:	fbb4 f0f8 	udiv	r0, r4, r8
 c000490:	fb08 4410 	mls	r4, r8, r0, r4
 c000494:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c000498:	fb00 f90c 	mul.w	r9, r0, ip
 c00049c:	45a1      	cmp	r9, r4
 c00049e:	d90e      	bls.n	c0004be <__udivmoddi4+0x1ba>
 c0004a0:	193c      	adds	r4, r7, r4
 c0004a2:	f100 3aff 	add.w	sl, r0, #4294967295
 c0004a6:	bf2c      	ite	cs
 c0004a8:	f04f 0b01 	movcs.w	fp, #1
 c0004ac:	f04f 0b00 	movcc.w	fp, #0
 c0004b0:	45a1      	cmp	r9, r4
 c0004b2:	d903      	bls.n	c0004bc <__udivmoddi4+0x1b8>
 c0004b4:	f1bb 0f00 	cmp.w	fp, #0
 c0004b8:	f000 8093 	beq.w	c0005e2 <__udivmoddi4+0x2de>
 c0004bc:	4650      	mov	r0, sl
 c0004be:	eba4 0409 	sub.w	r4, r4, r9
 c0004c2:	fa1f f983 	uxth.w	r9, r3
 c0004c6:	fbb4 f3f8 	udiv	r3, r4, r8
 c0004ca:	fb08 4413 	mls	r4, r8, r3, r4
 c0004ce:	fb03 fc0c 	mul.w	ip, r3, ip
 c0004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c0004d6:	45a4      	cmp	ip, r4
 c0004d8:	d906      	bls.n	c0004e8 <__udivmoddi4+0x1e4>
 c0004da:	193c      	adds	r4, r7, r4
 c0004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 c0004e0:	d201      	bcs.n	c0004e6 <__udivmoddi4+0x1e2>
 c0004e2:	45a4      	cmp	ip, r4
 c0004e4:	d87a      	bhi.n	c0005dc <__udivmoddi4+0x2d8>
 c0004e6:	4643      	mov	r3, r8
 c0004e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 c0004ec:	eba4 040c 	sub.w	r4, r4, ip
 c0004f0:	fba0 9802 	umull	r9, r8, r0, r2
 c0004f4:	4544      	cmp	r4, r8
 c0004f6:	46cc      	mov	ip, r9
 c0004f8:	4643      	mov	r3, r8
 c0004fa:	d302      	bcc.n	c000502 <__udivmoddi4+0x1fe>
 c0004fc:	d106      	bne.n	c00050c <__udivmoddi4+0x208>
 c0004fe:	45ce      	cmp	lr, r9
 c000500:	d204      	bcs.n	c00050c <__udivmoddi4+0x208>
 c000502:	3801      	subs	r0, #1
 c000504:	ebb9 0c02 	subs.w	ip, r9, r2
 c000508:	eb68 0307 	sbc.w	r3, r8, r7
 c00050c:	b15d      	cbz	r5, c000526 <__udivmoddi4+0x222>
 c00050e:	ebbe 020c 	subs.w	r2, lr, ip
 c000512:	eb64 0403 	sbc.w	r4, r4, r3
 c000516:	fa04 f606 	lsl.w	r6, r4, r6
 c00051a:	fa22 f301 	lsr.w	r3, r2, r1
 c00051e:	40cc      	lsrs	r4, r1
 c000520:	431e      	orrs	r6, r3
 c000522:	e9c5 6400 	strd	r6, r4, [r5]
 c000526:	2100      	movs	r1, #0
 c000528:	e73e      	b.n	c0003a8 <__udivmoddi4+0xa4>
 c00052a:	fa02 fe03 	lsl.w	lr, r2, r3
 c00052e:	f1c3 0120 	rsb	r1, r3, #32
 c000532:	fa04 f203 	lsl.w	r2, r4, r3
 c000536:	fa00 fc03 	lsl.w	ip, r0, r3
 c00053a:	40cc      	lsrs	r4, r1
 c00053c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c000540:	fa20 f101 	lsr.w	r1, r0, r1
 c000544:	fa1f f68e 	uxth.w	r6, lr
 c000548:	fbb4 f0f7 	udiv	r0, r4, r7
 c00054c:	430a      	orrs	r2, r1
 c00054e:	fb07 4410 	mls	r4, r7, r0, r4
 c000552:	0c11      	lsrs	r1, r2, #16
 c000554:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 c000558:	fb00 f406 	mul.w	r4, r0, r6
 c00055c:	428c      	cmp	r4, r1
 c00055e:	d90e      	bls.n	c00057e <__udivmoddi4+0x27a>
 c000560:	eb1e 0101 	adds.w	r1, lr, r1
 c000564:	f100 38ff 	add.w	r8, r0, #4294967295
 c000568:	bf2c      	ite	cs
 c00056a:	f04f 0901 	movcs.w	r9, #1
 c00056e:	f04f 0900 	movcc.w	r9, #0
 c000572:	428c      	cmp	r4, r1
 c000574:	d902      	bls.n	c00057c <__udivmoddi4+0x278>
 c000576:	f1b9 0f00 	cmp.w	r9, #0
 c00057a:	d02c      	beq.n	c0005d6 <__udivmoddi4+0x2d2>
 c00057c:	4640      	mov	r0, r8
 c00057e:	1b09      	subs	r1, r1, r4
 c000580:	b292      	uxth	r2, r2
 c000582:	fbb1 f4f7 	udiv	r4, r1, r7
 c000586:	fb07 1114 	mls	r1, r7, r4, r1
 c00058a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 c00058e:	fb04 f106 	mul.w	r1, r4, r6
 c000592:	4291      	cmp	r1, r2
 c000594:	d907      	bls.n	c0005a6 <__udivmoddi4+0x2a2>
 c000596:	eb1e 0202 	adds.w	r2, lr, r2
 c00059a:	f104 38ff 	add.w	r8, r4, #4294967295
 c00059e:	d201      	bcs.n	c0005a4 <__udivmoddi4+0x2a0>
 c0005a0:	4291      	cmp	r1, r2
 c0005a2:	d815      	bhi.n	c0005d0 <__udivmoddi4+0x2cc>
 c0005a4:	4644      	mov	r4, r8
 c0005a6:	1a52      	subs	r2, r2, r1
 c0005a8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 c0005ac:	e721      	b.n	c0003f2 <__udivmoddi4+0xee>
 c0005ae:	1a86      	subs	r6, r0, r2
 c0005b0:	eb64 0303 	sbc.w	r3, r4, r3
 c0005b4:	2001      	movs	r0, #1
 c0005b6:	e70e      	b.n	c0003d6 <__udivmoddi4+0xd2>
 c0005b8:	3c02      	subs	r4, #2
 c0005ba:	4472      	add	r2, lr
 c0005bc:	e735      	b.n	c00042a <__udivmoddi4+0x126>
 c0005be:	3902      	subs	r1, #2
 c0005c0:	4472      	add	r2, lr
 c0005c2:	e6d0      	b.n	c000366 <__udivmoddi4+0x62>
 c0005c4:	44f4      	add	ip, lr
 c0005c6:	3802      	subs	r0, #2
 c0005c8:	e6e3      	b.n	c000392 <__udivmoddi4+0x8e>
 c0005ca:	44f4      	add	ip, lr
 c0005cc:	3802      	subs	r0, #2
 c0005ce:	e742      	b.n	c000456 <__udivmoddi4+0x152>
 c0005d0:	3c02      	subs	r4, #2
 c0005d2:	4472      	add	r2, lr
 c0005d4:	e7e7      	b.n	c0005a6 <__udivmoddi4+0x2a2>
 c0005d6:	3802      	subs	r0, #2
 c0005d8:	4471      	add	r1, lr
 c0005da:	e7d0      	b.n	c00057e <__udivmoddi4+0x27a>
 c0005dc:	3b02      	subs	r3, #2
 c0005de:	443c      	add	r4, r7
 c0005e0:	e782      	b.n	c0004e8 <__udivmoddi4+0x1e4>
 c0005e2:	3802      	subs	r0, #2
 c0005e4:	443c      	add	r4, r7
 c0005e6:	e76a      	b.n	c0004be <__udivmoddi4+0x1ba>

0c0005e8 <__aeabi_idiv0>:
 c0005e8:	4770      	bx	lr
 c0005ea:	bf00      	nop

0c0005ec <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 c0005ec:	b480      	push	{r7}
 c0005ee:	b085      	sub	sp, #20
 c0005f0:	af00      	add	r7, sp, #0
 c0005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 c0005f4:	4b0a      	ldr	r3, [pc, #40]	@ (c000620 <LL_AHB2_GRP1_EnableClock+0x34>)
 c0005f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 c0005fa:	4909      	ldr	r1, [pc, #36]	@ (c000620 <LL_AHB2_GRP1_EnableClock+0x34>)
 c0005fc:	687b      	ldr	r3, [r7, #4]
 c0005fe:	4313      	orrs	r3, r2
 c000600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 c000604:	4b06      	ldr	r3, [pc, #24]	@ (c000620 <LL_AHB2_GRP1_EnableClock+0x34>)
 c000606:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 c00060a:	687b      	ldr	r3, [r7, #4]
 c00060c:	4013      	ands	r3, r2
 c00060e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c000610:	68fb      	ldr	r3, [r7, #12]
}
 c000612:	bf00      	nop
 c000614:	3714      	adds	r7, #20
 c000616:	46bd      	mov	sp, r7
 c000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00061c:	4770      	bx	lr
 c00061e:	bf00      	nop
 c000620:	56020c00 	.word	0x56020c00

0c000624 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 c000624:	b480      	push	{r7}
 c000626:	b085      	sub	sp, #20
 c000628:	af00      	add	r7, sp, #0
 c00062a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 c00062c:	4b0a      	ldr	r3, [pc, #40]	@ (c000658 <LL_APB1_GRP2_EnableClock+0x34>)
 c00062e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 c000632:	4909      	ldr	r1, [pc, #36]	@ (c000658 <LL_APB1_GRP2_EnableClock+0x34>)
 c000634:	687b      	ldr	r3, [r7, #4]
 c000636:	4313      	orrs	r3, r2
 c000638:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 c00063c:	4b06      	ldr	r3, [pc, #24]	@ (c000658 <LL_APB1_GRP2_EnableClock+0x34>)
 c00063e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 c000642:	687b      	ldr	r3, [r7, #4]
 c000644:	4013      	ands	r3, r2
 c000646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c000648:	68fb      	ldr	r3, [r7, #12]
}
 c00064a:	bf00      	nop
 c00064c:	3714      	adds	r7, #20
 c00064e:	46bd      	mov	sp, r7
 c000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000654:	4770      	bx	lr
 c000656:	bf00      	nop
 c000658:	56020c00 	.word	0x56020c00

0c00065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c00065c:	b580      	push	{r7, lr}
 c00065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000660:	f001 f85c 	bl	c00171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c000664:	f000 f858 	bl	c000718 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 c000668:	f000 f8ba 	bl	c0007e0 <SystemPower_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c00066c:	f000 f90a 	bl	c000884 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000670:	f000 fbd4 	bl	c000e1c <MX_GPIO_Init>
  MX_ADC1_Init();
 c000674:	f000 f8c2 	bl	c0007fc <MX_ADC1_Init>
  MX_ICACHE_Init();
 c000678:	f000 fb08 	bl	c000c8c <MX_ICACHE_Init>
  MX_UCPD1_Init();
 c00067c:	f000 fb1a 	bl	c000cb4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 c000680:	f000 fb4e 	bl	c000d20 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 c000684:	f000 fb98 	bl	c000db8 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000688:	f000 f802 	bl	c000690 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c00068c:	bf00      	nop
 c00068e:	e7fd      	b.n	c00068c <main+0x30>

0c000690 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000690:	b590      	push	{r4, r7, lr}
 c000692:	b083      	sub	sp, #12
 c000694:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000696:	4b1e      	ldr	r3, [pc, #120]	@ (c000710 <NonSecure_Init+0x80>)
 c000698:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c00069c:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c00069e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c0006a2:	681b      	ldr	r3, [r3, #0]
 c0006a4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0006a6:	683b      	ldr	r3, [r7, #0]
 c0006a8:	f383 8888 	msr	MSP_NS, r3
}
 c0006ac:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0006ae:	4b19      	ldr	r3, [pc, #100]	@ (c000714 <NonSecure_Init+0x84>)
 c0006b0:	681b      	ldr	r3, [r3, #0]
 c0006b2:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0006b4:	687b      	ldr	r3, [r7, #4]
 c0006b6:	461c      	mov	r4, r3
 c0006b8:	0864      	lsrs	r4, r4, #1
 c0006ba:	0064      	lsls	r4, r4, #1
 c0006bc:	4620      	mov	r0, r4
 c0006be:	4621      	mov	r1, r4
 c0006c0:	4622      	mov	r2, r4
 c0006c2:	4623      	mov	r3, r4
 c0006c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0006c8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0006cc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0006d0:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0006d4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0006d8:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0006dc:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0006e0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0006e4:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0006e8:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0006ec:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0006f0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0006f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0006f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0006fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000700:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000704:	f7ff fdb8 	bl	c000278 <__gnu_cmse_nonsecure_call>
}
 c000708:	bf00      	nop
 c00070a:	370c      	adds	r7, #12
 c00070c:	46bd      	mov	sp, r7
 c00070e:	bd90      	pop	{r4, r7, pc}
 c000710:	e002ed00 	.word	0xe002ed00
 c000714:	08100004 	.word	0x08100004

0c000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000718:	b580      	push	{r7, lr}
 c00071a:	b09e      	sub	sp, #120	@ 0x78
 c00071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00071e:	f107 0318 	add.w	r3, r7, #24
 c000722:	2260      	movs	r2, #96	@ 0x60
 c000724:	2100      	movs	r1, #0
 c000726:	4618      	mov	r0, r3
 c000728:	f007 fde7 	bl	c0082fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00072c:	463b      	mov	r3, r7
 c00072e:	2200      	movs	r2, #0
 c000730:	601a      	str	r2, [r3, #0]
 c000732:	605a      	str	r2, [r3, #4]
 c000734:	609a      	str	r2, [r3, #8]
 c000736:	60da      	str	r2, [r3, #12]
 c000738:	611a      	str	r2, [r3, #16]
 c00073a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 c00073c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 c000740:	f002 fc00 	bl	c002f44 <HAL_PWREx_ControlVoltageScaling>
 c000744:	4603      	mov	r3, r0
 c000746:	2b00      	cmp	r3, #0
 c000748:	d001      	beq.n	c00074e <SystemClock_Config+0x36>
  {
    Error_Handler();
 c00074a:	f000 fbc3 	bl	c000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 c00074e:	2332      	movs	r3, #50	@ 0x32
 c000750:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c000752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 c000756:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 c00075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c00075e:	2310      	movs	r3, #16
 c000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c000762:	2301      	movs	r3, #1
 c000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c000766:	2310      	movs	r3, #16
 c000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 c00076a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 c00076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000770:	2302      	movs	r3, #2
 c000772:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c000774:	2301      	movs	r3, #1
 c000776:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 c000778:	2300      	movs	r3, #0
 c00077a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c00077c:	2301      	movs	r3, #1
 c00077e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 c000780:	2350      	movs	r3, #80	@ 0x50
 c000782:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 c000784:	2302      	movs	r3, #2
 c000786:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c000788:	2302      	movs	r3, #2
 c00078a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 c00078c:	2302      	movs	r3, #2
 c00078e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 c000790:	2300      	movs	r3, #0
 c000792:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c000794:	2300      	movs	r3, #0
 c000796:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000798:	f107 0318 	add.w	r3, r7, #24
 c00079c:	4618      	mov	r0, r3
 c00079e:	f002 fcdd 	bl	c00315c <HAL_RCC_OscConfig>
 c0007a2:	4603      	mov	r3, r0
 c0007a4:	2b00      	cmp	r3, #0
 c0007a6:	d001      	beq.n	c0007ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 c0007a8:	f000 fb94 	bl	c000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0007ac:	231f      	movs	r3, #31
 c0007ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0007b0:	2303      	movs	r3, #3
 c0007b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0007b4:	2300      	movs	r3, #0
 c0007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0007b8:	2300      	movs	r3, #0
 c0007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0007bc:	2300      	movs	r3, #0
 c0007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c0007c0:	2300      	movs	r3, #0
 c0007c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c0007c4:	463b      	mov	r3, r7
 c0007c6:	2104      	movs	r1, #4
 c0007c8:	4618      	mov	r0, r3
 c0007ca:	f003 fba3 	bl	c003f14 <HAL_RCC_ClockConfig>
 c0007ce:	4603      	mov	r3, r0
 c0007d0:	2b00      	cmp	r3, #0
 c0007d2:	d001      	beq.n	c0007d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 c0007d4:	f000 fb7e 	bl	c000ed4 <Error_Handler>
  }
}
 c0007d8:	bf00      	nop
 c0007da:	3778      	adds	r7, #120	@ 0x78
 c0007dc:	46bd      	mov	sp, r7
 c0007de:	bd80      	pop	{r7, pc}

0c0007e0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c0007e0:	b580      	push	{r7, lr}
 c0007e2:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 c0007e4:	f002 fc9a 	bl	c00311c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c0007e8:	2002      	movs	r0, #2
 c0007ea:	f002 fc37 	bl	c00305c <HAL_PWREx_ConfigSupply>
 c0007ee:	4603      	mov	r3, r0
 c0007f0:	2b00      	cmp	r3, #0
 c0007f2:	d001      	beq.n	c0007f8 <SystemPower_Config+0x18>
  {
    Error_Handler();
 c0007f4:	f000 fb6e 	bl	c000ed4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c0007f8:	bf00      	nop
 c0007fa:	bd80      	pop	{r7, pc}

0c0007fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 c0007fc:	b580      	push	{r7, lr}
 c0007fe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 c000800:	4b1e      	ldr	r3, [pc, #120]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000802:	4a1f      	ldr	r2, [pc, #124]	@ (c000880 <MX_ADC1_Init+0x84>)
 c000804:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 c000806:	4b1d      	ldr	r3, [pc, #116]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000808:	2200      	movs	r2, #0
 c00080a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 c00080c:	4b1b      	ldr	r3, [pc, #108]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00080e:	2200      	movs	r2, #0
 c000810:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 c000812:	4b1a      	ldr	r3, [pc, #104]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000814:	2200      	movs	r2, #0
 c000816:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 c000818:	4b18      	ldr	r3, [pc, #96]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00081a:	2200      	movs	r2, #0
 c00081c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 c00081e:	4b17      	ldr	r3, [pc, #92]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000820:	2204      	movs	r2, #4
 c000822:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 c000824:	4b15      	ldr	r3, [pc, #84]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000826:	2200      	movs	r2, #0
 c000828:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 c00082a:	4b14      	ldr	r3, [pc, #80]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00082c:	2200      	movs	r2, #0
 c00082e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 c000832:	4b12      	ldr	r3, [pc, #72]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000834:	2201      	movs	r2, #1
 c000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 c000838:	4b10      	ldr	r3, [pc, #64]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00083a:	2200      	movs	r2, #0
 c00083c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 c000840:	4b0e      	ldr	r3, [pc, #56]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000842:	2200      	movs	r2, #0
 c000844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 c000848:	4b0c      	ldr	r3, [pc, #48]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00084a:	2200      	movs	r2, #0
 c00084c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 c00084e:	4b0b      	ldr	r3, [pc, #44]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000850:	2200      	movs	r2, #0
 c000852:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 c000854:	4b09      	ldr	r3, [pc, #36]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000856:	2200      	movs	r2, #0
 c000858:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 c00085a:	4b08      	ldr	r3, [pc, #32]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00085c:	2200      	movs	r2, #0
 c00085e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 c000860:	4b06      	ldr	r3, [pc, #24]	@ (c00087c <MX_ADC1_Init+0x80>)
 c000862:	2200      	movs	r2, #0
 c000864:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 c000868:	4804      	ldr	r0, [pc, #16]	@ (c00087c <MX_ADC1_Init+0x80>)
 c00086a:	f001 f93f 	bl	c001aec <HAL_ADC_Init>
 c00086e:	4603      	mov	r3, r0
 c000870:	2b00      	cmp	r3, #0
 c000872:	d001      	beq.n	c000878 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 c000874:	f000 fb2e 	bl	c000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 c000878:	bf00      	nop
 c00087a:	bd80      	pop	{r7, pc}
 c00087c:	30000028 	.word	0x30000028
 c000880:	52028000 	.word	0x52028000

0c000884 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000884:	b580      	push	{r7, lr}
 c000886:	b0c4      	sub	sp, #272	@ 0x110
 c000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c00088a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00088e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000892:	4618      	mov	r0, r3
 c000894:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c000898:	461a      	mov	r2, r3
 c00089a:	2100      	movs	r1, #0
 c00089c:	f007 fd2d 	bl	c0082fa <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UCPD1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0008a0:	f240 3101 	movw	r1, #769	@ 0x301
 c0008a4:	2013      	movs	r0, #19
 c0008a6:	f001 ffa7 	bl	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0008aa:	4603      	mov	r3, r0
 c0008ac:	2b00      	cmp	r3, #0
 c0008ae:	d001      	beq.n	c0008b4 <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c0008b0:	f000 fb10 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0008b4:	f240 3101 	movw	r1, #769	@ 0x301
 c0008b8:	480e      	ldr	r0, [pc, #56]	@ (c0008f4 <MX_GTZC_S_Init+0x70>)
 c0008ba:	f001 ff9d 	bl	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0008be:	4603      	mov	r3, r0
 c0008c0:	2b00      	cmp	r3, #0
 c0008c2:	d001      	beq.n	c0008c8 <MX_GTZC_S_Init+0x44>
  {
    Error_Handler();
 c0008c4:	f000 fb06 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC12, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0008c8:	f240 3101 	movw	r1, #769	@ 0x301
 c0008cc:	480a      	ldr	r0, [pc, #40]	@ (c0008f8 <MX_GTZC_S_Init+0x74>)
 c0008ce:	f001 ff93 	bl	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0008d2:	4603      	mov	r3, r0
 c0008d4:	2b00      	cmp	r3, #0
 c0008d6:	d001      	beq.n	c0008dc <MX_GTZC_S_Init+0x58>
  {
    Error_Handler();
 c0008d8:	f000 fafc 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OTG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0008dc:	f240 3101 	movw	r1, #769	@ 0x301
 c0008e0:	4806      	ldr	r0, [pc, #24]	@ (c0008fc <MX_GTZC_S_Init+0x78>)
 c0008e2:	f001 ff89 	bl	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0008e6:	4603      	mov	r3, r0
 c0008e8:	2b00      	cmp	r3, #0
 c0008ea:	d009      	beq.n	c000900 <MX_GTZC_S_Init+0x7c>
  {
    Error_Handler();
 c0008ec:	f000 faf2 	bl	c000ed4 <Error_Handler>
 c0008f0:	e006      	b.n	c000900 <MX_GTZC_S_Init+0x7c>
 c0008f2:	bf00      	nop
 c0008f4:	10000003 	.word	0x10000003
 c0008f8:	20000008 	.word	0x20000008
 c0008fc:	2000000a 	.word	0x2000000a
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000908:	2200      	movs	r2, #0
 c00090a:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00090c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000910:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000914:	2200      	movs	r2, #0
 c000916:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00091c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000920:	2200      	movs	r2, #0
 c000922:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00092c:	2200      	movs	r2, #0
 c00092e:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000930:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000934:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000938:	2200      	movs	r2, #0
 c00093a:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c00093c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000940:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000944:	2200      	movs	r2, #0
 c000946:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00094c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000950:	2200      	movs	r2, #0
 c000952:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000958:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00095c:	2200      	movs	r2, #0
 c00095e:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000960:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000964:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000968:	2200      	movs	r2, #0
 c00096a:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c00096c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000970:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000974:	2200      	movs	r2, #0
 c000976:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000978:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00097c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000980:	2200      	movs	r2, #0
 c000982:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c000984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00098c:	2200      	movs	r2, #0
 c00098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c000990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000994:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000998:	2200      	movs	r2, #0
 c00099a:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c00099c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009a4:	2200      	movs	r2, #0
 c0009a6:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0009a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009b0:	2200      	movs	r2, #0
 c0009b2:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0009b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009bc:	2200      	movs	r2, #0
 c0009be:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0009c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009c8:	2200      	movs	r2, #0
 c0009ca:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0009cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009d4:	2200      	movs	r2, #0
 c0009d6:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0009d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009e0:	2200      	movs	r2, #0
 c0009e2:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0009e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009ec:	2200      	movs	r2, #0
 c0009ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0009f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009f8:	2200      	movs	r2, #0
 c0009fa:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0009fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a04:	2200      	movs	r2, #0
 c000a06:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c000a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a10:	2200      	movs	r2, #0
 c000a12:	659a      	str	r2, [r3, #88]	@ 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a1c:	2200      	movs	r2, #0
 c000a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a28:	2200      	movs	r2, #0
 c000a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c000a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a34:	2200      	movs	r2, #0
 c000a36:	665a      	str	r2, [r3, #100]	@ 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c000a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a40:	2200      	movs	r2, #0
 c000a42:	669a      	str	r2, [r3, #104]	@ 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c000a44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a4c:	2200      	movs	r2, #0
 c000a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c000a50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a58:	2200      	movs	r2, #0
 c000a5a:	671a      	str	r2, [r3, #112]	@ 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c000a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a64:	2200      	movs	r2, #0
 c000a66:	675a      	str	r2, [r3, #116]	@ 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c000a68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a70:	2200      	movs	r2, #0
 c000a72:	679a      	str	r2, [r3, #120]	@ 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c000a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a7c:	2200      	movs	r2, #0
 c000a7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c000a80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a88:	2200      	movs	r2, #0
 c000a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c000a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a96:	2200      	movs	r2, #0
 c000a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0x00000000;
 c000a9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000aa0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000aa4:	2200      	movs	r2, #0
 c000aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0x00000000;
 c000aaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000aae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ab2:	2200      	movs	r2, #0
 c000ab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0x00000000;
 c000ab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000abc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ac0:	2200      	movs	r2, #0
 c000ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0x00000000;
 c000ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000aca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ace:	2200      	movs	r2, #0
 c000ad0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0x00000000;
 c000ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000ad8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000adc:	2200      	movs	r2, #0
 c000ade:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0x00000000;
 c000ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000ae6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000aea:	2200      	movs	r2, #0
 c000aec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0x00000000;
 c000af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000af4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000af8:	2200      	movs	r2, #0
 c000afa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0x00000000;
 c000afe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b06:	2200      	movs	r2, #0
 c000b08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0x00000000;
 c000b0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b14:	2200      	movs	r2, #0
 c000b16:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0x00000000;
 c000b1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b22:	2200      	movs	r2, #0
 c000b24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0x00000000;
 c000b28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b30:	2200      	movs	r2, #0
 c000b32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0x00000000;
 c000b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b3e:	2200      	movs	r2, #0
 c000b40:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0x00000000;
 c000b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b4c:	2200      	movs	r2, #0
 c000b4e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0x00000000;
 c000b52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b5a:	2200      	movs	r2, #0
 c000b5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0x00000000;
 c000b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b68:	2200      	movs	r2, #0
 c000b6a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0x00000000;
 c000b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b76:	2200      	movs	r2, #0
 c000b78:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0x00000000;
 c000b7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b84:	2200      	movs	r2, #0
 c000b86:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0x00000000;
 c000b8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b92:	2200      	movs	r2, #0
 c000b94:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0x00000000;
 c000b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ba0:	2200      	movs	r2, #0
 c000ba2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0x00000000;
 c000ba6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000baa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bae:	2200      	movs	r2, #0
 c000bb0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0x00000000;
 c000bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bbc:	2200      	movs	r2, #0
 c000bbe:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0x00000000;
 c000bc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bca:	2200      	movs	r2, #0
 c000bcc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0x00000000;
 c000bd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bd8:	2200      	movs	r2, #0
 c000bda:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0x00000000;
 c000bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000be2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000be6:	2200      	movs	r2, #0
 c000be8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0x00000000;
 c000bec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bf0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bf4:	2200      	movs	r2, #0
 c000bf6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0x00000000;
 c000bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c02:	2200      	movs	r2, #0
 c000c04:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0x00000000;
 c000c08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c10:	2200      	movs	r2, #0
 c000c12:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0x00000000;
 c000c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c1e:	2200      	movs	r2, #0
 c000c20:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0x00000000;
 c000c24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c2c:	2200      	movs	r2, #0
 c000c2e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0x00000000;
 c000c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c3a:	2200      	movs	r2, #0
 c000c3c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0x00000000;
 c000c40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c48:	2200      	movs	r2, #0
 c000c4a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0x00000000;
 c000c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c56:	2200      	movs	r2, #0
 c000c58:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000c5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000c60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000c64:	2200      	movs	r2, #0
 c000c66:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000c6a:	1d3b      	adds	r3, r7, #4
 c000c6c:	4619      	mov	r1, r3
 c000c6e:	4806      	ldr	r0, [pc, #24]	@ (c000c88 <MX_GTZC_S_Init+0x404>)
 c000c70:	f001 ff24 	bl	c002abc <HAL_GTZC_MPCBB_ConfigMem>
 c000c74:	4603      	mov	r3, r0
 c000c76:	2b00      	cmp	r3, #0
 c000c78:	d001      	beq.n	c000c7e <MX_GTZC_S_Init+0x3fa>
  {
    Error_Handler();
 c000c7a:	f000 f92b 	bl	c000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000c7e:	bf00      	nop
 c000c80:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c000c84:	46bd      	mov	sp, r7
 c000c86:	bd80      	pop	{r7, pc}
 c000c88:	30040000 	.word	0x30040000

0c000c8c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000c8c:	b580      	push	{r7, lr}
 c000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000c90:	2000      	movs	r0, #0
 c000c92:	f001 ffeb 	bl	c002c6c <HAL_ICACHE_ConfigAssociativityMode>
 c000c96:	4603      	mov	r3, r0
 c000c98:	2b00      	cmp	r3, #0
 c000c9a:	d001      	beq.n	c000ca0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000c9c:	f000 f91a 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000ca0:	f002 f804 	bl	c002cac <HAL_ICACHE_Enable>
 c000ca4:	4603      	mov	r3, r0
 c000ca6:	2b00      	cmp	r3, #0
 c000ca8:	d001      	beq.n	c000cae <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c000caa:	f000 f913 	bl	c000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000cae:	bf00      	nop
 c000cb0:	bd80      	pop	{r7, pc}
	...

0c000cb4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 c000cb4:	b580      	push	{r7, lr}
 c000cb6:	b086      	sub	sp, #24
 c000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000cba:	463b      	mov	r3, r7
 c000cbc:	2200      	movs	r2, #0
 c000cbe:	601a      	str	r2, [r3, #0]
 c000cc0:	605a      	str	r2, [r3, #4]
 c000cc2:	609a      	str	r2, [r3, #8]
 c000cc4:	60da      	str	r2, [r3, #12]
 c000cc6:	611a      	str	r2, [r3, #16]
 c000cc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 c000cca:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 c000cce:	f7ff fca9 	bl	c000624 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 c000cd2:	2002      	movs	r0, #2
 c000cd4:	f7ff fc8a 	bl	c0005ec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 c000cd8:	2001      	movs	r0, #1
 c000cda:	f7ff fc87 	bl	c0005ec <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 c000cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c000ce2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 c000ce4:	2303      	movs	r3, #3
 c000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 c000ce8:	2300      	movs	r3, #0
 c000cea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000cec:	463b      	mov	r3, r7
 c000cee:	4619      	mov	r1, r3
 c000cf0:	4809      	ldr	r0, [pc, #36]	@ (c000d18 <MX_UCPD1_Init+0x64>)
 c000cf2:	f006 ffd4 	bl	c007c9e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 c000cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c000cfa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 c000cfc:	2303      	movs	r3, #3
 c000cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 c000d00:	2300      	movs	r3, #0
 c000d02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c000d04:	463b      	mov	r3, r7
 c000d06:	4619      	mov	r1, r3
 c000d08:	4804      	ldr	r0, [pc, #16]	@ (c000d1c <MX_UCPD1_Init+0x68>)
 c000d0a:	f006 ffc8 	bl	c007c9e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 c000d0e:	bf00      	nop
 c000d10:	3718      	adds	r7, #24
 c000d12:	46bd      	mov	sp, r7
 c000d14:	bd80      	pop	{r7, pc}
 c000d16:	bf00      	nop
 c000d18:	52020400 	.word	0x52020400
 c000d1c:	52020000 	.word	0x52020000

0c000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c000d20:	b580      	push	{r7, lr}
 c000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c000d24:	4b22      	ldr	r3, [pc, #136]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d26:	4a23      	ldr	r2, [pc, #140]	@ (c000db4 <MX_USART1_UART_Init+0x94>)
 c000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c000d2a:	4b21      	ldr	r3, [pc, #132]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 c000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000d32:	4b1f      	ldr	r3, [pc, #124]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d34:	2200      	movs	r2, #0
 c000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000d38:	4b1d      	ldr	r3, [pc, #116]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d3a:	2200      	movs	r2, #0
 c000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 c000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d40:	2200      	movs	r2, #0
 c000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000d44:	4b1a      	ldr	r3, [pc, #104]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d46:	220c      	movs	r2, #12
 c000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000d4a:	4b19      	ldr	r3, [pc, #100]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d4c:	2200      	movs	r2, #0
 c000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000d50:	4b17      	ldr	r3, [pc, #92]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d52:	2200      	movs	r2, #0
 c000d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000d56:	4b16      	ldr	r3, [pc, #88]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d58:	2200      	movs	r2, #0
 c000d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000d5c:	4b14      	ldr	r3, [pc, #80]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d5e:	2200      	movs	r2, #0
 c000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000d62:	4b13      	ldr	r3, [pc, #76]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d64:	2200      	movs	r2, #0
 c000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c000d68:	4811      	ldr	r0, [pc, #68]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d6a:	f006 f93b 	bl	c006fe4 <HAL_UART_Init>
 c000d6e:	4603      	mov	r3, r0
 c000d70:	2b00      	cmp	r3, #0
 c000d72:	d001      	beq.n	c000d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 c000d74:	f000 f8ae 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000d78:	2100      	movs	r1, #0
 c000d7a:	480d      	ldr	r0, [pc, #52]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d7c:	f006 fd7a 	bl	c007874 <HAL_UARTEx_SetTxFifoThreshold>
 c000d80:	4603      	mov	r3, r0
 c000d82:	2b00      	cmp	r3, #0
 c000d84:	d001      	beq.n	c000d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 c000d86:	f000 f8a5 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000d8a:	2100      	movs	r1, #0
 c000d8c:	4808      	ldr	r0, [pc, #32]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d8e:	f006 fdaf 	bl	c0078f0 <HAL_UARTEx_SetRxFifoThreshold>
 c000d92:	4603      	mov	r3, r0
 c000d94:	2b00      	cmp	r3, #0
 c000d96:	d001      	beq.n	c000d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 c000d98:	f000 f89c 	bl	c000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000d9c:	4804      	ldr	r0, [pc, #16]	@ (c000db0 <MX_USART1_UART_Init+0x90>)
 c000d9e:	f006 fd30 	bl	c007802 <HAL_UARTEx_DisableFifoMode>
 c000da2:	4603      	mov	r3, r0
 c000da4:	2b00      	cmp	r3, #0
 c000da6:	d001      	beq.n	c000dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 c000da8:	f000 f894 	bl	c000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c000dac:	bf00      	nop
 c000dae:	bd80      	pop	{r7, pc}
 c000db0:	300000b4 	.word	0x300000b4
 c000db4:	50013800 	.word	0x50013800

0c000db8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 c000db8:	b580      	push	{r7, lr}
 c000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 c000dbc:	4b15      	ldr	r3, [pc, #84]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dbe:	4a16      	ldr	r2, [pc, #88]	@ (c000e18 <MX_USB_OTG_FS_PCD_Init+0x60>)
 c000dc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 c000dc2:	4b14      	ldr	r3, [pc, #80]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dc4:	2206      	movs	r2, #6
 c000dc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 c000dc8:	4b12      	ldr	r3, [pc, #72]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dca:	2202      	movs	r2, #2
 c000dcc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 c000dce:	4b11      	ldr	r3, [pc, #68]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dd0:	2202      	movs	r2, #2
 c000dd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 c000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dd6:	2200      	movs	r2, #0
 c000dd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 c000dda:	4b0e      	ldr	r3, [pc, #56]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000ddc:	2200      	movs	r2, #0
 c000dde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 c000de0:	4b0c      	ldr	r3, [pc, #48]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000de2:	2200      	movs	r2, #0
 c000de4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 c000de6:	4b0b      	ldr	r3, [pc, #44]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000de8:	2200      	movs	r2, #0
 c000dea:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 c000dec:	4b09      	ldr	r3, [pc, #36]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dee:	2200      	movs	r2, #0
 c000df0:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 c000df2:	4b08      	ldr	r3, [pc, #32]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000df4:	2200      	movs	r2, #0
 c000df6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 c000df8:	4b06      	ldr	r3, [pc, #24]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000dfa:	2200      	movs	r2, #0
 c000dfc:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 c000dfe:	4805      	ldr	r0, [pc, #20]	@ (c000e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c000e00:	f001 ff64 	bl	c002ccc <HAL_PCD_Init>
 c000e04:	4603      	mov	r3, r0
 c000e06:	2b00      	cmp	r3, #0
 c000e08:	d001      	beq.n	c000e0e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 c000e0a:	f000 f863 	bl	c000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 c000e0e:	bf00      	nop
 c000e10:	bd80      	pop	{r7, pc}
 c000e12:	bf00      	nop
 c000e14:	30000148 	.word	0x30000148
 c000e18:	52040000 	.word	0x52040000

0c000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000e1c:	b580      	push	{r7, lr}
 c000e1e:	b088      	sub	sp, #32
 c000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000e22:	f107 030c 	add.w	r3, r7, #12
 c000e26:	2200      	movs	r2, #0
 c000e28:	601a      	str	r2, [r3, #0]
 c000e2a:	605a      	str	r2, [r3, #4]
 c000e2c:	609a      	str	r2, [r3, #8]
 c000e2e:	60da      	str	r2, [r3, #12]
 c000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000e32:	4b25      	ldr	r3, [pc, #148]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e38:	4a23      	ldr	r2, [pc, #140]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e3a:	f043 0304 	orr.w	r3, r3, #4
 c000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000e42:	4b21      	ldr	r3, [pc, #132]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e48:	f003 0304 	and.w	r3, r3, #4
 c000e4c:	60bb      	str	r3, [r7, #8]
 c000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000e50:	4b1d      	ldr	r3, [pc, #116]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e56:	4a1c      	ldr	r2, [pc, #112]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e58:	f043 0302 	orr.w	r3, r3, #2
 c000e5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000e60:	4b19      	ldr	r3, [pc, #100]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e66:	f003 0302 	and.w	r3, r3, #2
 c000e6a:	607b      	str	r3, [r7, #4]
 c000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000e6e:	4b16      	ldr	r3, [pc, #88]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e74:	4a14      	ldr	r2, [pc, #80]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e76:	f043 0301 	orr.w	r3, r3, #1
 c000e7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000e7e:	4b12      	ldr	r3, [pc, #72]	@ (c000ec8 <MX_GPIO_Init+0xac>)
 c000e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e84:	f003 0301 	and.w	r3, r3, #1
 c000e88:	603b      	str	r3, [r7, #0]
 c000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 c000e8c:	2200      	movs	r2, #0
 c000e8e:	2180      	movs	r1, #128	@ 0x80
 c000e90:	480e      	ldr	r0, [pc, #56]	@ (c000ecc <MX_GPIO_Init+0xb0>)
 c000e92:	f001 fc35 	bl	c002700 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, GPIO_PIN_NSEC);
 c000e96:	2200      	movs	r2, #0
 c000e98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 c000e9c:	480c      	ldr	r0, [pc, #48]	@ (c000ed0 <MX_GPIO_Init+0xb4>)
 c000e9e:	f001 fc61 	bl	c002764 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 c000ea2:	2380      	movs	r3, #128	@ 0x80
 c000ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000ea6:	2301      	movs	r3, #1
 c000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000eaa:	2300      	movs	r3, #0
 c000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 c000eae:	2302      	movs	r3, #2
 c000eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 c000eb2:	f107 030c 	add.w	r3, r7, #12
 c000eb6:	4619      	mov	r1, r3
 c000eb8:	4804      	ldr	r0, [pc, #16]	@ (c000ecc <MX_GPIO_Init+0xb0>)
 c000eba:	f001 fa49 	bl	c002350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000ebe:	bf00      	nop
 c000ec0:	3720      	adds	r7, #32
 c000ec2:	46bd      	mov	sp, r7
 c000ec4:	bd80      	pop	{r7, pc}
 c000ec6:	bf00      	nop
 c000ec8:	56020c00 	.word	0x56020c00
 c000ecc:	52020400 	.word	0x52020400
 c000ed0:	52020800 	.word	0x52020800

0c000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000ed4:	b480      	push	{r7}
 c000ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000ed8:	b672      	cpsid	i
}
 c000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000edc:	bf00      	nop
 c000ede:	e7fd      	b.n	c000edc <Error_Handler+0x8>

0c000ee0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000ee0:	b480      	push	{r7}
 c000ee2:	b083      	sub	sp, #12
 c000ee4:	af00      	add	r7, sp, #0
 c000ee6:	4603      	mov	r3, r0
 c000ee8:	6039      	str	r1, [r7, #0]
 c000eea:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000eec:	683b      	ldr	r3, [r7, #0]
 c000eee:	2b00      	cmp	r3, #0
 c000ef0:	d00d      	beq.n	c000f0e <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000ef2:	79fb      	ldrb	r3, [r7, #7]
 c000ef4:	2b00      	cmp	r3, #0
 c000ef6:	d002      	beq.n	c000efe <__acle_se_SECURE_RegisterCallback+0x1e>
 c000ef8:	2b01      	cmp	r3, #1
 c000efa:	d004      	beq.n	c000f06 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000efc:	e007      	b.n	c000f0e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000efe:	4a20      	ldr	r2, [pc, #128]	@ (c000f80 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000f00:	683b      	ldr	r3, [r7, #0]
 c000f02:	6013      	str	r3, [r2, #0]
        break;
 c000f04:	e003      	b.n	c000f0e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000f06:	4a1f      	ldr	r2, [pc, #124]	@ (c000f84 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000f08:	683b      	ldr	r3, [r7, #0]
 c000f0a:	6013      	str	r3, [r2, #0]
        break;
 c000f0c:	bf00      	nop
    }
  }
}
 c000f0e:	bf00      	nop
 c000f10:	370c      	adds	r7, #12
 c000f12:	46bd      	mov	sp, r7
 c000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f18:	4670      	mov	r0, lr
 c000f1a:	4671      	mov	r1, lr
 c000f1c:	4672      	mov	r2, lr
 c000f1e:	4673      	mov	r3, lr
 c000f20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000f24:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000f28:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000f2c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000f30:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000f34:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000f38:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000f3c:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000f40:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000f44:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000f48:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000f4c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000f50:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000f54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000f5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000f60:	f38e 8c00 	msr	CPSR_fs, lr
 c000f64:	b410      	push	{r4}
 c000f66:	eef1 ca10 	vmrs	ip, fpscr
 c000f6a:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000f6e:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000f72:	ea0c 0c04 	and.w	ip, ip, r4
 c000f76:	eee1 ca10 	vmsr	fpscr, ip
 c000f7a:	bc10      	pop	{r4}
 c000f7c:	46f4      	mov	ip, lr
 c000f7e:	4774      	bxns	lr
 c000f80:	3000062c 	.word	0x3000062c
 c000f84:	30000630 	.word	0x30000630

0c000f88 <__acle_se_Toggle_Pin>:

CMSE_NS_ENTRY void Toggle_Pin(void) {
 c000f88:	b580      	push	{r7, lr}
 c000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 c000f8c:	2180      	movs	r1, #128	@ 0x80
 c000f8e:	481d      	ldr	r0, [pc, #116]	@ (c001004 <__acle_se_Toggle_Pin+0x7c>)
 c000f90:	f001 fbce 	bl	c002730 <HAL_GPIO_TogglePin>
}
 c000f94:	bf00      	nop
 c000f96:	46bd      	mov	sp, r7
 c000f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000f9c:	4670      	mov	r0, lr
 c000f9e:	4671      	mov	r1, lr
 c000fa0:	4672      	mov	r2, lr
 c000fa2:	4673      	mov	r3, lr
 c000fa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000fa8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000fac:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000fb0:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000fb4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000fb8:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000fbc:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000fc0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000fc4:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000fc8:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000fcc:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000fd0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000fd4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000fe0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000fe4:	f38e 8c00 	msr	CPSR_fs, lr
 c000fe8:	b410      	push	{r4}
 c000fea:	eef1 ca10 	vmrs	ip, fpscr
 c000fee:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000ff2:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000ff6:	ea0c 0c04 	and.w	ip, ip, r4
 c000ffa:	eee1 ca10 	vmsr	fpscr, ip
 c000ffe:	bc10      	pop	{r4}
 c001000:	46f4      	mov	ip, lr
 c001002:	4774      	bxns	lr
 c001004:	52020400 	.word	0x52020400

0c001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c001008:	b580      	push	{r7, lr}
 c00100a:	b082      	sub	sp, #8
 c00100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c00100e:	4b12      	ldr	r3, [pc, #72]	@ (c001058 <HAL_MspInit+0x50>)
 c001010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c001014:	4a10      	ldr	r2, [pc, #64]	@ (c001058 <HAL_MspInit+0x50>)
 c001016:	f043 0304 	orr.w	r3, r3, #4
 c00101a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00101e:	4b0e      	ldr	r3, [pc, #56]	@ (c001058 <HAL_MspInit+0x50>)
 c001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c001024:	f003 0304 	and.w	r3, r3, #4
 c001028:	607b      	str	r3, [r7, #4]
 c00102a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GTZC1_CLK_ENABLE();
 c00102c:	4b0a      	ldr	r3, [pc, #40]	@ (c001058 <HAL_MspInit+0x50>)
 c00102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c001032:	4a09      	ldr	r2, [pc, #36]	@ (c001058 <HAL_MspInit+0x50>)
 c001034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c00103c:	4b06      	ldr	r3, [pc, #24]	@ (c001058 <HAL_MspInit+0x50>)
 c00103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c001042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c001046:	603b      	str	r3, [r7, #0]
 c001048:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddA();
 c00104a:	f002 f877 	bl	c00313c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c00104e:	bf00      	nop
 c001050:	3708      	adds	r7, #8
 c001052:	46bd      	mov	sp, r7
 c001054:	bd80      	pop	{r7, pc}
 c001056:	bf00      	nop
 c001058:	56020c00 	.word	0x56020c00

0c00105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 c00105c:	b580      	push	{r7, lr}
 c00105e:	b0ba      	sub	sp, #232	@ 0xe8
 c001060:	af00      	add	r7, sp, #0
 c001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001064:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 c001068:	2200      	movs	r2, #0
 c00106a:	601a      	str	r2, [r3, #0]
 c00106c:	605a      	str	r2, [r3, #4]
 c00106e:	609a      	str	r2, [r3, #8]
 c001070:	60da      	str	r2, [r3, #12]
 c001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001074:	f107 0310 	add.w	r3, r7, #16
 c001078:	22c0      	movs	r2, #192	@ 0xc0
 c00107a:	2100      	movs	r1, #0
 c00107c:	4618      	mov	r0, r3
 c00107e:	f007 f93c 	bl	c0082fa <memset>
  if(hadc->Instance==ADC1)
 c001082:	687b      	ldr	r3, [r7, #4]
 c001084:	681b      	ldr	r3, [r3, #0]
 c001086:	4a24      	ldr	r2, [pc, #144]	@ (c001118 <HAL_ADC_MspInit+0xbc>)
 c001088:	4293      	cmp	r3, r2
 c00108a:	d140      	bne.n	c00110e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 c00108c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c001090:	f04f 0300 	mov.w	r3, #0
 c001094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 c001098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c00109c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0010a0:	f107 0310 	add.w	r3, r7, #16
 c0010a4:	4618      	mov	r0, r3
 c0010a6:	f003 fb05 	bl	c0046b4 <HAL_RCCEx_PeriphCLKConfig>
 c0010aa:	4603      	mov	r3, r0
 c0010ac:	2b00      	cmp	r3, #0
 c0010ae:	d001      	beq.n	c0010b4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 c0010b0:	f7ff ff10 	bl	c000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 c0010b4:	4b19      	ldr	r3, [pc, #100]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0010ba:	4a18      	ldr	r2, [pc, #96]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 c0010c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0010c4:	4b15      	ldr	r3, [pc, #84]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0010ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0010ce:	60fb      	str	r3, [r7, #12]
 c0010d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 c0010d2:	4b12      	ldr	r3, [pc, #72]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0010d8:	4a10      	ldr	r2, [pc, #64]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010da:	f043 0304 	orr.w	r3, r3, #4
 c0010de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0010e2:	4b0e      	ldr	r3, [pc, #56]	@ (c00111c <HAL_ADC_MspInit+0xc0>)
 c0010e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0010e8:	f003 0304 	and.w	r3, r3, #4
 c0010ec:	60bb      	str	r3, [r7, #8]
 c0010ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 c0010f0:	2304      	movs	r3, #4
 c0010f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 c0010f6:	2303      	movs	r3, #3
 c0010f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0010fc:	2300      	movs	r3, #0
 c0010fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 c001102:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 c001106:	4619      	mov	r1, r3
 c001108:	4805      	ldr	r0, [pc, #20]	@ (c001120 <HAL_ADC_MspInit+0xc4>)
 c00110a:	f001 f921 	bl	c002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 c00110e:	bf00      	nop
 c001110:	37e8      	adds	r7, #232	@ 0xe8
 c001112:	46bd      	mov	sp, r7
 c001114:	bd80      	pop	{r7, pc}
 c001116:	bf00      	nop
 c001118:	52028000 	.word	0x52028000
 c00111c:	56020c00 	.word	0x56020c00
 c001120:	52020800 	.word	0x52020800

0c001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c001124:	b580      	push	{r7, lr}
 c001126:	b0ba      	sub	sp, #232	@ 0xe8
 c001128:	af00      	add	r7, sp, #0
 c00112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00112c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 c001130:	2200      	movs	r2, #0
 c001132:	601a      	str	r2, [r3, #0]
 c001134:	605a      	str	r2, [r3, #4]
 c001136:	609a      	str	r2, [r3, #8]
 c001138:	60da      	str	r2, [r3, #12]
 c00113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c00113c:	f107 0310 	add.w	r3, r7, #16
 c001140:	22c0      	movs	r2, #192	@ 0xc0
 c001142:	2100      	movs	r1, #0
 c001144:	4618      	mov	r0, r3
 c001146:	f007 f8d8 	bl	c0082fa <memset>
  if(huart->Instance==USART1)
 c00114a:	687b      	ldr	r3, [r7, #4]
 c00114c:	681b      	ldr	r3, [r3, #0]
 c00114e:	4a26      	ldr	r2, [pc, #152]	@ (c0011e8 <HAL_UART_MspInit+0xc4>)
 c001150:	4293      	cmp	r3, r2
 c001152:	d145      	bne.n	c0011e0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c001154:	f04f 0201 	mov.w	r2, #1
 c001158:	f04f 0300 	mov.w	r3, #0
 c00115c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c001160:	2300      	movs	r3, #0
 c001162:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001164:	f107 0310 	add.w	r3, r7, #16
 c001168:	4618      	mov	r0, r3
 c00116a:	f003 faa3 	bl	c0046b4 <HAL_RCCEx_PeriphCLKConfig>
 c00116e:	4603      	mov	r3, r0
 c001170:	2b00      	cmp	r3, #0
 c001172:	d001      	beq.n	c001178 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 c001174:	f7ff feae 	bl	c000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c001178:	4b1c      	ldr	r3, [pc, #112]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c00117a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c00117e:	4a1b      	ldr	r2, [pc, #108]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c001184:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 c001188:	4b18      	ldr	r3, [pc, #96]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c00118a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c00118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c001192:	60fb      	str	r3, [r7, #12]
 c001194:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c001196:	4b15      	ldr	r3, [pc, #84]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c001198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00119c:	4a13      	ldr	r2, [pc, #76]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c00119e:	f043 0301 	orr.w	r3, r3, #1
 c0011a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0011a6:	4b11      	ldr	r3, [pc, #68]	@ (c0011ec <HAL_UART_MspInit+0xc8>)
 c0011a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0011ac:	f003 0301 	and.w	r3, r3, #1
 c0011b0:	60bb      	str	r3, [r7, #8]
 c0011b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 c0011b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 c0011b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0011bc:	2302      	movs	r3, #2
 c0011be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 c0011c2:	2302      	movs	r3, #2
 c0011c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c0011c8:	2303      	movs	r3, #3
 c0011ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c0011ce:	2307      	movs	r3, #7
 c0011d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0011d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 c0011d8:	4619      	mov	r1, r3
 c0011da:	4805      	ldr	r0, [pc, #20]	@ (c0011f0 <HAL_UART_MspInit+0xcc>)
 c0011dc:	f001 f8b8 	bl	c002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c0011e0:	bf00      	nop
 c0011e2:	37e8      	adds	r7, #232	@ 0xe8
 c0011e4:	46bd      	mov	sp, r7
 c0011e6:	bd80      	pop	{r7, pc}
 c0011e8:	50013800 	.word	0x50013800
 c0011ec:	56020c00 	.word	0x56020c00
 c0011f0:	52020000 	.word	0x52020000

0c0011f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 c0011f4:	b580      	push	{r7, lr}
 c0011f6:	b0bc      	sub	sp, #240	@ 0xf0
 c0011f8:	af00      	add	r7, sp, #0
 c0011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0011fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c001200:	2200      	movs	r2, #0
 c001202:	601a      	str	r2, [r3, #0]
 c001204:	605a      	str	r2, [r3, #4]
 c001206:	609a      	str	r2, [r3, #8]
 c001208:	60da      	str	r2, [r3, #12]
 c00120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c00120c:	f107 0318 	add.w	r3, r7, #24
 c001210:	22c0      	movs	r2, #192	@ 0xc0
 c001212:	2100      	movs	r1, #0
 c001214:	4618      	mov	r0, r3
 c001216:	f007 f870 	bl	c0082fa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 c00121a:	687b      	ldr	r3, [r7, #4]
 c00121c:	681b      	ldr	r3, [r3, #0]
 c00121e:	4a38      	ldr	r2, [pc, #224]	@ (c001300 <HAL_PCD_MspInit+0x10c>)
 c001220:	4293      	cmp	r3, r2
 c001222:	d169      	bne.n	c0012f8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 c001224:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 c001228:	f04f 0300 	mov.w	r3, #0
 c00122c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 c001230:	2300      	movs	r3, #0
 c001232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001236:	f107 0318 	add.w	r3, r7, #24
 c00123a:	4618      	mov	r0, r3
 c00123c:	f003 fa3a 	bl	c0046b4 <HAL_RCCEx_PeriphCLKConfig>
 c001240:	4603      	mov	r3, r0
 c001242:	2b00      	cmp	r3, #0
 c001244:	d001      	beq.n	c00124a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 c001246:	f7ff fe45 	bl	c000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c00124a:	4b2e      	ldr	r3, [pc, #184]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c00124c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c001250:	4a2c      	ldr	r2, [pc, #176]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c001252:	f043 0301 	orr.w	r3, r3, #1
 c001256:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00125a:	4b2a      	ldr	r3, [pc, #168]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c00125c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c001260:	f003 0301 	and.w	r3, r3, #1
 c001264:	617b      	str	r3, [r7, #20]
 c001266:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 c001268:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 c00126c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001270:	2302      	movs	r3, #2
 c001272:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001276:	2300      	movs	r3, #0
 c001278:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 c00127c:	2302      	movs	r3, #2
 c00127e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 c001282:	230a      	movs	r3, #10
 c001284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c001288:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c00128c:	4619      	mov	r1, r3
 c00128e:	481e      	ldr	r0, [pc, #120]	@ (c001308 <HAL_PCD_MspInit+0x114>)
 c001290:	f001 f85e 	bl	c002350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 c001294:	4b1b      	ldr	r3, [pc, #108]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00129a:	4a1a      	ldr	r2, [pc, #104]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c00129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c0012a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0012a4:	4b17      	ldr	r3, [pc, #92]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c0012ae:	613b      	str	r3, [r7, #16]
 c0012b0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0012b2:	4b14      	ldr	r3, [pc, #80]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0012b8:	f003 0304 	and.w	r3, r3, #4
 c0012bc:	2b00      	cmp	r3, #0
 c0012be:	d119      	bne.n	c0012f4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0012c0:	4b10      	ldr	r3, [pc, #64]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0012c6:	4a0f      	ldr	r2, [pc, #60]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012c8:	f043 0304 	orr.w	r3, r3, #4
 c0012cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c0012d0:	4b0c      	ldr	r3, [pc, #48]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0012d6:	f003 0304 	and.w	r3, r3, #4
 c0012da:	60fb      	str	r3, [r7, #12]
 c0012dc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 c0012de:	f001 ff0d 	bl	c0030fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 c0012e2:	4b08      	ldr	r3, [pc, #32]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0012e8:	4a06      	ldr	r2, [pc, #24]	@ (c001304 <HAL_PCD_MspInit+0x110>)
 c0012ea:	f023 0304 	bic.w	r3, r3, #4
 c0012ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 c0012f2:	e001      	b.n	c0012f8 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 c0012f4:	f001 ff02 	bl	c0030fc <HAL_PWREx_EnableVddUSB>
}
 c0012f8:	bf00      	nop
 c0012fa:	37f0      	adds	r7, #240	@ 0xf0
 c0012fc:	46bd      	mov	sp, r7
 c0012fe:	bd80      	pop	{r7, pc}
 c001300:	52040000 	.word	0x52040000
 c001304:	56020c00 	.word	0x56020c00
 c001308:	52020000 	.word	0x52020000

0c00130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c00130c:	b480      	push	{r7}
 c00130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c001310:	bf00      	nop
 c001312:	e7fd      	b.n	c001310 <NMI_Handler+0x4>

0c001314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001314:	b480      	push	{r7}
 c001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001318:	bf00      	nop
 c00131a:	e7fd      	b.n	c001318 <HardFault_Handler+0x4>

0c00131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c00131c:	b480      	push	{r7}
 c00131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001320:	bf00      	nop
 c001322:	e7fd      	b.n	c001320 <MemManage_Handler+0x4>

0c001324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001324:	b480      	push	{r7}
 c001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001328:	bf00      	nop
 c00132a:	e7fd      	b.n	c001328 <BusFault_Handler+0x4>

0c00132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c00132c:	b480      	push	{r7}
 c00132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001330:	bf00      	nop
 c001332:	e7fd      	b.n	c001330 <UsageFault_Handler+0x4>

0c001334 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001334:	b480      	push	{r7}
 c001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001338:	bf00      	nop
 c00133a:	e7fd      	b.n	c001338 <SecureFault_Handler+0x4>

0c00133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c00133c:	b480      	push	{r7}
 c00133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001340:	bf00      	nop
 c001342:	46bd      	mov	sp, r7
 c001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001348:	4770      	bx	lr

0c00134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c00134a:	b480      	push	{r7}
 c00134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00134e:	bf00      	nop
 c001350:	46bd      	mov	sp, r7
 c001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001356:	4770      	bx	lr

0c001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001358:	b480      	push	{r7}
 c00135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c00135c:	bf00      	nop
 c00135e:	46bd      	mov	sp, r7
 c001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001364:	4770      	bx	lr

0c001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001366:	b580      	push	{r7, lr}
 c001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00136a:	f000 fa7d 	bl	c001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00136e:	bf00      	nop
 c001370:	bd80      	pop	{r7, pc}
	...

0c001374 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001374:	b480      	push	{r7}
 c001376:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001378:	4b13      	ldr	r3, [pc, #76]	@ (c0013c8 <TZ_SAU_Setup+0x54>)
 c00137a:	2202      	movs	r2, #2
 c00137c:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00137e:	4b13      	ldr	r3, [pc, #76]	@ (c0013cc <TZ_SAU_Setup+0x58>)
 c001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c001384:	4a11      	ldr	r2, [pc, #68]	@ (c0013cc <TZ_SAU_Setup+0x58>)
 c001386:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c00138a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00138e:	4b10      	ldr	r3, [pc, #64]	@ (c0013d0 <TZ_SAU_Setup+0x5c>)
 c001390:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001392:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001396:	4a0e      	ldr	r2, [pc, #56]	@ (c0013d0 <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00139c:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00139e:	4b0d      	ldr	r3, [pc, #52]	@ (c0013d4 <TZ_SAU_Setup+0x60>)
 c0013a0:	2200      	movs	r2, #0
 c0013a2:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0013a6:	4b0b      	ldr	r3, [pc, #44]	@ (c0013d4 <TZ_SAU_Setup+0x60>)
 c0013a8:	2200      	movs	r2, #0
 c0013aa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0013ae:	4b09      	ldr	r3, [pc, #36]	@ (c0013d4 <TZ_SAU_Setup+0x60>)
 c0013b0:	2200      	movs	r2, #0
 c0013b2:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0013b6:	4b07      	ldr	r3, [pc, #28]	@ (c0013d4 <TZ_SAU_Setup+0x60>)
 c0013b8:	2200      	movs	r2, #0
 c0013ba:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c0013be:	bf00      	nop
 c0013c0:	46bd      	mov	sp, r7
 c0013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013c6:	4770      	bx	lr
 c0013c8:	e000edd0 	.word	0xe000edd0
 c0013cc:	e000ed00 	.word	0xe000ed00
 c0013d0:	e000ef30 	.word	0xe000ef30
 c0013d4:	e000e100 	.word	0xe000e100

0c0013d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c0013d8:	b580      	push	{r7, lr}
 c0013da:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0013dc:	f7ff ffca 	bl	c001374 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c0013e0:	4b1a      	ldr	r3, [pc, #104]	@ (c00144c <SystemInit+0x74>)
 c0013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0013e6:	4a19      	ldr	r2, [pc, #100]	@ (c00144c <SystemInit+0x74>)
 c0013e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0013ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0013f0:	4b17      	ldr	r3, [pc, #92]	@ (c001450 <SystemInit+0x78>)
 c0013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0013f6:	4a16      	ldr	r2, [pc, #88]	@ (c001450 <SystemInit+0x78>)
 c0013f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0013fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c001400:	4b14      	ldr	r3, [pc, #80]	@ (c001454 <SystemInit+0x7c>)
 c001402:	2201      	movs	r2, #1
 c001404:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c001406:	4b13      	ldr	r3, [pc, #76]	@ (c001454 <SystemInit+0x7c>)
 c001408:	2200      	movs	r2, #0
 c00140a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c00140c:	4b11      	ldr	r3, [pc, #68]	@ (c001454 <SystemInit+0x7c>)
 c00140e:	2200      	movs	r2, #0
 c001410:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c001412:	4b10      	ldr	r3, [pc, #64]	@ (c001454 <SystemInit+0x7c>)
 c001414:	2200      	movs	r2, #0
 c001416:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c001418:	4b0e      	ldr	r3, [pc, #56]	@ (c001454 <SystemInit+0x7c>)
 c00141a:	681b      	ldr	r3, [r3, #0]
 c00141c:	4a0d      	ldr	r2, [pc, #52]	@ (c001454 <SystemInit+0x7c>)
 c00141e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 c001422:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 c001426:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c001428:	4b0a      	ldr	r3, [pc, #40]	@ (c001454 <SystemInit+0x7c>)
 c00142a:	2200      	movs	r2, #0
 c00142c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c00142e:	4b09      	ldr	r3, [pc, #36]	@ (c001454 <SystemInit+0x7c>)
 c001430:	681b      	ldr	r3, [r3, #0]
 c001432:	4a08      	ldr	r2, [pc, #32]	@ (c001454 <SystemInit+0x7c>)
 c001434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c001438:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c00143a:	4b06      	ldr	r3, [pc, #24]	@ (c001454 <SystemInit+0x7c>)
 c00143c:	2200      	movs	r2, #0
 c00143e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c001440:	4b02      	ldr	r3, [pc, #8]	@ (c00144c <SystemInit+0x74>)
 c001442:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c001446:	609a      	str	r2, [r3, #8]
#endif
}
 c001448:	bf00      	nop
 c00144a:	bd80      	pop	{r7, pc}
 c00144c:	e000ed00 	.word	0xe000ed00
 c001450:	e002ed00 	.word	0xe002ed00
 c001454:	56020c00 	.word	0x56020c00

0c001458 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001458:	b480      	push	{r7}
 c00145a:	b089      	sub	sp, #36	@ 0x24
 c00145c:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c00145e:	4b73      	ldr	r3, [pc, #460]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c001460:	689b      	ldr	r3, [r3, #8]
 c001462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c001466:	2b00      	cmp	r3, #0
 c001468:	d107      	bne.n	c00147a <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c00146a:	4b70      	ldr	r3, [pc, #448]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c00146c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c001470:	0b1b      	lsrs	r3, r3, #12
 c001472:	f003 030f 	and.w	r3, r3, #15
 c001476:	61fb      	str	r3, [r7, #28]
 c001478:	e005      	b.n	c001486 <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c00147a:	4b6c      	ldr	r3, [pc, #432]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c00147c:	689b      	ldr	r3, [r3, #8]
 c00147e:	0f1b      	lsrs	r3, r3, #28
 c001480:	f003 030f 	and.w	r3, r3, #15
 c001484:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001486:	4a6a      	ldr	r2, [pc, #424]	@ (c001630 <SystemCoreClockUpdate+0x1d8>)
 c001488:	69fb      	ldr	r3, [r7, #28]
 c00148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00148e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c001490:	4b66      	ldr	r3, [pc, #408]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c001492:	69db      	ldr	r3, [r3, #28]
 c001494:	f003 030c 	and.w	r3, r3, #12
 c001498:	2b0c      	cmp	r3, #12
 c00149a:	f200 80ae 	bhi.w	c0015fa <SystemCoreClockUpdate+0x1a2>
 c00149e:	a201      	add	r2, pc, #4	@ (adr r2, c0014a4 <SystemCoreClockUpdate+0x4c>)
 c0014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0014a4:	0c0014d9 	.word	0x0c0014d9
 c0014a8:	0c0015fb 	.word	0x0c0015fb
 c0014ac:	0c0015fb 	.word	0x0c0015fb
 c0014b0:	0c0015fb 	.word	0x0c0015fb
 c0014b4:	0c0014e1 	.word	0x0c0014e1
 c0014b8:	0c0015fb 	.word	0x0c0015fb
 c0014bc:	0c0015fb 	.word	0x0c0015fb
 c0014c0:	0c0015fb 	.word	0x0c0015fb
 c0014c4:	0c0014e9 	.word	0x0c0014e9
 c0014c8:	0c0015fb 	.word	0x0c0015fb
 c0014cc:	0c0015fb 	.word	0x0c0015fb
 c0014d0:	0c0015fb 	.word	0x0c0015fb
 c0014d4:	0c0014f1 	.word	0x0c0014f1
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c0014d8:	4a56      	ldr	r2, [pc, #344]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c0014da:	69fb      	ldr	r3, [r7, #28]
 c0014dc:	6013      	str	r3, [r2, #0]
    break;
 c0014de:	e090      	b.n	c001602 <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c0014e0:	4b54      	ldr	r3, [pc, #336]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c0014e2:	4a55      	ldr	r2, [pc, #340]	@ (c001638 <SystemCoreClockUpdate+0x1e0>)
 c0014e4:	601a      	str	r2, [r3, #0]
    break;
 c0014e6:	e08c      	b.n	c001602 <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c0014e8:	4b52      	ldr	r3, [pc, #328]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c0014ea:	4a53      	ldr	r2, [pc, #332]	@ (c001638 <SystemCoreClockUpdate+0x1e0>)
 c0014ec:	601a      	str	r2, [r3, #0]
    break;
 c0014ee:	e088      	b.n	c001602 <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c0014f0:	4b4e      	ldr	r3, [pc, #312]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c0014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0014f4:	f003 0303 	and.w	r3, r3, #3
 c0014f8:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c0014fa:	4b4c      	ldr	r3, [pc, #304]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c0014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0014fe:	0a1b      	lsrs	r3, r3, #8
 c001500:	f003 030f 	and.w	r3, r3, #15
 c001504:	3301      	adds	r3, #1
 c001506:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001508:	4b48      	ldr	r3, [pc, #288]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c00150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00150c:	091b      	lsrs	r3, r3, #4
 c00150e:	f003 0301 	and.w	r3, r3, #1
 c001512:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c001514:	4b45      	ldr	r3, [pc, #276]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c001516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c001518:	08db      	lsrs	r3, r3, #3
 c00151a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00151e:	68fa      	ldr	r2, [r7, #12]
 c001520:	fb02 f303 	mul.w	r3, r2, r3
 c001524:	ee07 3a90 	vmov	s15, r3
 c001528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00152c:	edc7 7a02 	vstr	s15, [r7, #8]
 c001530:	697b      	ldr	r3, [r7, #20]
 c001532:	2b03      	cmp	r3, #3
 c001534:	d019      	beq.n	c00156a <SystemCoreClockUpdate+0x112>
 c001536:	697b      	ldr	r3, [r7, #20]
 c001538:	2b03      	cmp	r3, #3
 c00153a:	d822      	bhi.n	c001582 <SystemCoreClockUpdate+0x12a>
 c00153c:	697b      	ldr	r3, [r7, #20]
 c00153e:	2b00      	cmp	r3, #0
 c001540:	d003      	beq.n	c00154a <SystemCoreClockUpdate+0xf2>
 c001542:	697b      	ldr	r3, [r7, #20]
 c001544:	2b02      	cmp	r3, #2
 c001546:	d004      	beq.n	c001552 <SystemCoreClockUpdate+0xfa>
 c001548:	e01b      	b.n	c001582 <SystemCoreClockUpdate+0x12a>

      switch (pllsource)
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c00154a:	f04f 0300 	mov.w	r3, #0
 c00154e:	61bb      	str	r3, [r7, #24]
        break;
 c001550:	e026      	b.n	c0015a0 <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c001552:	693b      	ldr	r3, [r7, #16]
 c001554:	ee07 3a90 	vmov	s15, r3
 c001558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c00155c:	eddf 6a37 	vldr	s13, [pc, #220]	@ c00163c <SystemCoreClockUpdate+0x1e4>
 c001560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001564:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c001568:	e01a      	b.n	c0015a0 <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c00156a:	693b      	ldr	r3, [r7, #16]
 c00156c:	ee07 3a90 	vmov	s15, r3
 c001570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001574:	eddf 6a31 	vldr	s13, [pc, #196]	@ c00163c <SystemCoreClockUpdate+0x1e4>
 c001578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00157c:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c001580:	e00e      	b.n	c0015a0 <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c001582:	69fb      	ldr	r3, [r7, #28]
 c001584:	ee07 3a90 	vmov	s15, r3
 c001588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00158c:	693b      	ldr	r3, [r7, #16]
 c00158e:	ee07 3a90 	vmov	s15, r3
 c001592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00159a:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c00159e:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c0015a0:	4b22      	ldr	r3, [pc, #136]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c0015a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0015a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0015a8:	ee07 3a90 	vmov	s15, r3
 c0015ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0015b0:	edd7 6a02 	vldr	s13, [r7, #8]
 c0015b4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ c001640 <SystemCoreClockUpdate+0x1e8>
 c0015b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c0015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 c0015c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0015c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 c0015c8:	ed97 7a06 	vldr	s14, [r7, #24]
 c0015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0015d0:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c0015d4:	4b15      	ldr	r3, [pc, #84]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c0015d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0015d8:	0e1b      	lsrs	r3, r3, #24
 c0015da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0015de:	3301      	adds	r3, #1
 c0015e0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c0015e2:	edd7 7a06 	vldr	s15, [r7, #24]
 c0015e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0015ea:	ee17 2a90 	vmov	r2, s15
 c0015ee:	687b      	ldr	r3, [r7, #4]
 c0015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0015f4:	4a0f      	ldr	r2, [pc, #60]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c0015f6:	6013      	str	r3, [r2, #0]
      break;
 c0015f8:	e003      	b.n	c001602 <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c0015fa:	4a0e      	ldr	r2, [pc, #56]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c0015fc:	69fb      	ldr	r3, [r7, #28]
 c0015fe:	6013      	str	r3, [r2, #0]
    break;
 c001600:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c001602:	4b0a      	ldr	r3, [pc, #40]	@ (c00162c <SystemCoreClockUpdate+0x1d4>)
 c001604:	6a1b      	ldr	r3, [r3, #32]
 c001606:	f003 030f 	and.w	r3, r3, #15
 c00160a:	4a0e      	ldr	r2, [pc, #56]	@ (c001644 <SystemCoreClockUpdate+0x1ec>)
 c00160c:	5cd3      	ldrb	r3, [r2, r3]
 c00160e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001610:	4b08      	ldr	r3, [pc, #32]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c001612:	681a      	ldr	r2, [r3, #0]
 c001614:	683b      	ldr	r3, [r7, #0]
 c001616:	fa22 f303 	lsr.w	r3, r2, r3
 c00161a:	4a06      	ldr	r2, [pc, #24]	@ (c001634 <SystemCoreClockUpdate+0x1dc>)
 c00161c:	6013      	str	r3, [r2, #0]
}
 c00161e:	bf00      	nop
 c001620:	3724      	adds	r7, #36	@ 0x24
 c001622:	46bd      	mov	sp, r7
 c001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001628:	4770      	bx	lr
 c00162a:	bf00      	nop
 c00162c:	56020c00 	.word	0x56020c00
 c001630:	0c008384 	.word	0x0c008384
 c001634:	30000000 	.word	0x30000000
 c001638:	00f42400 	.word	0x00f42400
 c00163c:	4b742400 	.word	0x4b742400
 c001640:	46000000 	.word	0x46000000
 c001644:	0c00836c 	.word	0x0c00836c

0c001648 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001648:	b580      	push	{r7, lr}
 c00164a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00164c:	f7ff ff04 	bl	c001458 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c001650:	4b1c      	ldr	r3, [pc, #112]	@ (c0016c4 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001652:	681b      	ldr	r3, [r3, #0]
}
 c001654:	4618      	mov	r0, r3
 c001656:	46bd      	mov	sp, r7
 c001658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00165c:	4671      	mov	r1, lr
 c00165e:	4672      	mov	r2, lr
 c001660:	4673      	mov	r3, lr
 c001662:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001666:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00166a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00166e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001672:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001676:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c00167a:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00167e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001682:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001686:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00168a:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00168e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001692:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00169a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00169e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0016a2:	f38e 8c00 	msr	CPSR_fs, lr
 c0016a6:	b410      	push	{r4}
 c0016a8:	eef1 ca10 	vmrs	ip, fpscr
 c0016ac:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0016b0:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0016b4:	ea0c 0c04 	and.w	ip, ip, r4
 c0016b8:	eee1 ca10 	vmsr	fpscr, ip
 c0016bc:	bc10      	pop	{r4}
 c0016be:	46f4      	mov	ip, lr
 c0016c0:	4774      	bxns	lr
 c0016c2:	bf00      	nop
 c0016c4:	30000000 	.word	0x30000000

0c0016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0016c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ c001700 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c0016cc:	f7ff fe84 	bl	c0013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0016d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0016d2:	e003      	b.n	c0016dc <LoopCopyDataInit>

0c0016d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0016d4:	4b0b      	ldr	r3, [pc, #44]	@ (c001704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0016d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0016d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0016da:	3104      	adds	r1, #4

0c0016dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0016dc:	480a      	ldr	r0, [pc, #40]	@ (c001708 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0016de:	4b0b      	ldr	r3, [pc, #44]	@ (c00170c <LoopForever+0xe>)
	adds	r2, r0, r1
 c0016e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0016e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0016e4:	d3f6      	bcc.n	c0016d4 <CopyDataInit>
	ldr	r2, =_sbss
 c0016e6:	4a0a      	ldr	r2, [pc, #40]	@ (c001710 <LoopForever+0x12>)
	b	LoopFillZerobss
 c0016e8:	e002      	b.n	c0016f0 <LoopFillZerobss>

0c0016ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0016ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0016ec:	f842 3b04 	str.w	r3, [r2], #4

0c0016f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0016f0:	4b08      	ldr	r3, [pc, #32]	@ (c001714 <LoopForever+0x16>)
	cmp	r2, r3
 c0016f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0016f4:	d3f9      	bcc.n	c0016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c0016f6:	f006 fe09 	bl	c00830c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0016fa:	f7fe ffaf 	bl	c00065c <main>

0c0016fe <LoopForever>:

LoopForever:
    b LoopForever
 c0016fe:	e7fe      	b.n	c0016fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001700:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c001704:	0c00847c 	.word	0x0c00847c
	ldr	r0, =_sdata
 c001708:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c00170c:	30000009 	.word	0x30000009
	ldr	r2, =_sbss
 c001710:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c001714:	30000638 	.word	0x30000638

0c001718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001718:	e7fe      	b.n	c001718 <ADC1_IRQHandler>
	...

0c00171c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00171c:	b580      	push	{r7, lr}
 c00171e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c001720:	4b12      	ldr	r3, [pc, #72]	@ (c00176c <HAL_Init+0x50>)
 c001722:	681b      	ldr	r3, [r3, #0]
 c001724:	4a11      	ldr	r2, [pc, #68]	@ (c00176c <HAL_Init+0x50>)
 c001726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c00172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c00172c:	2003      	movs	r0, #3
 c00172e:	f000 fd36 	bl	c00219e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c001732:	f002 fde1 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c001736:	4602      	mov	r2, r0
 c001738:	4b0d      	ldr	r3, [pc, #52]	@ (c001770 <HAL_Init+0x54>)
 c00173a:	6a1b      	ldr	r3, [r3, #32]
 c00173c:	f003 030f 	and.w	r3, r3, #15
 c001740:	490c      	ldr	r1, [pc, #48]	@ (c001774 <HAL_Init+0x58>)
 c001742:	5ccb      	ldrb	r3, [r1, r3]
 c001744:	fa22 f303 	lsr.w	r3, r2, r3
 c001748:	4a0b      	ldr	r2, [pc, #44]	@ (c001778 <HAL_Init+0x5c>)
 c00174a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c00174c:	2004      	movs	r0, #4
 c00174e:	f000 fd6d 	bl	c00222c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001752:	200f      	movs	r0, #15
 c001754:	f000 f812 	bl	c00177c <HAL_InitTick>
 c001758:	4603      	mov	r3, r0
 c00175a:	2b00      	cmp	r3, #0
 c00175c:	d001      	beq.n	c001762 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 c00175e:	2301      	movs	r3, #1
 c001760:	e002      	b.n	c001768 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c001762:	f7ff fc51 	bl	c001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c001766:	2300      	movs	r3, #0
}
 c001768:	4618      	mov	r0, r3
 c00176a:	bd80      	pop	{r7, pc}
 c00176c:	50022000 	.word	0x50022000
 c001770:	56020c00 	.word	0x56020c00
 c001774:	0c00836c 	.word	0x0c00836c
 c001778:	30000000 	.word	0x30000000

0c00177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c00177c:	b580      	push	{r7, lr}
 c00177e:	b084      	sub	sp, #16
 c001780:	af00      	add	r7, sp, #0
 c001782:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c001784:	2300      	movs	r3, #0
 c001786:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c001788:	4b33      	ldr	r3, [pc, #204]	@ (c001858 <HAL_InitTick+0xdc>)
 c00178a:	781b      	ldrb	r3, [r3, #0]
 c00178c:	2b00      	cmp	r3, #0
 c00178e:	d101      	bne.n	c001794 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c001790:	2301      	movs	r3, #1
 c001792:	e05c      	b.n	c00184e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c001794:	4b31      	ldr	r3, [pc, #196]	@ (c00185c <HAL_InitTick+0xe0>)
 c001796:	681b      	ldr	r3, [r3, #0]
 c001798:	f003 0304 	and.w	r3, r3, #4
 c00179c:	2b04      	cmp	r3, #4
 c00179e:	d10c      	bne.n	c0017ba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c0017a0:	4b2f      	ldr	r3, [pc, #188]	@ (c001860 <HAL_InitTick+0xe4>)
 c0017a2:	681a      	ldr	r2, [r3, #0]
 c0017a4:	4b2c      	ldr	r3, [pc, #176]	@ (c001858 <HAL_InitTick+0xdc>)
 c0017a6:	781b      	ldrb	r3, [r3, #0]
 c0017a8:	4619      	mov	r1, r3
 c0017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c0017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 c0017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0017b6:	60fb      	str	r3, [r7, #12]
 c0017b8:	e037      	b.n	c00182a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c0017ba:	f000 fd8f 	bl	c0022dc <HAL_SYSTICK_GetCLKSourceConfig>
 c0017be:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c0017c0:	68bb      	ldr	r3, [r7, #8]
 c0017c2:	2b02      	cmp	r3, #2
 c0017c4:	d023      	beq.n	c00180e <HAL_InitTick+0x92>
 c0017c6:	68bb      	ldr	r3, [r7, #8]
 c0017c8:	2b02      	cmp	r3, #2
 c0017ca:	d82d      	bhi.n	c001828 <HAL_InitTick+0xac>
 c0017cc:	68bb      	ldr	r3, [r7, #8]
 c0017ce:	2b00      	cmp	r3, #0
 c0017d0:	d003      	beq.n	c0017da <HAL_InitTick+0x5e>
 c0017d2:	68bb      	ldr	r3, [r7, #8]
 c0017d4:	2b01      	cmp	r3, #1
 c0017d6:	d00d      	beq.n	c0017f4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c0017d8:	e026      	b.n	c001828 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c0017da:	4b21      	ldr	r3, [pc, #132]	@ (c001860 <HAL_InitTick+0xe4>)
 c0017dc:	681a      	ldr	r2, [r3, #0]
 c0017de:	4b1e      	ldr	r3, [pc, #120]	@ (c001858 <HAL_InitTick+0xdc>)
 c0017e0:	781b      	ldrb	r3, [r3, #0]
 c0017e2:	4619      	mov	r1, r3
 c0017e4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c0017e8:	fbb3 f3f1 	udiv	r3, r3, r1
 c0017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 c0017f0:	60fb      	str	r3, [r7, #12]
        break;
 c0017f2:	e01a      	b.n	c00182a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c0017f4:	4b18      	ldr	r3, [pc, #96]	@ (c001858 <HAL_InitTick+0xdc>)
 c0017f6:	781b      	ldrb	r3, [r3, #0]
 c0017f8:	461a      	mov	r2, r3
 c0017fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c0017fe:	fbb3 f3f2 	udiv	r3, r3, r2
 c001802:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c001806:	fbb2 f3f3 	udiv	r3, r2, r3
 c00180a:	60fb      	str	r3, [r7, #12]
        break;
 c00180c:	e00d      	b.n	c00182a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c00180e:	4b12      	ldr	r3, [pc, #72]	@ (c001858 <HAL_InitTick+0xdc>)
 c001810:	781b      	ldrb	r3, [r3, #0]
 c001812:	461a      	mov	r2, r3
 c001814:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c001818:	fbb3 f3f2 	udiv	r3, r3, r2
 c00181c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c001820:	fbb2 f3f3 	udiv	r3, r2, r3
 c001824:	60fb      	str	r3, [r7, #12]
        break;
 c001826:	e000      	b.n	c00182a <HAL_InitTick+0xae>
        break;
 c001828:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c00182a:	68f8      	ldr	r0, [r7, #12]
 c00182c:	f000 fcdc 	bl	c0021e8 <HAL_SYSTICK_Config>
 c001830:	4603      	mov	r3, r0
 c001832:	2b00      	cmp	r3, #0
 c001834:	d001      	beq.n	c00183a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c001836:	2301      	movs	r3, #1
 c001838:	e009      	b.n	c00184e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00183a:	2200      	movs	r2, #0
 c00183c:	6879      	ldr	r1, [r7, #4]
 c00183e:	f04f 30ff 	mov.w	r0, #4294967295
 c001842:	f000 fcb7 	bl	c0021b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c001846:	4a07      	ldr	r2, [pc, #28]	@ (c001864 <HAL_InitTick+0xe8>)
 c001848:	687b      	ldr	r3, [r7, #4]
 c00184a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c00184c:	2300      	movs	r3, #0
}
 c00184e:	4618      	mov	r0, r3
 c001850:	3710      	adds	r7, #16
 c001852:	46bd      	mov	sp, r7
 c001854:	bd80      	pop	{r7, pc}
 c001856:	bf00      	nop
 c001858:	30000008 	.word	0x30000008
 c00185c:	e000e010 	.word	0xe000e010
 c001860:	30000000 	.word	0x30000000
 c001864:	30000004 	.word	0x30000004

0c001868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001868:	b480      	push	{r7}
 c00186a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c00186c:	4b06      	ldr	r3, [pc, #24]	@ (c001888 <HAL_IncTick+0x20>)
 c00186e:	781b      	ldrb	r3, [r3, #0]
 c001870:	461a      	mov	r2, r3
 c001872:	4b06      	ldr	r3, [pc, #24]	@ (c00188c <HAL_IncTick+0x24>)
 c001874:	681b      	ldr	r3, [r3, #0]
 c001876:	4413      	add	r3, r2
 c001878:	4a04      	ldr	r2, [pc, #16]	@ (c00188c <HAL_IncTick+0x24>)
 c00187a:	6013      	str	r3, [r2, #0]
}
 c00187c:	bf00      	nop
 c00187e:	46bd      	mov	sp, r7
 c001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001884:	4770      	bx	lr
 c001886:	bf00      	nop
 c001888:	30000008 	.word	0x30000008
 c00188c:	30000634 	.word	0x30000634

0c001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c001890:	b480      	push	{r7}
 c001892:	af00      	add	r7, sp, #0
  return uwTick;
 c001894:	4b03      	ldr	r3, [pc, #12]	@ (c0018a4 <HAL_GetTick+0x14>)
 c001896:	681b      	ldr	r3, [r3, #0]
}
 c001898:	4618      	mov	r0, r3
 c00189a:	46bd      	mov	sp, r7
 c00189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018a0:	4770      	bx	lr
 c0018a2:	bf00      	nop
 c0018a4:	30000634 	.word	0x30000634

0c0018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c0018a8:	b580      	push	{r7, lr}
 c0018aa:	b084      	sub	sp, #16
 c0018ac:	af00      	add	r7, sp, #0
 c0018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c0018b0:	f7ff ffee 	bl	c001890 <HAL_GetTick>
 c0018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c0018b6:	687b      	ldr	r3, [r7, #4]
 c0018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c0018ba:	68fb      	ldr	r3, [r7, #12]
 c0018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0018c0:	d005      	beq.n	c0018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c0018c2:	4b0a      	ldr	r3, [pc, #40]	@ (c0018ec <HAL_Delay+0x44>)
 c0018c4:	781b      	ldrb	r3, [r3, #0]
 c0018c6:	461a      	mov	r2, r3
 c0018c8:	68fb      	ldr	r3, [r7, #12]
 c0018ca:	4413      	add	r3, r2
 c0018cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c0018ce:	bf00      	nop
 c0018d0:	f7ff ffde 	bl	c001890 <HAL_GetTick>
 c0018d4:	4602      	mov	r2, r0
 c0018d6:	68bb      	ldr	r3, [r7, #8]
 c0018d8:	1ad3      	subs	r3, r2, r3
 c0018da:	68fa      	ldr	r2, [r7, #12]
 c0018dc:	429a      	cmp	r2, r3
 c0018de:	d8f7      	bhi.n	c0018d0 <HAL_Delay+0x28>
  {
  }
}
 c0018e0:	bf00      	nop
 c0018e2:	bf00      	nop
 c0018e4:	3710      	adds	r7, #16
 c0018e6:	46bd      	mov	sp, r7
 c0018e8:	bd80      	pop	{r7, pc}
 c0018ea:	bf00      	nop
 c0018ec:	30000008 	.word	0x30000008

0c0018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 c0018f0:	b480      	push	{r7}
 c0018f2:	b083      	sub	sp, #12
 c0018f4:	af00      	add	r7, sp, #0
 c0018f6:	6078      	str	r0, [r7, #4]
 c0018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 c0018fa:	687b      	ldr	r3, [r7, #4]
 c0018fc:	681b      	ldr	r3, [r3, #0]
 c0018fe:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 c001902:	683b      	ldr	r3, [r7, #0]
 c001904:	431a      	orrs	r2, r3
 c001906:	687b      	ldr	r3, [r7, #4]
 c001908:	601a      	str	r2, [r3, #0]
}
 c00190a:	bf00      	nop
 c00190c:	370c      	adds	r7, #12
 c00190e:	46bd      	mov	sp, r7
 c001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001914:	4770      	bx	lr
	...

0c001918 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 c001918:	b480      	push	{r7}
 c00191a:	b085      	sub	sp, #20
 c00191c:	af00      	add	r7, sp, #0
 c00191e:	6078      	str	r0, [r7, #4]
 c001920:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 c001922:	683b      	ldr	r3, [r7, #0]
 c001924:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 c001926:	687b      	ldr	r3, [r7, #4]
 c001928:	4a0a      	ldr	r2, [pc, #40]	@ (c001954 <LL_ADC_SetResolution+0x3c>)
 c00192a:	4293      	cmp	r3, r2
 c00192c:	d104      	bne.n	c001938 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 c00192e:	68fb      	ldr	r3, [r7, #12]
 c001930:	3b01      	subs	r3, #1
 c001932:	f003 030c 	and.w	r3, r3, #12
 c001936:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 c001938:	687b      	ldr	r3, [r7, #4]
 c00193a:	68db      	ldr	r3, [r3, #12]
 c00193c:	f023 020c 	bic.w	r2, r3, #12
 c001940:	68fb      	ldr	r3, [r7, #12]
 c001942:	431a      	orrs	r2, r3
 c001944:	687b      	ldr	r3, [r7, #4]
 c001946:	60da      	str	r2, [r3, #12]
}
 c001948:	bf00      	nop
 c00194a:	3714      	adds	r7, #20
 c00194c:	46bd      	mov	sp, r7
 c00194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001952:	4770      	bx	lr
 c001954:	56021000 	.word	0x56021000

0c001958 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 c001958:	b480      	push	{r7}
 c00195a:	b083      	sub	sp, #12
 c00195c:	af00      	add	r7, sp, #0
 c00195e:	6078      	str	r0, [r7, #4]
 c001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 c001962:	687b      	ldr	r3, [r7, #4]
 c001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c001966:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 c00196a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 c00196e:	683a      	ldr	r2, [r7, #0]
 c001970:	431a      	orrs	r2, r3
 c001972:	687b      	ldr	r3, [r7, #4]
 c001974:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 c001976:	687b      	ldr	r3, [r7, #4]
 c001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c00197a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 c00197e:	683a      	ldr	r2, [r7, #0]
 c001980:	2a00      	cmp	r2, #0
 c001982:	d002      	beq.n	c00198a <LL_ADC_SetGainCompensation+0x32>
 c001984:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 c001988:	e000      	b.n	c00198c <LL_ADC_SetGainCompensation+0x34>
 c00198a:	2200      	movs	r2, #0
 c00198c:	431a      	orrs	r2, r3
 c00198e:	687b      	ldr	r3, [r7, #4]
 c001990:	671a      	str	r2, [r3, #112]	@ 0x70
}
 c001992:	bf00      	nop
 c001994:	370c      	adds	r7, #12
 c001996:	46bd      	mov	sp, r7
 c001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00199c:	4770      	bx	lr

0c00199e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 c00199e:	b480      	push	{r7}
 c0019a0:	b085      	sub	sp, #20
 c0019a2:	af00      	add	r7, sp, #0
 c0019a4:	60f8      	str	r0, [r7, #12]
 c0019a6:	60b9      	str	r1, [r7, #8]
 c0019a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 c0019aa:	68fb      	ldr	r3, [r7, #12]
 c0019ac:	695a      	ldr	r2, [r3, #20]
 c0019ae:	68bb      	ldr	r3, [r7, #8]
 c0019b0:	f003 0304 	and.w	r3, r3, #4
 c0019b4:	2107      	movs	r1, #7
 c0019b6:	fa01 f303 	lsl.w	r3, r1, r3
 c0019ba:	43db      	mvns	r3, r3
 c0019bc:	401a      	ands	r2, r3
 c0019be:	68bb      	ldr	r3, [r7, #8]
 c0019c0:	f003 0304 	and.w	r3, r3, #4
 c0019c4:	6879      	ldr	r1, [r7, #4]
 c0019c6:	fa01 f303 	lsl.w	r3, r1, r3
 c0019ca:	431a      	orrs	r2, r3
 c0019cc:	68fb      	ldr	r3, [r7, #12]
 c0019ce:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 c0019d0:	bf00      	nop
 c0019d2:	3714      	adds	r7, #20
 c0019d4:	46bd      	mov	sp, r7
 c0019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019da:	4770      	bx	lr

0c0019dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 c0019dc:	b480      	push	{r7}
 c0019de:	b083      	sub	sp, #12
 c0019e0:	af00      	add	r7, sp, #0
 c0019e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 c0019e4:	687b      	ldr	r3, [r7, #4]
 c0019e6:	689b      	ldr	r3, [r3, #8]
 c0019e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 c0019ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 c0019f0:	687a      	ldr	r2, [r7, #4]
 c0019f2:	6093      	str	r3, [r2, #8]
}
 c0019f4:	bf00      	nop
 c0019f6:	370c      	adds	r7, #12
 c0019f8:	46bd      	mov	sp, r7
 c0019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019fe:	4770      	bx	lr

0c001a00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 c001a00:	b480      	push	{r7}
 c001a02:	b083      	sub	sp, #12
 c001a04:	af00      	add	r7, sp, #0
 c001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 c001a08:	687b      	ldr	r3, [r7, #4]
 c001a0a:	689b      	ldr	r3, [r3, #8]
 c001a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c001a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c001a14:	d101      	bne.n	c001a1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 c001a16:	2301      	movs	r3, #1
 c001a18:	e000      	b.n	c001a1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 c001a1a:	2300      	movs	r3, #0
}
 c001a1c:	4618      	mov	r0, r3
 c001a1e:	370c      	adds	r7, #12
 c001a20:	46bd      	mov	sp, r7
 c001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a26:	4770      	bx	lr

0c001a28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 c001a28:	b480      	push	{r7}
 c001a2a:	b083      	sub	sp, #12
 c001a2c:	af00      	add	r7, sp, #0
 c001a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 c001a30:	687b      	ldr	r3, [r7, #4]
 c001a32:	689b      	ldr	r3, [r3, #8]
 c001a34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 c001a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 c001a3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 c001a40:	687b      	ldr	r3, [r7, #4]
 c001a42:	609a      	str	r2, [r3, #8]
}
 c001a44:	bf00      	nop
 c001a46:	370c      	adds	r7, #12
 c001a48:	46bd      	mov	sp, r7
 c001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a4e:	4770      	bx	lr

0c001a50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 c001a50:	b480      	push	{r7}
 c001a52:	b083      	sub	sp, #12
 c001a54:	af00      	add	r7, sp, #0
 c001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 c001a58:	687b      	ldr	r3, [r7, #4]
 c001a5a:	689b      	ldr	r3, [r3, #8]
 c001a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c001a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c001a64:	d101      	bne.n	c001a6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 c001a66:	2301      	movs	r3, #1
 c001a68:	e000      	b.n	c001a6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 c001a6a:	2300      	movs	r3, #0
}
 c001a6c:	4618      	mov	r0, r3
 c001a6e:	370c      	adds	r7, #12
 c001a70:	46bd      	mov	sp, r7
 c001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a76:	4770      	bx	lr

0c001a78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 c001a78:	b480      	push	{r7}
 c001a7a:	b083      	sub	sp, #12
 c001a7c:	af00      	add	r7, sp, #0
 c001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 c001a80:	687b      	ldr	r3, [r7, #4]
 c001a82:	689b      	ldr	r3, [r3, #8]
 c001a84:	f003 0301 	and.w	r3, r3, #1
 c001a88:	2b01      	cmp	r3, #1
 c001a8a:	d101      	bne.n	c001a90 <LL_ADC_IsEnabled+0x18>
 c001a8c:	2301      	movs	r3, #1
 c001a8e:	e000      	b.n	c001a92 <LL_ADC_IsEnabled+0x1a>
 c001a90:	2300      	movs	r3, #0
}
 c001a92:	4618      	mov	r0, r3
 c001a94:	370c      	adds	r7, #12
 c001a96:	46bd      	mov	sp, r7
 c001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a9c:	4770      	bx	lr

0c001a9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 c001a9e:	b480      	push	{r7}
 c001aa0:	b083      	sub	sp, #12
 c001aa2:	af00      	add	r7, sp, #0
 c001aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 c001aa6:	687b      	ldr	r3, [r7, #4]
 c001aa8:	689b      	ldr	r3, [r3, #8]
 c001aaa:	f003 0304 	and.w	r3, r3, #4
 c001aae:	2b04      	cmp	r3, #4
 c001ab0:	d101      	bne.n	c001ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 c001ab2:	2301      	movs	r3, #1
 c001ab4:	e000      	b.n	c001ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 c001ab6:	2300      	movs	r3, #0
}
 c001ab8:	4618      	mov	r0, r3
 c001aba:	370c      	adds	r7, #12
 c001abc:	46bd      	mov	sp, r7
 c001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ac2:	4770      	bx	lr

0c001ac4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 c001ac4:	b480      	push	{r7}
 c001ac6:	b083      	sub	sp, #12
 c001ac8:	af00      	add	r7, sp, #0
 c001aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 c001acc:	687b      	ldr	r3, [r7, #4]
 c001ace:	689b      	ldr	r3, [r3, #8]
 c001ad0:	f003 0308 	and.w	r3, r3, #8
 c001ad4:	2b08      	cmp	r3, #8
 c001ad6:	d101      	bne.n	c001adc <LL_ADC_INJ_IsConversionOngoing+0x18>
 c001ad8:	2301      	movs	r3, #1
 c001ada:	e000      	b.n	c001ade <LL_ADC_INJ_IsConversionOngoing+0x1a>
 c001adc:	2300      	movs	r3, #0
}
 c001ade:	4618      	mov	r0, r3
 c001ae0:	370c      	adds	r7, #12
 c001ae2:	46bd      	mov	sp, r7
 c001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ae8:	4770      	bx	lr
	...

0c001aec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 c001aec:	b580      	push	{r7, lr}
 c001aee:	b08a      	sub	sp, #40	@ 0x28
 c001af0:	af00      	add	r7, sp, #0
 c001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 c001af4:	2300      	movs	r3, #0
 c001af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 c001afa:	2300      	movs	r3, #0
 c001afc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 c001afe:	2300      	movs	r3, #0
 c001b00:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 c001b02:	687b      	ldr	r3, [r7, #4]
 c001b04:	2b00      	cmp	r3, #0
 c001b06:	d101      	bne.n	c001b0c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 c001b08:	2301      	movs	r3, #1
 c001b0a:	e2b3      	b.n	c002074 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 c001b0c:	687b      	ldr	r3, [r7, #4]
 c001b0e:	691b      	ldr	r3, [r3, #16]
 c001b10:	2b00      	cmp	r3, #0
 c001b12:	d003      	beq.n	c001b1c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001b14:	687b      	ldr	r3, [r7, #4]
 c001b16:	681b      	ldr	r3, [r3, #0]
 c001b18:	4a8b      	ldr	r2, [pc, #556]	@ (c001d48 <HAL_ADC_Init+0x25c>)
 c001b1a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 c001b1c:	687b      	ldr	r3, [r7, #4]
 c001b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001b20:	2b00      	cmp	r3, #0
 c001b22:	d109      	bne.n	c001b38 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 c001b24:	6878      	ldr	r0, [r7, #4]
 c001b26:	f7ff fa99 	bl	c00105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 c001b2a:	687b      	ldr	r3, [r7, #4]
 c001b2c:	2200      	movs	r2, #0
 c001b2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 c001b30:	687b      	ldr	r3, [r7, #4]
 c001b32:	2200      	movs	r2, #0
 c001b34:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 c001b38:	687b      	ldr	r3, [r7, #4]
 c001b3a:	681b      	ldr	r3, [r3, #0]
 c001b3c:	4618      	mov	r0, r3
 c001b3e:	f7ff ff5f 	bl	c001a00 <LL_ADC_IsDeepPowerDownEnabled>
 c001b42:	4603      	mov	r3, r0
 c001b44:	2b00      	cmp	r3, #0
 c001b46:	d004      	beq.n	c001b52 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 c001b48:	687b      	ldr	r3, [r7, #4]
 c001b4a:	681b      	ldr	r3, [r3, #0]
 c001b4c:	4618      	mov	r0, r3
 c001b4e:	f7ff ff45 	bl	c0019dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 c001b52:	687b      	ldr	r3, [r7, #4]
 c001b54:	681b      	ldr	r3, [r3, #0]
 c001b56:	4618      	mov	r0, r3
 c001b58:	f7ff ff7a 	bl	c001a50 <LL_ADC_IsInternalRegulatorEnabled>
 c001b5c:	4603      	mov	r3, r0
 c001b5e:	2b00      	cmp	r3, #0
 c001b60:	d115      	bne.n	c001b8e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 c001b62:	687b      	ldr	r3, [r7, #4]
 c001b64:	681b      	ldr	r3, [r3, #0]
 c001b66:	4618      	mov	r0, r3
 c001b68:	f7ff ff5e 	bl	c001a28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 c001b6c:	4b77      	ldr	r3, [pc, #476]	@ (c001d4c <HAL_ADC_Init+0x260>)
 c001b6e:	681b      	ldr	r3, [r3, #0]
 c001b70:	099b      	lsrs	r3, r3, #6
 c001b72:	4a77      	ldr	r2, [pc, #476]	@ (c001d50 <HAL_ADC_Init+0x264>)
 c001b74:	fba2 2303 	umull	r2, r3, r2, r3
 c001b78:	099b      	lsrs	r3, r3, #6
 c001b7a:	3301      	adds	r3, #1
 c001b7c:	005b      	lsls	r3, r3, #1
 c001b7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 c001b80:	e002      	b.n	c001b88 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 c001b82:	68fb      	ldr	r3, [r7, #12]
 c001b84:	3b01      	subs	r3, #1
 c001b86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 c001b88:	68fb      	ldr	r3, [r7, #12]
 c001b8a:	2b00      	cmp	r3, #0
 c001b8c:	d1f9      	bne.n	c001b82 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 c001b8e:	687b      	ldr	r3, [r7, #4]
 c001b90:	681b      	ldr	r3, [r3, #0]
 c001b92:	4618      	mov	r0, r3
 c001b94:	f7ff ff5c 	bl	c001a50 <LL_ADC_IsInternalRegulatorEnabled>
 c001b98:	4603      	mov	r3, r0
 c001b9a:	2b00      	cmp	r3, #0
 c001b9c:	d10e      	bne.n	c001bbc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 c001b9e:	687b      	ldr	r3, [r7, #4]
 c001ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001ba2:	f043 0210 	orr.w	r2, r3, #16
 c001ba6:	687b      	ldr	r3, [r7, #4]
 c001ba8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 c001baa:	687b      	ldr	r3, [r7, #4]
 c001bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c001bae:	f043 0201 	orr.w	r2, r3, #1
 c001bb2:	687b      	ldr	r3, [r7, #4]
 c001bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 c001bb6:	2301      	movs	r3, #1
 c001bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 c001bbc:	687b      	ldr	r3, [r7, #4]
 c001bbe:	681b      	ldr	r3, [r3, #0]
 c001bc0:	4618      	mov	r0, r3
 c001bc2:	f7ff ff6c 	bl	c001a9e <LL_ADC_REG_IsConversionOngoing>
 c001bc6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 c001bc8:	687b      	ldr	r3, [r7, #4]
 c001bca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001bcc:	f003 0310 	and.w	r3, r3, #16
 c001bd0:	2b00      	cmp	r3, #0
 c001bd2:	f040 8244 	bne.w	c00205e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 c001bd6:	69bb      	ldr	r3, [r7, #24]
 c001bd8:	2b00      	cmp	r3, #0
 c001bda:	f040 8240 	bne.w	c00205e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 c001bde:	687b      	ldr	r3, [r7, #4]
 c001be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001be2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 c001be6:	f043 0202 	orr.w	r2, r3, #2
 c001bea:	687b      	ldr	r3, [r7, #4]
 c001bec:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 c001bee:	687b      	ldr	r3, [r7, #4]
 c001bf0:	681b      	ldr	r3, [r3, #0]
 c001bf2:	4618      	mov	r0, r3
 c001bf4:	f7ff ff40 	bl	c001a78 <LL_ADC_IsEnabled>
 c001bf8:	4603      	mov	r3, r0
 c001bfa:	2b00      	cmp	r3, #0
 c001bfc:	d140      	bne.n	c001c80 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001bfe:	687b      	ldr	r3, [r7, #4]
 c001c00:	681b      	ldr	r3, [r3, #0]
 c001c02:	4a51      	ldr	r2, [pc, #324]	@ (c001d48 <HAL_ADC_Init+0x25c>)
 c001c04:	4293      	cmp	r3, r2
 c001c06:	d028      	beq.n	c001c5a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 c001c08:	687b      	ldr	r3, [r7, #4]
 c001c0a:	681b      	ldr	r3, [r3, #0]
 c001c0c:	4a51      	ldr	r2, [pc, #324]	@ (c001d54 <HAL_ADC_Init+0x268>)
 c001c0e:	4293      	cmp	r3, r2
 c001c10:	d109      	bne.n	c001c26 <HAL_ADC_Init+0x13a>
 c001c12:	4850      	ldr	r0, [pc, #320]	@ (c001d54 <HAL_ADC_Init+0x268>)
 c001c14:	f7ff ff30 	bl	c001a78 <LL_ADC_IsEnabled>
 c001c18:	4603      	mov	r3, r0
 c001c1a:	2b00      	cmp	r3, #0
 c001c1c:	bf0c      	ite	eq
 c001c1e:	2301      	moveq	r3, #1
 c001c20:	2300      	movne	r3, #0
 c001c22:	b2db      	uxtb	r3, r3
 c001c24:	e008      	b.n	c001c38 <HAL_ADC_Init+0x14c>
 c001c26:	4848      	ldr	r0, [pc, #288]	@ (c001d48 <HAL_ADC_Init+0x25c>)
 c001c28:	f7ff ff26 	bl	c001a78 <LL_ADC_IsEnabled>
 c001c2c:	4603      	mov	r3, r0
 c001c2e:	2b00      	cmp	r3, #0
 c001c30:	bf0c      	ite	eq
 c001c32:	2301      	moveq	r3, #1
 c001c34:	2300      	movne	r3, #0
 c001c36:	b2db      	uxtb	r3, r3
 c001c38:	2b00      	cmp	r3, #0
 c001c3a:	d021      	beq.n	c001c80 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 c001c3c:	687b      	ldr	r3, [r7, #4]
 c001c3e:	681b      	ldr	r3, [r3, #0]
 c001c40:	4a44      	ldr	r2, [pc, #272]	@ (c001d54 <HAL_ADC_Init+0x268>)
 c001c42:	4293      	cmp	r3, r2
 c001c44:	d101      	bne.n	c001c4a <HAL_ADC_Init+0x15e>
 c001c46:	4a44      	ldr	r2, [pc, #272]	@ (c001d58 <HAL_ADC_Init+0x26c>)
 c001c48:	e000      	b.n	c001c4c <HAL_ADC_Init+0x160>
 c001c4a:	4a44      	ldr	r2, [pc, #272]	@ (c001d5c <HAL_ADC_Init+0x270>)
 c001c4c:	687b      	ldr	r3, [r7, #4]
 c001c4e:	685b      	ldr	r3, [r3, #4]
 c001c50:	4619      	mov	r1, r3
 c001c52:	4610      	mov	r0, r2
 c001c54:	f7ff fe4c 	bl	c0018f0 <LL_ADC_SetCommonClock>
 c001c58:	e012      	b.n	c001c80 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 c001c5a:	687b      	ldr	r3, [r7, #4]
 c001c5c:	681a      	ldr	r2, [r3, #0]
 c001c5e:	687b      	ldr	r3, [r7, #4]
 c001c60:	689b      	ldr	r3, [r3, #8]
 c001c62:	4619      	mov	r1, r3
 c001c64:	4610      	mov	r0, r2
 c001c66:	f7ff fe57 	bl	c001918 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 c001c6a:	4b3c      	ldr	r3, [pc, #240]	@ (c001d5c <HAL_ADC_Init+0x270>)
 c001c6c:	681b      	ldr	r3, [r3, #0]
 c001c6e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 c001c72:	687b      	ldr	r3, [r7, #4]
 c001c74:	685b      	ldr	r3, [r3, #4]
 c001c76:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 c001c7a:	4938      	ldr	r1, [pc, #224]	@ (c001d5c <HAL_ADC_Init+0x270>)
 c001c7c:	4313      	orrs	r3, r2
 c001c7e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001c80:	687b      	ldr	r3, [r7, #4]
 c001c82:	681b      	ldr	r3, [r3, #0]
 c001c84:	4a30      	ldr	r2, [pc, #192]	@ (c001d48 <HAL_ADC_Init+0x25c>)
 c001c86:	4293      	cmp	r3, r2
 c001c88:	d010      	beq.n	c001cac <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 c001c8a:	687b      	ldr	r3, [r7, #4]
 c001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 c001c90:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 c001c92:	687b      	ldr	r3, [r7, #4]
 c001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 c001c96:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 c001c98:	687b      	ldr	r3, [r7, #4]
 c001c9a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 c001c9c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 c001c9e:	687b      	ldr	r3, [r7, #4]
 c001ca0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 c001ca4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 c001ca6:	4313      	orrs	r3, r2
 c001ca8:	623b      	str	r3, [r7, #32]
 c001caa:	e030      	b.n	c001d0e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 c001cac:	687b      	ldr	r3, [r7, #4]
 c001cae:	7f1b      	ldrb	r3, [r3, #28]
 c001cb0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 c001cb2:	687b      	ldr	r3, [r7, #4]
 c001cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 c001cb8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 c001cba:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 c001cbc:	687a      	ldr	r2, [r7, #4]
 c001cbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c001cc0:	2a00      	cmp	r2, #0
 c001cc2:	d002      	beq.n	c001cca <HAL_ADC_Init+0x1de>
 c001cc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 c001cc8:	e000      	b.n	c001ccc <HAL_ADC_Init+0x1e0>
 c001cca:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 c001ccc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 c001cce:	687b      	ldr	r3, [r7, #4]
 c001cd0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 c001cd2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 c001cd4:	687b      	ldr	r3, [r7, #4]
 c001cd6:	691b      	ldr	r3, [r3, #16]
 c001cd8:	2b00      	cmp	r3, #0
 c001cda:	da04      	bge.n	c001ce6 <HAL_ADC_Init+0x1fa>
 c001cdc:	687b      	ldr	r3, [r7, #4]
 c001cde:	691b      	ldr	r3, [r3, #16]
 c001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 c001ce4:	e001      	b.n	c001cea <HAL_ADC_Init+0x1fe>
 c001ce6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 c001cea:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 c001cec:	687b      	ldr	r3, [r7, #4]
 c001cee:	681b      	ldr	r3, [r3, #0]
 c001cf0:	4918      	ldr	r1, [pc, #96]	@ (c001d54 <HAL_ADC_Init+0x268>)
 c001cf2:	428b      	cmp	r3, r1
 c001cf4:	d103      	bne.n	c001cfe <HAL_ADC_Init+0x212>
 c001cf6:	687b      	ldr	r3, [r7, #4]
 c001cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 c001cfc:	e003      	b.n	c001d06 <HAL_ADC_Init+0x21a>
 c001cfe:	687b      	ldr	r3, [r7, #4]
 c001d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 c001d04:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 c001d06:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 c001d08:	6a3a      	ldr	r2, [r7, #32]
 c001d0a:	4313      	orrs	r3, r2
 c001d0c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 c001d0e:	687b      	ldr	r3, [r7, #4]
 c001d10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 c001d14:	2b01      	cmp	r3, #1
 c001d16:	d12f      	bne.n	c001d78 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001d18:	687b      	ldr	r3, [r7, #4]
 c001d1a:	681b      	ldr	r3, [r3, #0]
 c001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (c001d48 <HAL_ADC_Init+0x25c>)
 c001d1e:	4293      	cmp	r3, r2
 c001d20:	d007      	beq.n	c001d32 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 c001d22:	687b      	ldr	r3, [r7, #4]
 c001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c001d26:	3b01      	subs	r3, #1
 c001d28:	045b      	lsls	r3, r3, #17
 c001d2a:	6a3a      	ldr	r2, [r7, #32]
 c001d2c:	4313      	orrs	r3, r2
 c001d2e:	623b      	str	r3, [r7, #32]
 c001d30:	e022      	b.n	c001d78 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 c001d32:	687b      	ldr	r3, [r7, #4]
 c001d34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 c001d38:	2b00      	cmp	r3, #0
 c001d3a:	d111      	bne.n	c001d60 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 c001d3c:	6a3b      	ldr	r3, [r7, #32]
 c001d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c001d42:	623b      	str	r3, [r7, #32]
 c001d44:	e018      	b.n	c001d78 <HAL_ADC_Init+0x28c>
 c001d46:	bf00      	nop
 c001d48:	56021000 	.word	0x56021000
 c001d4c:	30000000 	.word	0x30000000
 c001d50:	053e2d63 	.word	0x053e2d63
 c001d54:	52028000 	.word	0x52028000
 c001d58:	52028308 	.word	0x52028308
 c001d5c:	56021308 	.word	0x56021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 c001d60:	687b      	ldr	r3, [r7, #4]
 c001d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001d64:	f043 0220 	orr.w	r2, r3, #32
 c001d68:	687b      	ldr	r3, [r7, #4]
 c001d6a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 c001d6c:	687b      	ldr	r3, [r7, #4]
 c001d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c001d70:	f043 0201 	orr.w	r2, r3, #1
 c001d74:	687b      	ldr	r3, [r7, #4]
 c001d76:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001d78:	687b      	ldr	r3, [r7, #4]
 c001d7a:	681b      	ldr	r3, [r3, #0]
 c001d7c:	4a92      	ldr	r2, [pc, #584]	@ (c001fc8 <HAL_ADC_Init+0x4dc>)
 c001d7e:	4293      	cmp	r3, r2
 c001d80:	d018      	beq.n	c001db4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 c001d82:	687b      	ldr	r3, [r7, #4]
 c001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001d86:	2b00      	cmp	r3, #0
 c001d88:	d009      	beq.n	c001d9e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 c001d8a:	687b      	ldr	r3, [r7, #4]
 c001d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001d8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 c001d92:	687b      	ldr	r3, [r7, #4]
 c001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c001d96:	4313      	orrs	r3, r2
 c001d98:	6a3a      	ldr	r2, [r7, #32]
 c001d9a:	4313      	orrs	r3, r2
 c001d9c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 c001d9e:	687b      	ldr	r3, [r7, #4]
 c001da0:	681b      	ldr	r3, [r3, #0]
 c001da2:	68da      	ldr	r2, [r3, #12]
 c001da4:	4b89      	ldr	r3, [pc, #548]	@ (c001fcc <HAL_ADC_Init+0x4e0>)
 c001da6:	4013      	ands	r3, r2
 c001da8:	687a      	ldr	r2, [r7, #4]
 c001daa:	6812      	ldr	r2, [r2, #0]
 c001dac:	6a39      	ldr	r1, [r7, #32]
 c001dae:	430b      	orrs	r3, r1
 c001db0:	60d3      	str	r3, [r2, #12]
 c001db2:	e031      	b.n	c001e18 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 c001db4:	687b      	ldr	r3, [r7, #4]
 c001db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001db8:	2b00      	cmp	r3, #0
 c001dba:	d009      	beq.n	c001dd0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 c001dbc:	687b      	ldr	r3, [r7, #4]
 c001dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001dc0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 c001dc4:	687b      	ldr	r3, [r7, #4]
 c001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c001dc8:	4313      	orrs	r3, r2
 c001dca:	6a3a      	ldr	r2, [r7, #32]
 c001dcc:	4313      	orrs	r3, r2
 c001dce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 c001dd0:	687b      	ldr	r3, [r7, #4]
 c001dd2:	681b      	ldr	r3, [r3, #0]
 c001dd4:	68da      	ldr	r2, [r3, #12]
 c001dd6:	4b7e      	ldr	r3, [pc, #504]	@ (c001fd0 <HAL_ADC_Init+0x4e4>)
 c001dd8:	4013      	ands	r3, r2
 c001dda:	687a      	ldr	r2, [r7, #4]
 c001ddc:	6812      	ldr	r2, [r2, #0]
 c001dde:	6a39      	ldr	r1, [r7, #32]
 c001de0:	430b      	orrs	r3, r1
 c001de2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 c001de4:	687b      	ldr	r3, [r7, #4]
 c001de6:	6a1b      	ldr	r3, [r3, #32]
 c001de8:	2b00      	cmp	r3, #0
 c001dea:	d008      	beq.n	c001dfe <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 c001dec:	687b      	ldr	r3, [r7, #4]
 c001dee:	681b      	ldr	r3, [r3, #0]
 c001df0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 c001df2:	687b      	ldr	r3, [r7, #4]
 c001df4:	6a1a      	ldr	r2, [r3, #32]
 c001df6:	687b      	ldr	r3, [r7, #4]
 c001df8:	681b      	ldr	r3, [r3, #0]
 c001dfa:	430a      	orrs	r2, r1
 c001dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 c001dfe:	687b      	ldr	r3, [r7, #4]
 c001e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c001e02:	2b00      	cmp	r3, #0
 c001e04:	d008      	beq.n	c001e18 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 c001e06:	687b      	ldr	r3, [r7, #4]
 c001e08:	681b      	ldr	r3, [r3, #0]
 c001e0a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 c001e0c:	687b      	ldr	r3, [r7, #4]
 c001e0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 c001e10:	687b      	ldr	r3, [r7, #4]
 c001e12:	681b      	ldr	r3, [r3, #0]
 c001e14:	430a      	orrs	r2, r1
 c001e16:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001e18:	687b      	ldr	r3, [r7, #4]
 c001e1a:	681b      	ldr	r3, [r3, #0]
 c001e1c:	4a6a      	ldr	r2, [pc, #424]	@ (c001fc8 <HAL_ADC_Init+0x4dc>)
 c001e1e:	4293      	cmp	r3, r2
 c001e20:	f000 8093 	beq.w	c001f4a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 c001e24:	687b      	ldr	r3, [r7, #4]
 c001e26:	681b      	ldr	r3, [r3, #0]
 c001e28:	4618      	mov	r0, r3
 c001e2a:	f7ff fe38 	bl	c001a9e <LL_ADC_REG_IsConversionOngoing>
 c001e2e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 c001e30:	687b      	ldr	r3, [r7, #4]
 c001e32:	681b      	ldr	r3, [r3, #0]
 c001e34:	4618      	mov	r0, r3
 c001e36:	f7ff fe45 	bl	c001ac4 <LL_ADC_INJ_IsConversionOngoing>
 c001e3a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 c001e3c:	697b      	ldr	r3, [r7, #20]
 c001e3e:	2b00      	cmp	r3, #0
 c001e40:	d161      	bne.n	c001f06 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 c001e42:	693b      	ldr	r3, [r7, #16]
 c001e44:	2b00      	cmp	r3, #0
 c001e46:	d15e      	bne.n	c001f06 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 c001e48:	687b      	ldr	r3, [r7, #4]
 c001e4a:	7f1b      	ldrb	r3, [r3, #28]
 c001e4c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 c001e4e:	687b      	ldr	r3, [r7, #4]
 c001e50:	681b      	ldr	r3, [r3, #0]
 c001e52:	4960      	ldr	r1, [pc, #384]	@ (c001fd4 <HAL_ADC_Init+0x4e8>)
 c001e54:	428b      	cmp	r3, r1
 c001e56:	d102      	bne.n	c001e5e <HAL_ADC_Init+0x372>
 c001e58:	687b      	ldr	r3, [r7, #4]
 c001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c001e5c:	e002      	b.n	c001e64 <HAL_ADC_Init+0x378>
 c001e5e:	687b      	ldr	r3, [r7, #4]
 c001e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c001e62:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 c001e64:	4313      	orrs	r3, r2
 c001e66:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 c001e68:	687b      	ldr	r3, [r7, #4]
 c001e6a:	681b      	ldr	r3, [r3, #0]
 c001e6c:	68db      	ldr	r3, [r3, #12]
 c001e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c001e72:	f023 0303 	bic.w	r3, r3, #3
 c001e76:	687a      	ldr	r2, [r7, #4]
 c001e78:	6812      	ldr	r2, [r2, #0]
 c001e7a:	6a39      	ldr	r1, [r7, #32]
 c001e7c:	430b      	orrs	r3, r1
 c001e7e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 c001e80:	687b      	ldr	r3, [r7, #4]
 c001e82:	68db      	ldr	r3, [r3, #12]
 c001e84:	2b00      	cmp	r3, #0
 c001e86:	d007      	beq.n	c001e98 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 c001e88:	687b      	ldr	r3, [r7, #4]
 c001e8a:	681a      	ldr	r2, [r3, #0]
 c001e8c:	687b      	ldr	r3, [r7, #4]
 c001e8e:	68db      	ldr	r3, [r3, #12]
 c001e90:	4619      	mov	r1, r3
 c001e92:	4610      	mov	r0, r2
 c001e94:	f7ff fd60 	bl	c001958 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 c001e98:	687b      	ldr	r3, [r7, #4]
 c001e9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 c001e9e:	2b01      	cmp	r3, #1
 c001ea0:	d11e      	bne.n	c001ee0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 c001ea2:	687b      	ldr	r3, [r7, #4]
 c001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001ea6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 c001ea8:	687b      	ldr	r3, [r7, #4]
 c001eaa:	681b      	ldr	r3, [r3, #0]
 c001eac:	691a      	ldr	r2, [r3, #16]
 c001eae:	4b4a      	ldr	r3, [pc, #296]	@ (c001fd8 <HAL_ADC_Init+0x4ec>)
 c001eb0:	4013      	ands	r3, r2
 c001eb2:	687a      	ldr	r2, [r7, #4]
 c001eb4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 c001eb6:	0411      	lsls	r1, r2, #16
 c001eb8:	687a      	ldr	r2, [r7, #4]
 c001eba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 c001ebc:	4311      	orrs	r1, r2
 c001ebe:	687a      	ldr	r2, [r7, #4]
 c001ec0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 c001ec2:	4311      	orrs	r1, r2
 c001ec4:	687a      	ldr	r2, [r7, #4]
 c001ec6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 c001ec8:	4311      	orrs	r1, r2
 c001eca:	687a      	ldr	r2, [r7, #4]
 c001ecc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 c001ece:	0892      	lsrs	r2, r2, #2
 c001ed0:	430a      	orrs	r2, r1
 c001ed2:	431a      	orrs	r2, r3
 c001ed4:	687b      	ldr	r3, [r7, #4]
 c001ed6:	681b      	ldr	r3, [r3, #0]
 c001ed8:	f042 0201 	orr.w	r2, r2, #1
 c001edc:	611a      	str	r2, [r3, #16]
 c001ede:	e007      	b.n	c001ef0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 c001ee0:	687b      	ldr	r3, [r7, #4]
 c001ee2:	681b      	ldr	r3, [r3, #0]
 c001ee4:	691a      	ldr	r2, [r3, #16]
 c001ee6:	687b      	ldr	r3, [r7, #4]
 c001ee8:	681b      	ldr	r3, [r3, #0]
 c001eea:	f022 0201 	bic.w	r2, r2, #1
 c001eee:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 c001ef0:	687b      	ldr	r3, [r7, #4]
 c001ef2:	681b      	ldr	r3, [r3, #0]
 c001ef4:	691b      	ldr	r3, [r3, #16]
 c001ef6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 c001efa:	687b      	ldr	r3, [r7, #4]
 c001efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 c001efe:	687b      	ldr	r3, [r7, #4]
 c001f00:	681b      	ldr	r3, [r3, #0]
 c001f02:	430a      	orrs	r2, r1
 c001f04:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 c001f06:	687b      	ldr	r3, [r7, #4]
 c001f08:	691b      	ldr	r3, [r3, #16]
 c001f0a:	2b01      	cmp	r3, #1
 c001f0c:	d10c      	bne.n	c001f28 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 c001f0e:	687b      	ldr	r3, [r7, #4]
 c001f10:	681b      	ldr	r3, [r3, #0]
 c001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c001f14:	f023 010f 	bic.w	r1, r3, #15
 c001f18:	687b      	ldr	r3, [r7, #4]
 c001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001f1c:	1e5a      	subs	r2, r3, #1
 c001f1e:	687b      	ldr	r3, [r7, #4]
 c001f20:	681b      	ldr	r3, [r3, #0]
 c001f22:	430a      	orrs	r2, r1
 c001f24:	631a      	str	r2, [r3, #48]	@ 0x30
 c001f26:	e007      	b.n	c001f38 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 c001f28:	687b      	ldr	r3, [r7, #4]
 c001f2a:	681b      	ldr	r3, [r3, #0]
 c001f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c001f2e:	687b      	ldr	r3, [r7, #4]
 c001f30:	681b      	ldr	r3, [r3, #0]
 c001f32:	f022 020f 	bic.w	r2, r2, #15
 c001f36:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 c001f38:	687b      	ldr	r3, [r7, #4]
 c001f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c001f3c:	f023 0303 	bic.w	r3, r3, #3
 c001f40:	f043 0201 	orr.w	r2, r3, #1
 c001f44:	687b      	ldr	r3, [r7, #4]
 c001f46:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c001f48:	e092      	b.n	c002070 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 c001f4a:	687b      	ldr	r3, [r7, #4]
 c001f4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 c001f50:	2b01      	cmp	r3, #1
 c001f52:	d111      	bne.n	c001f78 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 c001f54:	687b      	ldr	r3, [r7, #4]
 c001f56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 c001f58:	687b      	ldr	r3, [r7, #4]
 c001f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 c001f5c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 c001f5e:	687b      	ldr	r3, [r7, #4]
 c001f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 c001f62:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 c001f64:	687b      	ldr	r3, [r7, #4]
 c001f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 c001f68:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 c001f6a:	69fa      	ldr	r2, [r7, #28]
 c001f6c:	4313      	orrs	r3, r2
 c001f6e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 c001f70:	69fb      	ldr	r3, [r7, #28]
 c001f72:	f043 0301 	orr.w	r3, r3, #1
 c001f76:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 c001f78:	687b      	ldr	r3, [r7, #4]
 c001f7a:	681b      	ldr	r3, [r3, #0]
 c001f7c:	691a      	ldr	r2, [r3, #16]
 c001f7e:	4b17      	ldr	r3, [pc, #92]	@ (c001fdc <HAL_ADC_Init+0x4f0>)
 c001f80:	4013      	ands	r3, r2
 c001f82:	687a      	ldr	r2, [r7, #4]
 c001f84:	6812      	ldr	r2, [r2, #0]
 c001f86:	69f9      	ldr	r1, [r7, #28]
 c001f88:	430b      	orrs	r3, r1
 c001f8a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 c001f8c:	687b      	ldr	r3, [r7, #4]
 c001f8e:	6818      	ldr	r0, [r3, #0]
 c001f90:	687b      	ldr	r3, [r7, #4]
 c001f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c001f94:	461a      	mov	r2, r3
 c001f96:	2100      	movs	r1, #0
 c001f98:	f7ff fd01 	bl	c00199e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 c001f9c:	687b      	ldr	r3, [r7, #4]
 c001f9e:	6818      	ldr	r0, [r3, #0]
 c001fa0:	687b      	ldr	r3, [r7, #4]
 c001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c001fa4:	461a      	mov	r2, r3
 c001fa6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 c001faa:	f7ff fcf8 	bl	c00199e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 c001fae:	687b      	ldr	r3, [r7, #4]
 c001fb0:	691b      	ldr	r3, [r3, #16]
 c001fb2:	2b00      	cmp	r3, #0
 c001fb4:	d114      	bne.n	c001fe0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 c001fb6:	687b      	ldr	r3, [r7, #4]
 c001fb8:	681b      	ldr	r3, [r3, #0]
 c001fba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 c001fbc:	687b      	ldr	r3, [r7, #4]
 c001fbe:	681b      	ldr	r3, [r3, #0]
 c001fc0:	f062 020f 	orn	r2, r2, #15
 c001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
 c001fc6:	e024      	b.n	c002012 <HAL_ADC_Init+0x526>
 c001fc8:	56021000 	.word	0x56021000
 c001fcc:	fff0c013 	.word	0xfff0c013
 c001fd0:	ffde800d 	.word	0xffde800d
 c001fd4:	52028000 	.word	0x52028000
 c001fd8:	fc00f81e 	.word	0xfc00f81e
 c001fdc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 c001fe0:	687b      	ldr	r3, [r7, #4]
 c001fe2:	691b      	ldr	r3, [r3, #16]
 c001fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c001fe8:	d113      	bne.n	c002012 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 c001fea:	687b      	ldr	r3, [r7, #4]
 c001fec:	681b      	ldr	r3, [r3, #0]
 c001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001ff0:	687b      	ldr	r3, [r7, #4]
 c001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001ff4:	3b01      	subs	r3, #1
 c001ff6:	009b      	lsls	r3, r3, #2
 c001ff8:	f003 031c 	and.w	r3, r3, #28
 c001ffc:	f06f 020f 	mvn.w	r2, #15
 c002000:	fa02 f103 	lsl.w	r1, r2, r3
 c002004:	687b      	ldr	r3, [r7, #4]
 c002006:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 c00200a:	687b      	ldr	r3, [r7, #4]
 c00200c:	681b      	ldr	r3, [r3, #0]
 c00200e:	430a      	orrs	r2, r1
 c002010:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 c002012:	687b      	ldr	r3, [r7, #4]
 c002014:	681b      	ldr	r3, [r3, #0]
 c002016:	68da      	ldr	r2, [r3, #12]
 c002018:	4b18      	ldr	r3, [pc, #96]	@ (c00207c <HAL_ADC_Init+0x590>)
 c00201a:	4013      	ands	r3, r2
 c00201c:	6a3a      	ldr	r2, [r7, #32]
 c00201e:	429a      	cmp	r2, r3
 c002020:	d10b      	bne.n	c00203a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 c002022:	687b      	ldr	r3, [r7, #4]
 c002024:	2200      	movs	r2, #0
 c002026:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 c002028:	687b      	ldr	r3, [r7, #4]
 c00202a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c00202c:	f023 0303 	bic.w	r3, r3, #3
 c002030:	f043 0201 	orr.w	r2, r3, #1
 c002034:	687b      	ldr	r3, [r7, #4]
 c002036:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c002038:	e01a      	b.n	c002070 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 c00203a:	687b      	ldr	r3, [r7, #4]
 c00203c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c00203e:	f023 0312 	bic.w	r3, r3, #18
 c002042:	f043 0210 	orr.w	r2, r3, #16
 c002046:	687b      	ldr	r3, [r7, #4]
 c002048:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 c00204a:	687b      	ldr	r3, [r7, #4]
 c00204c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c00204e:	f043 0201 	orr.w	r2, r3, #1
 c002052:	687b      	ldr	r3, [r7, #4]
 c002054:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 c002056:	2301      	movs	r3, #1
 c002058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 c00205c:	e008      	b.n	c002070 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 c00205e:	687b      	ldr	r3, [r7, #4]
 c002060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c002062:	f043 0210 	orr.w	r2, r3, #16
 c002066:	687b      	ldr	r3, [r7, #4]
 c002068:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 c00206a:	2301      	movs	r3, #1
 c00206c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 c002070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 c002074:	4618      	mov	r0, r3
 c002076:	3728      	adds	r7, #40	@ 0x28
 c002078:	46bd      	mov	sp, r7
 c00207a:	bd80      	pop	{r7, pc}
 c00207c:	833ffff3 	.word	0x833ffff3

0c002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c002080:	b480      	push	{r7}
 c002082:	b085      	sub	sp, #20
 c002084:	af00      	add	r7, sp, #0
 c002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c002088:	687b      	ldr	r3, [r7, #4]
 c00208a:	f003 0307 	and.w	r3, r3, #7
 c00208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c002090:	4b0c      	ldr	r3, [pc, #48]	@ (c0020c4 <__NVIC_SetPriorityGrouping+0x44>)
 c002092:	68db      	ldr	r3, [r3, #12]
 c002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c002096:	68ba      	ldr	r2, [r7, #8]
 c002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c00209c:	4013      	ands	r3, r2
 c00209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0020a0:	68fb      	ldr	r3, [r7, #12]
 c0020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0020a4:	68bb      	ldr	r3, [r7, #8]
 c0020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c0020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c0020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0020b2:	4a04      	ldr	r2, [pc, #16]	@ (c0020c4 <__NVIC_SetPriorityGrouping+0x44>)
 c0020b4:	68bb      	ldr	r3, [r7, #8]
 c0020b6:	60d3      	str	r3, [r2, #12]
}
 c0020b8:	bf00      	nop
 c0020ba:	3714      	adds	r7, #20
 c0020bc:	46bd      	mov	sp, r7
 c0020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020c2:	4770      	bx	lr
 c0020c4:	e000ed00 	.word	0xe000ed00

0c0020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0020c8:	b480      	push	{r7}
 c0020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0020cc:	4b04      	ldr	r3, [pc, #16]	@ (c0020e0 <__NVIC_GetPriorityGrouping+0x18>)
 c0020ce:	68db      	ldr	r3, [r3, #12]
 c0020d0:	0a1b      	lsrs	r3, r3, #8
 c0020d2:	f003 0307 	and.w	r3, r3, #7
}
 c0020d6:	4618      	mov	r0, r3
 c0020d8:	46bd      	mov	sp, r7
 c0020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020de:	4770      	bx	lr
 c0020e0:	e000ed00 	.word	0xe000ed00

0c0020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0020e4:	b480      	push	{r7}
 c0020e6:	b083      	sub	sp, #12
 c0020e8:	af00      	add	r7, sp, #0
 c0020ea:	4603      	mov	r3, r0
 c0020ec:	6039      	str	r1, [r7, #0]
 c0020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0020f4:	2b00      	cmp	r3, #0
 c0020f6:	db0a      	blt.n	c00210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0020f8:	683b      	ldr	r3, [r7, #0]
 c0020fa:	b2da      	uxtb	r2, r3
 c0020fc:	490c      	ldr	r1, [pc, #48]	@ (c002130 <__NVIC_SetPriority+0x4c>)
 c0020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002102:	0112      	lsls	r2, r2, #4
 c002104:	b2d2      	uxtb	r2, r2
 c002106:	440b      	add	r3, r1
 c002108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c00210c:	e00a      	b.n	c002124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00210e:	683b      	ldr	r3, [r7, #0]
 c002110:	b2da      	uxtb	r2, r3
 c002112:	4908      	ldr	r1, [pc, #32]	@ (c002134 <__NVIC_SetPriority+0x50>)
 c002114:	79fb      	ldrb	r3, [r7, #7]
 c002116:	f003 030f 	and.w	r3, r3, #15
 c00211a:	3b04      	subs	r3, #4
 c00211c:	0112      	lsls	r2, r2, #4
 c00211e:	b2d2      	uxtb	r2, r2
 c002120:	440b      	add	r3, r1
 c002122:	761a      	strb	r2, [r3, #24]
}
 c002124:	bf00      	nop
 c002126:	370c      	adds	r7, #12
 c002128:	46bd      	mov	sp, r7
 c00212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00212e:	4770      	bx	lr
 c002130:	e000e100 	.word	0xe000e100
 c002134:	e000ed00 	.word	0xe000ed00

0c002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c002138:	b480      	push	{r7}
 c00213a:	b089      	sub	sp, #36	@ 0x24
 c00213c:	af00      	add	r7, sp, #0
 c00213e:	60f8      	str	r0, [r7, #12]
 c002140:	60b9      	str	r1, [r7, #8]
 c002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c002144:	68fb      	ldr	r3, [r7, #12]
 c002146:	f003 0307 	and.w	r3, r3, #7
 c00214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c00214c:	69fb      	ldr	r3, [r7, #28]
 c00214e:	f1c3 0307 	rsb	r3, r3, #7
 c002152:	2b04      	cmp	r3, #4
 c002154:	bf28      	it	cs
 c002156:	2304      	movcs	r3, #4
 c002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00215a:	69fb      	ldr	r3, [r7, #28]
 c00215c:	3304      	adds	r3, #4
 c00215e:	2b06      	cmp	r3, #6
 c002160:	d902      	bls.n	c002168 <NVIC_EncodePriority+0x30>
 c002162:	69fb      	ldr	r3, [r7, #28]
 c002164:	3b03      	subs	r3, #3
 c002166:	e000      	b.n	c00216a <NVIC_EncodePriority+0x32>
 c002168:	2300      	movs	r3, #0
 c00216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00216c:	f04f 32ff 	mov.w	r2, #4294967295
 c002170:	69bb      	ldr	r3, [r7, #24]
 c002172:	fa02 f303 	lsl.w	r3, r2, r3
 c002176:	43da      	mvns	r2, r3
 c002178:	68bb      	ldr	r3, [r7, #8]
 c00217a:	401a      	ands	r2, r3
 c00217c:	697b      	ldr	r3, [r7, #20]
 c00217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c002180:	f04f 31ff 	mov.w	r1, #4294967295
 c002184:	697b      	ldr	r3, [r7, #20]
 c002186:	fa01 f303 	lsl.w	r3, r1, r3
 c00218a:	43d9      	mvns	r1, r3
 c00218c:	687b      	ldr	r3, [r7, #4]
 c00218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c002190:	4313      	orrs	r3, r2
         );
}
 c002192:	4618      	mov	r0, r3
 c002194:	3724      	adds	r7, #36	@ 0x24
 c002196:	46bd      	mov	sp, r7
 c002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00219c:	4770      	bx	lr

0c00219e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00219e:	b580      	push	{r7, lr}
 c0021a0:	b082      	sub	sp, #8
 c0021a2:	af00      	add	r7, sp, #0
 c0021a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0021a6:	6878      	ldr	r0, [r7, #4]
 c0021a8:	f7ff ff6a 	bl	c002080 <__NVIC_SetPriorityGrouping>
}
 c0021ac:	bf00      	nop
 c0021ae:	3708      	adds	r7, #8
 c0021b0:	46bd      	mov	sp, r7
 c0021b2:	bd80      	pop	{r7, pc}

0c0021b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0021b4:	b580      	push	{r7, lr}
 c0021b6:	b086      	sub	sp, #24
 c0021b8:	af00      	add	r7, sp, #0
 c0021ba:	4603      	mov	r3, r0
 c0021bc:	60b9      	str	r1, [r7, #8]
 c0021be:	607a      	str	r2, [r7, #4]
 c0021c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0021c2:	f7ff ff81 	bl	c0020c8 <__NVIC_GetPriorityGrouping>
 c0021c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0021c8:	687a      	ldr	r2, [r7, #4]
 c0021ca:	68b9      	ldr	r1, [r7, #8]
 c0021cc:	6978      	ldr	r0, [r7, #20]
 c0021ce:	f7ff ffb3 	bl	c002138 <NVIC_EncodePriority>
 c0021d2:	4602      	mov	r2, r0
 c0021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0021d8:	4611      	mov	r1, r2
 c0021da:	4618      	mov	r0, r3
 c0021dc:	f7ff ff82 	bl	c0020e4 <__NVIC_SetPriority>
}
 c0021e0:	bf00      	nop
 c0021e2:	3718      	adds	r7, #24
 c0021e4:	46bd      	mov	sp, r7
 c0021e6:	bd80      	pop	{r7, pc}

0c0021e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0021e8:	b480      	push	{r7}
 c0021ea:	b083      	sub	sp, #12
 c0021ec:	af00      	add	r7, sp, #0
 c0021ee:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0021f0:	687b      	ldr	r3, [r7, #4]
 c0021f2:	3b01      	subs	r3, #1
 c0021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0021f8:	d301      	bcc.n	c0021fe <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c0021fa:	2301      	movs	r3, #1
 c0021fc:	e00d      	b.n	c00221a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c0021fe:	4a0a      	ldr	r2, [pc, #40]	@ (c002228 <HAL_SYSTICK_Config+0x40>)
 c002200:	687b      	ldr	r3, [r7, #4]
 c002202:	3b01      	subs	r3, #1
 c002204:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c002206:	4b08      	ldr	r3, [pc, #32]	@ (c002228 <HAL_SYSTICK_Config+0x40>)
 c002208:	2200      	movs	r2, #0
 c00220a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c00220c:	4b06      	ldr	r3, [pc, #24]	@ (c002228 <HAL_SYSTICK_Config+0x40>)
 c00220e:	681b      	ldr	r3, [r3, #0]
 c002210:	4a05      	ldr	r2, [pc, #20]	@ (c002228 <HAL_SYSTICK_Config+0x40>)
 c002212:	f043 0303 	orr.w	r3, r3, #3
 c002216:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c002218:	2300      	movs	r3, #0
}
 c00221a:	4618      	mov	r0, r3
 c00221c:	370c      	adds	r7, #12
 c00221e:	46bd      	mov	sp, r7
 c002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002224:	4770      	bx	lr
 c002226:	bf00      	nop
 c002228:	e000e010 	.word	0xe000e010

0c00222c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c00222c:	b480      	push	{r7}
 c00222e:	b083      	sub	sp, #12
 c002230:	af00      	add	r7, sp, #0
 c002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c002234:	687b      	ldr	r3, [r7, #4]
 c002236:	2b04      	cmp	r3, #4
 c002238:	d844      	bhi.n	c0022c4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 c00223a:	a201      	add	r2, pc, #4	@ (adr r2, c002240 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c00223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002240:	0c002263 	.word	0x0c002263
 c002244:	0c002281 	.word	0x0c002281
 c002248:	0c0022a3 	.word	0x0c0022a3
 c00224c:	0c0022c5 	.word	0x0c0022c5
 c002250:	0c002255 	.word	0x0c002255
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c002254:	4b1f      	ldr	r3, [pc, #124]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c002256:	681b      	ldr	r3, [r3, #0]
 c002258:	4a1e      	ldr	r2, [pc, #120]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00225a:	f043 0304 	orr.w	r3, r3, #4
 c00225e:	6013      	str	r3, [r2, #0]
      break;
 c002260:	e031      	b.n	c0022c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c002262:	4b1c      	ldr	r3, [pc, #112]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c002264:	681b      	ldr	r3, [r3, #0]
 c002266:	4a1b      	ldr	r2, [pc, #108]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c002268:	f023 0304 	bic.w	r3, r3, #4
 c00226c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 c00226e:	4b1a      	ldr	r3, [pc, #104]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c002274:	4a18      	ldr	r2, [pc, #96]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c002276:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00227a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c00227e:	e022      	b.n	c0022c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c002280:	4b14      	ldr	r3, [pc, #80]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c002282:	681b      	ldr	r3, [r3, #0]
 c002284:	4a13      	ldr	r2, [pc, #76]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c002286:	f023 0304 	bic.w	r3, r3, #4
 c00228a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 c00228c:	4b12      	ldr	r3, [pc, #72]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c002292:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c002296:	4a10      	ldr	r2, [pc, #64]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c002298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c00229c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c0022a0:	e011      	b.n	c0022c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c0022a2:	4b0c      	ldr	r3, [pc, #48]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c0022a4:	681b      	ldr	r3, [r3, #0]
 c0022a6:	4a0b      	ldr	r2, [pc, #44]	@ (c0022d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c0022a8:	f023 0304 	bic.w	r3, r3, #4
 c0022ac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 c0022ae:	4b0a      	ldr	r3, [pc, #40]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c0022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0022b4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c0022b8:	4a07      	ldr	r2, [pc, #28]	@ (c0022d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c0022ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0022be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c0022c2:	e000      	b.n	c0022c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c0022c4:	bf00      	nop
  }
}
 c0022c6:	bf00      	nop
 c0022c8:	370c      	adds	r7, #12
 c0022ca:	46bd      	mov	sp, r7
 c0022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022d0:	4770      	bx	lr
 c0022d2:	bf00      	nop
 c0022d4:	e000e010 	.word	0xe000e010
 c0022d8:	56020c00 	.word	0x56020c00

0c0022dc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c0022dc:	b480      	push	{r7}
 c0022de:	b083      	sub	sp, #12
 c0022e0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c0022e2:	4b19      	ldr	r3, [pc, #100]	@ (c002348 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 c0022e4:	681b      	ldr	r3, [r3, #0]
 c0022e6:	f003 0304 	and.w	r3, r3, #4
 c0022ea:	2b00      	cmp	r3, #0
 c0022ec:	d002      	beq.n	c0022f4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c0022ee:	2304      	movs	r3, #4
 c0022f0:	607b      	str	r3, [r7, #4]
 c0022f2:	e021      	b.n	c002338 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 c0022f4:	4b15      	ldr	r3, [pc, #84]	@ (c00234c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 c0022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0022fa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 c0022fe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c002300:	683b      	ldr	r3, [r7, #0]
 c002302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c002306:	d011      	beq.n	c00232c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c002308:	683b      	ldr	r3, [r7, #0]
 c00230a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c00230e:	d810      	bhi.n	c002332 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 c002310:	683b      	ldr	r3, [r7, #0]
 c002312:	2b00      	cmp	r3, #0
 c002314:	d004      	beq.n	c002320 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c002316:	683b      	ldr	r3, [r7, #0]
 c002318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c00231c:	d003      	beq.n	c002326 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c00231e:	e008      	b.n	c002332 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c002320:	2300      	movs	r3, #0
 c002322:	607b      	str	r3, [r7, #4]
        break;
 c002324:	e008      	b.n	c002338 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c002326:	2301      	movs	r3, #1
 c002328:	607b      	str	r3, [r7, #4]
        break;
 c00232a:	e005      	b.n	c002338 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c00232c:	2302      	movs	r3, #2
 c00232e:	607b      	str	r3, [r7, #4]
        break;
 c002330:	e002      	b.n	c002338 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c002332:	2300      	movs	r3, #0
 c002334:	607b      	str	r3, [r7, #4]
        break;
 c002336:	bf00      	nop
    }
  }
  return systick_source;
 c002338:	687b      	ldr	r3, [r7, #4]
}
 c00233a:	4618      	mov	r0, r3
 c00233c:	370c      	adds	r7, #12
 c00233e:	46bd      	mov	sp, r7
 c002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002344:	4770      	bx	lr
 c002346:	bf00      	nop
 c002348:	e000e010 	.word	0xe000e010
 c00234c:	56020c00 	.word	0x56020c00

0c002350 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c002350:	b480      	push	{r7}
 c002352:	b089      	sub	sp, #36	@ 0x24
 c002354:	af00      	add	r7, sp, #0
 c002356:	6078      	str	r0, [r7, #4]
 c002358:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c00235a:	2300      	movs	r3, #0
 c00235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c00235e:	687b      	ldr	r3, [r7, #4]
 c002360:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c002362:	e1ba      	b.n	c0026da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c002364:	683b      	ldr	r3, [r7, #0]
 c002366:	681a      	ldr	r2, [r3, #0]
 c002368:	2101      	movs	r1, #1
 c00236a:	697b      	ldr	r3, [r7, #20]
 c00236c:	fa01 f303 	lsl.w	r3, r1, r3
 c002370:	4013      	ands	r3, r2
 c002372:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c002374:	697b      	ldr	r3, [r7, #20]
 c002376:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c002378:	68fb      	ldr	r3, [r7, #12]
 c00237a:	2b00      	cmp	r3, #0
 c00237c:	f000 81aa 	beq.w	c0026d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c002380:	687b      	ldr	r3, [r7, #4]
 c002382:	4a55      	ldr	r2, [pc, #340]	@ (c0024d8 <HAL_GPIO_Init+0x188>)
 c002384:	4293      	cmp	r3, r2
 c002386:	d15d      	bne.n	c002444 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c002388:	687b      	ldr	r3, [r7, #4]
 c00238a:	681b      	ldr	r3, [r3, #0]
 c00238c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c00238e:	2201      	movs	r2, #1
 c002390:	697b      	ldr	r3, [r7, #20]
 c002392:	fa02 f303 	lsl.w	r3, r2, r3
 c002396:	43db      	mvns	r3, r3
 c002398:	69fa      	ldr	r2, [r7, #28]
 c00239a:	4013      	ands	r3, r2
 c00239c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c00239e:	683b      	ldr	r3, [r7, #0]
 c0023a0:	685b      	ldr	r3, [r3, #4]
 c0023a2:	f003 0201 	and.w	r2, r3, #1
 c0023a6:	697b      	ldr	r3, [r7, #20]
 c0023a8:	fa02 f303 	lsl.w	r3, r2, r3
 c0023ac:	69fa      	ldr	r2, [r7, #28]
 c0023ae:	4313      	orrs	r3, r2
 c0023b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c0023b2:	687b      	ldr	r3, [r7, #4]
 c0023b4:	69fa      	ldr	r2, [r7, #28]
 c0023b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c0023b8:	4a48      	ldr	r2, [pc, #288]	@ (c0024dc <HAL_GPIO_Init+0x18c>)
 c0023ba:	697b      	ldr	r3, [r7, #20]
 c0023bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c0023c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c0023c2:	4a46      	ldr	r2, [pc, #280]	@ (c0024dc <HAL_GPIO_Init+0x18c>)
 c0023c4:	697b      	ldr	r3, [r7, #20]
 c0023c6:	00db      	lsls	r3, r3, #3
 c0023c8:	4413      	add	r3, r2
 c0023ca:	685b      	ldr	r3, [r3, #4]
 c0023cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c0023ce:	69bb      	ldr	r3, [r7, #24]
 c0023d0:	08da      	lsrs	r2, r3, #3
 c0023d2:	693b      	ldr	r3, [r7, #16]
 c0023d4:	3208      	adds	r2, #8
 c0023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0023da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c0023dc:	69bb      	ldr	r3, [r7, #24]
 c0023de:	f003 0307 	and.w	r3, r3, #7
 c0023e2:	009b      	lsls	r3, r3, #2
 c0023e4:	220f      	movs	r2, #15
 c0023e6:	fa02 f303 	lsl.w	r3, r2, r3
 c0023ea:	43db      	mvns	r3, r3
 c0023ec:	69fa      	ldr	r2, [r7, #28]
 c0023ee:	4013      	ands	r3, r2
 c0023f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c0023f2:	69bb      	ldr	r3, [r7, #24]
 c0023f4:	f003 0307 	and.w	r3, r3, #7
 c0023f8:	009b      	lsls	r3, r3, #2
 c0023fa:	220b      	movs	r2, #11
 c0023fc:	fa02 f303 	lsl.w	r3, r2, r3
 c002400:	69fa      	ldr	r2, [r7, #28]
 c002402:	4313      	orrs	r3, r2
 c002404:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c002406:	69bb      	ldr	r3, [r7, #24]
 c002408:	08da      	lsrs	r2, r3, #3
 c00240a:	693b      	ldr	r3, [r7, #16]
 c00240c:	3208      	adds	r2, #8
 c00240e:	69f9      	ldr	r1, [r7, #28]
 c002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c002414:	693b      	ldr	r3, [r7, #16]
 c002416:	681b      	ldr	r3, [r3, #0]
 c002418:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c00241a:	69bb      	ldr	r3, [r7, #24]
 c00241c:	005b      	lsls	r3, r3, #1
 c00241e:	2203      	movs	r2, #3
 c002420:	fa02 f303 	lsl.w	r3, r2, r3
 c002424:	43db      	mvns	r3, r3
 c002426:	69fa      	ldr	r2, [r7, #28]
 c002428:	4013      	ands	r3, r2
 c00242a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 c00242c:	69bb      	ldr	r3, [r7, #24]
 c00242e:	005b      	lsls	r3, r3, #1
 c002430:	2202      	movs	r2, #2
 c002432:	fa02 f303 	lsl.w	r3, r2, r3
 c002436:	69fa      	ldr	r2, [r7, #28]
 c002438:	4313      	orrs	r3, r2
 c00243a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c00243c:	693b      	ldr	r3, [r7, #16]
 c00243e:	69fa      	ldr	r2, [r7, #28]
 c002440:	601a      	str	r2, [r3, #0]
 c002442:	e067      	b.n	c002514 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c002444:	683b      	ldr	r3, [r7, #0]
 c002446:	685b      	ldr	r3, [r3, #4]
 c002448:	2b02      	cmp	r3, #2
 c00244a:	d003      	beq.n	c002454 <HAL_GPIO_Init+0x104>
 c00244c:	683b      	ldr	r3, [r7, #0]
 c00244e:	685b      	ldr	r3, [r3, #4]
 c002450:	2b12      	cmp	r3, #18
 c002452:	d145      	bne.n	c0024e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c002454:	697b      	ldr	r3, [r7, #20]
 c002456:	08da      	lsrs	r2, r3, #3
 c002458:	687b      	ldr	r3, [r7, #4]
 c00245a:	3208      	adds	r2, #8
 c00245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c002460:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c002462:	697b      	ldr	r3, [r7, #20]
 c002464:	f003 0307 	and.w	r3, r3, #7
 c002468:	009b      	lsls	r3, r3, #2
 c00246a:	220f      	movs	r2, #15
 c00246c:	fa02 f303 	lsl.w	r3, r2, r3
 c002470:	43db      	mvns	r3, r3
 c002472:	69fa      	ldr	r2, [r7, #28]
 c002474:	4013      	ands	r3, r2
 c002476:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c002478:	683b      	ldr	r3, [r7, #0]
 c00247a:	691b      	ldr	r3, [r3, #16]
 c00247c:	f003 020f 	and.w	r2, r3, #15
 c002480:	697b      	ldr	r3, [r7, #20]
 c002482:	f003 0307 	and.w	r3, r3, #7
 c002486:	009b      	lsls	r3, r3, #2
 c002488:	fa02 f303 	lsl.w	r3, r2, r3
 c00248c:	69fa      	ldr	r2, [r7, #28]
 c00248e:	4313      	orrs	r3, r2
 c002490:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c002492:	697b      	ldr	r3, [r7, #20]
 c002494:	08da      	lsrs	r2, r3, #3
 c002496:	687b      	ldr	r3, [r7, #4]
 c002498:	3208      	adds	r2, #8
 c00249a:	69f9      	ldr	r1, [r7, #28]
 c00249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c0024a0:	693b      	ldr	r3, [r7, #16]
 c0024a2:	681b      	ldr	r3, [r3, #0]
 c0024a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c0024a6:	69bb      	ldr	r3, [r7, #24]
 c0024a8:	005b      	lsls	r3, r3, #1
 c0024aa:	2203      	movs	r2, #3
 c0024ac:	fa02 f303 	lsl.w	r3, r2, r3
 c0024b0:	43db      	mvns	r3, r3
 c0024b2:	69fa      	ldr	r2, [r7, #28]
 c0024b4:	4013      	ands	r3, r2
 c0024b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c0024b8:	683b      	ldr	r3, [r7, #0]
 c0024ba:	685b      	ldr	r3, [r3, #4]
 c0024bc:	f003 0203 	and.w	r2, r3, #3
 c0024c0:	69bb      	ldr	r3, [r7, #24]
 c0024c2:	005b      	lsls	r3, r3, #1
 c0024c4:	fa02 f303 	lsl.w	r3, r2, r3
 c0024c8:	69fa      	ldr	r2, [r7, #28]
 c0024ca:	4313      	orrs	r3, r2
 c0024cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0024ce:	693b      	ldr	r3, [r7, #16]
 c0024d0:	69fa      	ldr	r2, [r7, #28]
 c0024d2:	601a      	str	r2, [r3, #0]
 c0024d4:	e01e      	b.n	c002514 <HAL_GPIO_Init+0x1c4>
 c0024d6:	bf00      	nop
 c0024d8:	56020000 	.word	0x56020000
 c0024dc:	0c0083c4 	.word	0x0c0083c4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c0024e0:	693b      	ldr	r3, [r7, #16]
 c0024e2:	681b      	ldr	r3, [r3, #0]
 c0024e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c0024e6:	69bb      	ldr	r3, [r7, #24]
 c0024e8:	005b      	lsls	r3, r3, #1
 c0024ea:	2203      	movs	r2, #3
 c0024ec:	fa02 f303 	lsl.w	r3, r2, r3
 c0024f0:	43db      	mvns	r3, r3
 c0024f2:	69fa      	ldr	r2, [r7, #28]
 c0024f4:	4013      	ands	r3, r2
 c0024f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c0024f8:	683b      	ldr	r3, [r7, #0]
 c0024fa:	685b      	ldr	r3, [r3, #4]
 c0024fc:	f003 0203 	and.w	r2, r3, #3
 c002500:	69bb      	ldr	r3, [r7, #24]
 c002502:	005b      	lsls	r3, r3, #1
 c002504:	fa02 f303 	lsl.w	r3, r2, r3
 c002508:	69fa      	ldr	r2, [r7, #28]
 c00250a:	4313      	orrs	r3, r2
 c00250c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c00250e:	693b      	ldr	r3, [r7, #16]
 c002510:	69fa      	ldr	r2, [r7, #28]
 c002512:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c002514:	683b      	ldr	r3, [r7, #0]
 c002516:	685b      	ldr	r3, [r3, #4]
 c002518:	2b01      	cmp	r3, #1
 c00251a:	d00b      	beq.n	c002534 <HAL_GPIO_Init+0x1e4>
 c00251c:	683b      	ldr	r3, [r7, #0]
 c00251e:	685b      	ldr	r3, [r3, #4]
 c002520:	2b02      	cmp	r3, #2
 c002522:	d007      	beq.n	c002534 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c002524:	683b      	ldr	r3, [r7, #0]
 c002526:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c002528:	2b11      	cmp	r3, #17
 c00252a:	d003      	beq.n	c002534 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00252c:	683b      	ldr	r3, [r7, #0]
 c00252e:	685b      	ldr	r3, [r3, #4]
 c002530:	2b12      	cmp	r3, #18
 c002532:	d130      	bne.n	c002596 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c002534:	693b      	ldr	r3, [r7, #16]
 c002536:	689b      	ldr	r3, [r3, #8]
 c002538:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c00253a:	69bb      	ldr	r3, [r7, #24]
 c00253c:	005b      	lsls	r3, r3, #1
 c00253e:	2203      	movs	r2, #3
 c002540:	fa02 f303 	lsl.w	r3, r2, r3
 c002544:	43db      	mvns	r3, r3
 c002546:	69fa      	ldr	r2, [r7, #28]
 c002548:	4013      	ands	r3, r2
 c00254a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c00254c:	683b      	ldr	r3, [r7, #0]
 c00254e:	68da      	ldr	r2, [r3, #12]
 c002550:	69bb      	ldr	r3, [r7, #24]
 c002552:	005b      	lsls	r3, r3, #1
 c002554:	fa02 f303 	lsl.w	r3, r2, r3
 c002558:	69fa      	ldr	r2, [r7, #28]
 c00255a:	4313      	orrs	r3, r2
 c00255c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c00255e:	693b      	ldr	r3, [r7, #16]
 c002560:	69fa      	ldr	r2, [r7, #28]
 c002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c002564:	693b      	ldr	r3, [r7, #16]
 c002566:	685b      	ldr	r3, [r3, #4]
 c002568:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c00256a:	2201      	movs	r2, #1
 c00256c:	69bb      	ldr	r3, [r7, #24]
 c00256e:	fa02 f303 	lsl.w	r3, r2, r3
 c002572:	43db      	mvns	r3, r3
 c002574:	69fa      	ldr	r2, [r7, #28]
 c002576:	4013      	ands	r3, r2
 c002578:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c00257a:	683b      	ldr	r3, [r7, #0]
 c00257c:	685b      	ldr	r3, [r3, #4]
 c00257e:	091b      	lsrs	r3, r3, #4
 c002580:	f003 0201 	and.w	r2, r3, #1
 c002584:	69bb      	ldr	r3, [r7, #24]
 c002586:	fa02 f303 	lsl.w	r3, r2, r3
 c00258a:	69fa      	ldr	r2, [r7, #28]
 c00258c:	4313      	orrs	r3, r2
 c00258e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c002590:	693b      	ldr	r3, [r7, #16]
 c002592:	69fa      	ldr	r2, [r7, #28]
 c002594:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c002596:	683b      	ldr	r3, [r7, #0]
 c002598:	685b      	ldr	r3, [r3, #4]
 c00259a:	2b03      	cmp	r3, #3
 c00259c:	d017      	beq.n	c0025ce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c00259e:	693b      	ldr	r3, [r7, #16]
 c0025a0:	68db      	ldr	r3, [r3, #12]
 c0025a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c0025a4:	69bb      	ldr	r3, [r7, #24]
 c0025a6:	005b      	lsls	r3, r3, #1
 c0025a8:	2203      	movs	r2, #3
 c0025aa:	fa02 f303 	lsl.w	r3, r2, r3
 c0025ae:	43db      	mvns	r3, r3
 c0025b0:	69fa      	ldr	r2, [r7, #28]
 c0025b2:	4013      	ands	r3, r2
 c0025b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c0025b6:	683b      	ldr	r3, [r7, #0]
 c0025b8:	689a      	ldr	r2, [r3, #8]
 c0025ba:	69bb      	ldr	r3, [r7, #24]
 c0025bc:	005b      	lsls	r3, r3, #1
 c0025be:	fa02 f303 	lsl.w	r3, r2, r3
 c0025c2:	69fa      	ldr	r2, [r7, #28]
 c0025c4:	4313      	orrs	r3, r2
 c0025c6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c0025c8:	693b      	ldr	r3, [r7, #16]
 c0025ca:	69fa      	ldr	r2, [r7, #28]
 c0025cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c0025ce:	683b      	ldr	r3, [r7, #0]
 c0025d0:	685b      	ldr	r3, [r3, #4]
 c0025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0025d6:	2b00      	cmp	r3, #0
 c0025d8:	d07c      	beq.n	c0026d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c0025da:	4a47      	ldr	r2, [pc, #284]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c0025dc:	697b      	ldr	r3, [r7, #20]
 c0025de:	089b      	lsrs	r3, r3, #2
 c0025e0:	3318      	adds	r3, #24
 c0025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0025e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c0025e8:	697b      	ldr	r3, [r7, #20]
 c0025ea:	f003 0303 	and.w	r3, r3, #3
 c0025ee:	00db      	lsls	r3, r3, #3
 c0025f0:	220f      	movs	r2, #15
 c0025f2:	fa02 f303 	lsl.w	r3, r2, r3
 c0025f6:	43db      	mvns	r3, r3
 c0025f8:	69fa      	ldr	r2, [r7, #28]
 c0025fa:	4013      	ands	r3, r2
 c0025fc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c0025fe:	687b      	ldr	r3, [r7, #4]
 c002600:	0a9a      	lsrs	r2, r3, #10
 c002602:	4b3e      	ldr	r3, [pc, #248]	@ (c0026fc <HAL_GPIO_Init+0x3ac>)
 c002604:	4013      	ands	r3, r2
 c002606:	697a      	ldr	r2, [r7, #20]
 c002608:	f002 0203 	and.w	r2, r2, #3
 c00260c:	00d2      	lsls	r2, r2, #3
 c00260e:	4093      	lsls	r3, r2
 c002610:	69fa      	ldr	r2, [r7, #28]
 c002612:	4313      	orrs	r3, r2
 c002614:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c002616:	4938      	ldr	r1, [pc, #224]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c002618:	697b      	ldr	r3, [r7, #20]
 c00261a:	089b      	lsrs	r3, r3, #2
 c00261c:	3318      	adds	r3, #24
 c00261e:	69fa      	ldr	r2, [r7, #28]
 c002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c002624:	4b34      	ldr	r3, [pc, #208]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c002626:	681b      	ldr	r3, [r3, #0]
 c002628:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c00262a:	68fb      	ldr	r3, [r7, #12]
 c00262c:	43db      	mvns	r3, r3
 c00262e:	69fa      	ldr	r2, [r7, #28]
 c002630:	4013      	ands	r3, r2
 c002632:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c002634:	683b      	ldr	r3, [r7, #0]
 c002636:	685b      	ldr	r3, [r3, #4]
 c002638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c00263c:	2b00      	cmp	r3, #0
 c00263e:	d003      	beq.n	c002648 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 c002640:	69fa      	ldr	r2, [r7, #28]
 c002642:	68fb      	ldr	r3, [r7, #12]
 c002644:	4313      	orrs	r3, r2
 c002646:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c002648:	4a2b      	ldr	r2, [pc, #172]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c00264a:	69fb      	ldr	r3, [r7, #28]
 c00264c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c00264e:	4b2a      	ldr	r3, [pc, #168]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c002650:	685b      	ldr	r3, [r3, #4]
 c002652:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c002654:	68fb      	ldr	r3, [r7, #12]
 c002656:	43db      	mvns	r3, r3
 c002658:	69fa      	ldr	r2, [r7, #28]
 c00265a:	4013      	ands	r3, r2
 c00265c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c00265e:	683b      	ldr	r3, [r7, #0]
 c002660:	685b      	ldr	r3, [r3, #4]
 c002662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c002666:	2b00      	cmp	r3, #0
 c002668:	d003      	beq.n	c002672 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 c00266a:	69fa      	ldr	r2, [r7, #28]
 c00266c:	68fb      	ldr	r3, [r7, #12]
 c00266e:	4313      	orrs	r3, r2
 c002670:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c002672:	4a21      	ldr	r2, [pc, #132]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c002674:	69fb      	ldr	r3, [r7, #28]
 c002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c002678:	4b1f      	ldr	r3, [pc, #124]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c00267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c00267e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c002680:	68fb      	ldr	r3, [r7, #12]
 c002682:	43db      	mvns	r3, r3
 c002684:	69fa      	ldr	r2, [r7, #28]
 c002686:	4013      	ands	r3, r2
 c002688:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c00268a:	683b      	ldr	r3, [r7, #0]
 c00268c:	685b      	ldr	r3, [r3, #4]
 c00268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c002692:	2b00      	cmp	r3, #0
 c002694:	d003      	beq.n	c00269e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 c002696:	69fa      	ldr	r2, [r7, #28]
 c002698:	68fb      	ldr	r3, [r7, #12]
 c00269a:	4313      	orrs	r3, r2
 c00269c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c00269e:	4a16      	ldr	r2, [pc, #88]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c0026a0:	69fb      	ldr	r3, [r7, #28]
 c0026a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 c0026a6:	4b14      	ldr	r3, [pc, #80]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c0026a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c0026ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c0026ae:	68fb      	ldr	r3, [r7, #12]
 c0026b0:	43db      	mvns	r3, r3
 c0026b2:	69fa      	ldr	r2, [r7, #28]
 c0026b4:	4013      	ands	r3, r2
 c0026b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c0026b8:	683b      	ldr	r3, [r7, #0]
 c0026ba:	685b      	ldr	r3, [r3, #4]
 c0026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c0026c0:	2b00      	cmp	r3, #0
 c0026c2:	d003      	beq.n	c0026cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 c0026c4:	69fa      	ldr	r2, [r7, #28]
 c0026c6:	68fb      	ldr	r3, [r7, #12]
 c0026c8:	4313      	orrs	r3, r2
 c0026ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c0026cc:	4a0a      	ldr	r2, [pc, #40]	@ (c0026f8 <HAL_GPIO_Init+0x3a8>)
 c0026ce:	69fb      	ldr	r3, [r7, #28]
 c0026d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 c0026d4:	697b      	ldr	r3, [r7, #20]
 c0026d6:	3301      	adds	r3, #1
 c0026d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0026da:	683b      	ldr	r3, [r7, #0]
 c0026dc:	681a      	ldr	r2, [r3, #0]
 c0026de:	697b      	ldr	r3, [r7, #20]
 c0026e0:	fa22 f303 	lsr.w	r3, r2, r3
 c0026e4:	2b00      	cmp	r3, #0
 c0026e6:	f47f ae3d 	bne.w	c002364 <HAL_GPIO_Init+0x14>
  }
}
 c0026ea:	bf00      	nop
 c0026ec:	bf00      	nop
 c0026ee:	3724      	adds	r7, #36	@ 0x24
 c0026f0:	46bd      	mov	sp, r7
 c0026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026f6:	4770      	bx	lr
 c0026f8:	56022000 	.word	0x56022000
 c0026fc:	002b7f7f 	.word	0x002b7f7f

0c002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c002700:	b480      	push	{r7}
 c002702:	b083      	sub	sp, #12
 c002704:	af00      	add	r7, sp, #0
 c002706:	6078      	str	r0, [r7, #4]
 c002708:	460b      	mov	r3, r1
 c00270a:	807b      	strh	r3, [r7, #2]
 c00270c:	4613      	mov	r3, r2
 c00270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c002710:	787b      	ldrb	r3, [r7, #1]
 c002712:	2b00      	cmp	r3, #0
 c002714:	d003      	beq.n	c00271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002716:	887a      	ldrh	r2, [r7, #2]
 c002718:	687b      	ldr	r3, [r7, #4]
 c00271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 c00271c:	e002      	b.n	c002724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 c00271e:	887a      	ldrh	r2, [r7, #2]
 c002720:	687b      	ldr	r3, [r7, #4]
 c002722:	629a      	str	r2, [r3, #40]	@ 0x28
}
 c002724:	bf00      	nop
 c002726:	370c      	adds	r7, #12
 c002728:	46bd      	mov	sp, r7
 c00272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00272e:	4770      	bx	lr

0c002730 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c002730:	b480      	push	{r7}
 c002732:	b085      	sub	sp, #20
 c002734:	af00      	add	r7, sp, #0
 c002736:	6078      	str	r0, [r7, #4]
 c002738:	460b      	mov	r3, r1
 c00273a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c00273c:	687b      	ldr	r3, [r7, #4]
 c00273e:	695b      	ldr	r3, [r3, #20]
 c002740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c002742:	887a      	ldrh	r2, [r7, #2]
 c002744:	68fb      	ldr	r3, [r7, #12]
 c002746:	4013      	ands	r3, r2
 c002748:	041a      	lsls	r2, r3, #16
 c00274a:	68fb      	ldr	r3, [r7, #12]
 c00274c:	43d9      	mvns	r1, r3
 c00274e:	887b      	ldrh	r3, [r7, #2]
 c002750:	400b      	ands	r3, r1
 c002752:	431a      	orrs	r2, r3
 c002754:	687b      	ldr	r3, [r7, #4]
 c002756:	619a      	str	r2, [r3, #24]
}
 c002758:	bf00      	nop
 c00275a:	3714      	adds	r7, #20
 c00275c:	46bd      	mov	sp, r7
 c00275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002762:	4770      	bx	lr

0c002764 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c002764:	b480      	push	{r7}
 c002766:	b089      	sub	sp, #36	@ 0x24
 c002768:	af00      	add	r7, sp, #0
 c00276a:	60f8      	str	r0, [r7, #12]
 c00276c:	460b      	mov	r3, r1
 c00276e:	607a      	str	r2, [r7, #4]
 c002770:	817b      	strh	r3, [r7, #10]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c002772:	2300      	movs	r3, #0
 c002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c002776:	68fb      	ldr	r3, [r7, #12]
 c002778:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00277a:	e02c      	b.n	c0027d6 <HAL_GPIO_ConfigPinAttributes+0x72>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00277c:	897a      	ldrh	r2, [r7, #10]
 c00277e:	2101      	movs	r1, #1
 c002780:	69bb      	ldr	r3, [r7, #24]
 c002782:	fa01 f303 	lsl.w	r3, r1, r3
 c002786:	4013      	ands	r3, r2
 c002788:	613b      	str	r3, [r7, #16]

    /* Save pin position */
    pin_position = position;
 c00278a:	69bb      	ldr	r3, [r7, #24]
 c00278c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 c00278e:	693b      	ldr	r3, [r7, #16]
 c002790:	2b00      	cmp	r3, #0
 c002792:	d01d      	beq.n	c0027d0 <HAL_GPIO_ConfigPinAttributes+0x6c>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 c002794:	68fb      	ldr	r3, [r7, #12]
 c002796:	4a16      	ldr	r2, [pc, #88]	@ (c0027f0 <HAL_GPIO_ConfigPinAttributes+0x8c>)
 c002798:	4293      	cmp	r3, r2
 c00279a:	d10a      	bne.n	c0027b2 <HAL_GPIO_ConfigPinAttributes+0x4e>
      {
        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c00279c:	4a15      	ldr	r2, [pc, #84]	@ (c0027f4 <HAL_GPIO_ConfigPinAttributes+0x90>)
 c00279e:	69bb      	ldr	r3, [r7, #24]
 c0027a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c0027a4:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c0027a6:	4a13      	ldr	r2, [pc, #76]	@ (c0027f4 <HAL_GPIO_ConfigPinAttributes+0x90>)
 c0027a8:	69bb      	ldr	r3, [r7, #24]
 c0027aa:	00db      	lsls	r3, r3, #3
 c0027ac:	4413      	add	r3, r2
 c0027ae:	685b      	ldr	r3, [r3, #4]
 c0027b0:	61fb      	str	r3, [r7, #28]
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
      }

      /* Configure the IO secure attribute */
      MODIFY_REG(p_gpio->SECCFGR, (GPIO_SECCFGR_SEC0 << pin_position), (PinAttributes << pin_position));
 c0027b2:	697b      	ldr	r3, [r7, #20]
 c0027b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c0027b6:	2101      	movs	r1, #1
 c0027b8:	69fb      	ldr	r3, [r7, #28]
 c0027ba:	fa01 f303 	lsl.w	r3, r1, r3
 c0027be:	43db      	mvns	r3, r3
 c0027c0:	401a      	ands	r2, r3
 c0027c2:	6879      	ldr	r1, [r7, #4]
 c0027c4:	69fb      	ldr	r3, [r7, #28]
 c0027c6:	fa01 f303 	lsl.w	r3, r1, r3
 c0027ca:	431a      	orrs	r2, r3
 c0027cc:	697b      	ldr	r3, [r7, #20]
 c0027ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    position++;
 c0027d0:	69bb      	ldr	r3, [r7, #24]
 c0027d2:	3301      	adds	r3, #1
 c0027d4:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c0027d6:	897a      	ldrh	r2, [r7, #10]
 c0027d8:	69bb      	ldr	r3, [r7, #24]
 c0027da:	fa42 f303 	asr.w	r3, r2, r3
 c0027de:	2b00      	cmp	r3, #0
 c0027e0:	d1cc      	bne.n	c00277c <HAL_GPIO_ConfigPinAttributes+0x18>
  }
}
 c0027e2:	bf00      	nop
 c0027e4:	bf00      	nop
 c0027e6:	3724      	adds	r7, #36	@ 0x24
 c0027e8:	46bd      	mov	sp, r7
 c0027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027ee:	4770      	bx	lr
 c0027f0:	56020000 	.word	0x56020000
 c0027f4:	0c0083c4 	.word	0x0c0083c4

0c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c0027f8:	b480      	push	{r7}
 c0027fa:	b085      	sub	sp, #20
 c0027fc:	af00      	add	r7, sp, #0
 c0027fe:	6078      	str	r0, [r7, #4]
 c002800:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002802:	683b      	ldr	r3, [r7, #0]
 c002804:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c002808:	d234      	bcs.n	c002874 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c00280a:	687b      	ldr	r3, [r7, #4]
 c00280c:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c00280e:	2b03      	cmp	r3, #3
 c002810:	d809      	bhi.n	c002826 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2e>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002812:	687b      	ldr	r3, [r7, #4]
 c002814:	0f1b      	lsrs	r3, r3, #28
 c002816:	015a      	lsls	r2, r3, #5
 c002818:	687b      	ldr	r3, [r7, #4]
 c00281a:	f003 031f 	and.w	r3, r3, #31
 c00281e:	4413      	add	r3, r2
 c002820:	2b6c      	cmp	r3, #108	@ 0x6c
 c002822:	d827      	bhi.n	c002874 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c002824:	e009      	b.n	c00283a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x42>
 c002826:	687b      	ldr	r3, [r7, #4]
 c002828:	0f1b      	lsrs	r3, r3, #28
 c00282a:	3b01      	subs	r3, #1
 c00282c:	015a      	lsls	r2, r3, #5
 c00282e:	687b      	ldr	r3, [r7, #4]
 c002830:	f003 031f 	and.w	r3, r3, #31
 c002834:	4413      	add	r3, r2
 c002836:	2b6c      	cmp	r3, #108	@ 0x6c
 c002838:	d81c      	bhi.n	c002874 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c00283a:	687b      	ldr	r3, [r7, #4]
 c00283c:	f003 0320 	and.w	r3, r3, #32
 c002840:	2b00      	cmp	r3, #0
 c002842:	d019      	beq.n	c002878 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002844:	687b      	ldr	r3, [r7, #4]
 c002846:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002848:	2b03      	cmp	r3, #3
 c00284a:	d809      	bhi.n	c002860 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x68>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c00284c:	687b      	ldr	r3, [r7, #4]
 c00284e:	0f1b      	lsrs	r3, r3, #28
 c002850:	015a      	lsls	r2, r3, #5
 c002852:	687b      	ldr	r3, [r7, #4]
 c002854:	f003 031f 	and.w	r3, r3, #31
 c002858:	4413      	add	r3, r2
 c00285a:	2b00      	cmp	r3, #0
 c00285c:	d10a      	bne.n	c002874 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c00285e:	e00b      	b.n	c002878 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c002860:	687b      	ldr	r3, [r7, #4]
 c002862:	0f1b      	lsrs	r3, r3, #28
 c002864:	3b01      	subs	r3, #1
 c002866:	015a      	lsls	r2, r3, #5
 c002868:	687b      	ldr	r3, [r7, #4]
 c00286a:	f003 031f 	and.w	r3, r3, #31
 c00286e:	4413      	add	r3, r2
 c002870:	2b00      	cmp	r3, #0
 c002872:	d001      	beq.n	c002878 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
  {
    return HAL_ERROR;
 c002874:	2301      	movs	r3, #1
 c002876:	e116      	b.n	c002aa6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ae>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002878:	687b      	ldr	r3, [r7, #4]
 c00287a:	f003 0320 	and.w	r3, r3, #32
 c00287e:	2b00      	cmp	r3, #0
 c002880:	f000 8096 	beq.w	c0029b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1b8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002884:	683a      	ldr	r2, [r7, #0]
 c002886:	f240 1301 	movw	r3, #257	@ 0x101
 c00288a:	4013      	ands	r3, r2
 c00288c:	f240 1201 	movw	r2, #257	@ 0x101
 c002890:	4293      	cmp	r3, r2
 c002892:	d120      	bne.n	c0028d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xde>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c002894:	4b87      	ldr	r3, [pc, #540]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002896:	691b      	ldr	r3, [r3, #16]
 c002898:	4a86      	ldr	r2, [pc, #536]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00289a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c00289e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c0028a2:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c0028a4:	4b83      	ldr	r3, [pc, #524]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028a6:	695b      	ldr	r3, [r3, #20]
 c0028a8:	4a82      	ldr	r2, [pc, #520]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028aa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c0028ae:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c0028b2:	6153      	str	r3, [r2, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c0028b4:	4b7f      	ldr	r3, [pc, #508]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028b6:	699b      	ldr	r3, [r3, #24]
 c0028b8:	4a7e      	ldr	r2, [pc, #504]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028ba:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c0028be:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c0028c2:	6193      	str	r3, [r2, #24]
      SET_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c0028c4:	4b7c      	ldr	r3, [pc, #496]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0028c6:	691b      	ldr	r3, [r3, #16]
 c0028c8:	4a7b      	ldr	r2, [pc, #492]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0028ca:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c0028ce:	f043 031f 	orr.w	r3, r3, #31
 c0028d2:	6113      	str	r3, [r2, #16]
 c0028d4:	e020      	b.n	c002918 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0028d6:	683b      	ldr	r3, [r7, #0]
 c0028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0028dc:	2b00      	cmp	r3, #0
 c0028de:	d01b      	beq.n	c002918 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c0028e0:	4b74      	ldr	r3, [pc, #464]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028e2:	691b      	ldr	r3, [r3, #16]
 c0028e4:	4a73      	ldr	r2, [pc, #460]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028e6:	0d1b      	lsrs	r3, r3, #20
 c0028e8:	051b      	lsls	r3, r3, #20
 c0028ea:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c0028ec:	4b71      	ldr	r3, [pc, #452]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028ee:	695b      	ldr	r3, [r3, #20]
 c0028f0:	4a70      	ldr	r2, [pc, #448]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028f2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c0028f6:	f023 0301 	bic.w	r3, r3, #1
 c0028fa:	6153      	str	r3, [r2, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c0028fc:	4b6d      	ldr	r3, [pc, #436]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0028fe:	699b      	ldr	r3, [r3, #24]
 c002900:	4a6c      	ldr	r2, [pc, #432]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002902:	0ddb      	lsrs	r3, r3, #23
 c002904:	05db      	lsls	r3, r3, #23
 c002906:	6193      	str	r3, [r2, #24]
      CLEAR_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c002908:	4b6b      	ldr	r3, [pc, #428]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00290a:	691b      	ldr	r3, [r3, #16]
 c00290c:	4a6a      	ldr	r2, [pc, #424]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00290e:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c002912:	f023 031f 	bic.w	r3, r3, #31
 c002916:	6113      	str	r3, [r2, #16]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002918:	683a      	ldr	r2, [r7, #0]
 c00291a:	f240 2302 	movw	r3, #514	@ 0x202
 c00291e:	4013      	ands	r3, r2
 c002920:	f240 2202 	movw	r2, #514	@ 0x202
 c002924:	4293      	cmp	r3, r2
 c002926:	d120      	bne.n	c00296a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c002928:	4b62      	ldr	r3, [pc, #392]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00292a:	6a1b      	ldr	r3, [r3, #32]
 c00292c:	4a61      	ldr	r2, [pc, #388]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00292e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c002932:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c002936:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c002938:	4b5e      	ldr	r3, [pc, #376]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00293c:	4a5d      	ldr	r2, [pc, #372]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00293e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c002942:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c002946:	6253      	str	r3, [r2, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c002948:	4b5a      	ldr	r3, [pc, #360]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00294c:	4a59      	ldr	r2, [pc, #356]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00294e:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c002952:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c002956:	6293      	str	r3, [r2, #40]	@ 0x28
      SET_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c002958:	4b57      	ldr	r3, [pc, #348]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00295a:	6a1b      	ldr	r3, [r3, #32]
 c00295c:	4a56      	ldr	r2, [pc, #344]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00295e:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c002962:	f043 031f 	orr.w	r3, r3, #31
 c002966:	6213      	str	r3, [r2, #32]
 c002968:	e09c      	b.n	c002aa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00296a:	683b      	ldr	r3, [r7, #0]
 c00296c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c002970:	2b00      	cmp	r3, #0
 c002972:	f000 8097 	beq.w	c002aa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c002976:	4b4f      	ldr	r3, [pc, #316]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002978:	6a1b      	ldr	r3, [r3, #32]
 c00297a:	4a4e      	ldr	r2, [pc, #312]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00297c:	0d1b      	lsrs	r3, r3, #20
 c00297e:	051b      	lsls	r3, r3, #20
 c002980:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c002982:	4b4c      	ldr	r3, [pc, #304]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002986:	4a4b      	ldr	r2, [pc, #300]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002988:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c00298c:	f023 0301 	bic.w	r3, r3, #1
 c002990:	6253      	str	r3, [r2, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c002992:	4b48      	ldr	r3, [pc, #288]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002996:	4a47      	ldr	r2, [pc, #284]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002998:	0ddb      	lsrs	r3, r3, #23
 c00299a:	05db      	lsls	r3, r3, #23
 c00299c:	6293      	str	r3, [r2, #40]	@ 0x28
      CLEAR_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c00299e:	4b46      	ldr	r3, [pc, #280]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0029a0:	6a1b      	ldr	r3, [r3, #32]
 c0029a2:	4a45      	ldr	r2, [pc, #276]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0029a4:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c0029a8:	f023 031f 	bic.w	r3, r3, #31
 c0029ac:	6213      	str	r3, [r2, #32]
 c0029ae:	e079      	b.n	c002aa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c0029b0:	687b      	ldr	r3, [r7, #4]
 c0029b2:	0f1b      	lsrs	r3, r3, #28
 c0029b4:	2b03      	cmp	r3, #3
 c0029b6:	d801      	bhi.n	c0029bc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
 c0029b8:	4b3e      	ldr	r3, [pc, #248]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0029ba:	e000      	b.n	c0029be <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c6>
 c0029bc:	4b3e      	ldr	r3, [pc, #248]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0029be:	3310      	adds	r3, #16
 c0029c0:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c0029c2:	687b      	ldr	r3, [r7, #4]
 c0029c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0029c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0029cc:	d803      	bhi.n	c0029d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1de>
 c0029ce:	687b      	ldr	r3, [r7, #4]
 c0029d0:	0f1b      	lsrs	r3, r3, #28
 c0029d2:	009b      	lsls	r3, r3, #2
 c0029d4:	e003      	b.n	c0029de <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e6>
 c0029d6:	687b      	ldr	r3, [r7, #4]
 c0029d8:	0f1b      	lsrs	r3, r3, #28
 c0029da:	3b04      	subs	r3, #4
 c0029dc:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c0029de:	4413      	add	r3, r2
 c0029e0:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0029e2:	683a      	ldr	r2, [r7, #0]
 c0029e4:	f240 1301 	movw	r3, #257	@ 0x101
 c0029e8:	4013      	ands	r3, r2
 c0029ea:	f240 1201 	movw	r2, #257	@ 0x101
 c0029ee:	4293      	cmp	r3, r2
 c0029f0:	d10a      	bne.n	c002a08 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x210>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0029f2:	68fb      	ldr	r3, [r7, #12]
 c0029f4:	6819      	ldr	r1, [r3, #0]
 c0029f6:	687b      	ldr	r3, [r7, #4]
 c0029f8:	f003 031f 	and.w	r3, r3, #31
 c0029fc:	2201      	movs	r2, #1
 c0029fe:	409a      	lsls	r2, r3
 c002a00:	68fb      	ldr	r3, [r7, #12]
 c002a02:	430a      	orrs	r2, r1
 c002a04:	601a      	str	r2, [r3, #0]
 c002a06:	e010      	b.n	c002a2a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002a08:	683b      	ldr	r3, [r7, #0]
 c002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c002a0e:	2b00      	cmp	r3, #0
 c002a10:	d00b      	beq.n	c002a2a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002a12:	68fb      	ldr	r3, [r7, #12]
 c002a14:	6819      	ldr	r1, [r3, #0]
 c002a16:	687b      	ldr	r3, [r7, #4]
 c002a18:	f003 031f 	and.w	r3, r3, #31
 c002a1c:	2201      	movs	r2, #1
 c002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 c002a22:	43da      	mvns	r2, r3
 c002a24:	68fb      	ldr	r3, [r7, #12]
 c002a26:	400a      	ands	r2, r1
 c002a28:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c002a2a:	687b      	ldr	r3, [r7, #4]
 c002a2c:	0f1b      	lsrs	r3, r3, #28
 c002a2e:	2b03      	cmp	r3, #3
 c002a30:	d801      	bhi.n	c002a36 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x23e>
 c002a32:	4b20      	ldr	r3, [pc, #128]	@ (c002ab4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002a34:	e000      	b.n	c002a38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x240>
 c002a36:	4b20      	ldr	r3, [pc, #128]	@ (c002ab8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c002a38:	3320      	adds	r3, #32
 c002a3a:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c002a3c:	687b      	ldr	r3, [r7, #4]
 c002a3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c002a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c002a46:	d803      	bhi.n	c002a50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x258>
 c002a48:	687b      	ldr	r3, [r7, #4]
 c002a4a:	0f1b      	lsrs	r3, r3, #28
 c002a4c:	009b      	lsls	r3, r3, #2
 c002a4e:	e003      	b.n	c002a58 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x260>
 c002a50:	687b      	ldr	r3, [r7, #4]
 c002a52:	0f1b      	lsrs	r3, r3, #28
 c002a54:	3b04      	subs	r3, #4
 c002a56:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c002a58:	4413      	add	r3, r2
 c002a5a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002a5c:	683a      	ldr	r2, [r7, #0]
 c002a5e:	f240 2302 	movw	r3, #514	@ 0x202
 c002a62:	4013      	ands	r3, r2
 c002a64:	f240 2202 	movw	r2, #514	@ 0x202
 c002a68:	4293      	cmp	r3, r2
 c002a6a:	d10a      	bne.n	c002a82 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x28a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002a6c:	68fb      	ldr	r3, [r7, #12]
 c002a6e:	6819      	ldr	r1, [r3, #0]
 c002a70:	687b      	ldr	r3, [r7, #4]
 c002a72:	f003 031f 	and.w	r3, r3, #31
 c002a76:	2201      	movs	r2, #1
 c002a78:	409a      	lsls	r2, r3
 c002a7a:	68fb      	ldr	r3, [r7, #12]
 c002a7c:	430a      	orrs	r2, r1
 c002a7e:	601a      	str	r2, [r3, #0]
 c002a80:	e010      	b.n	c002aa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002a82:	683b      	ldr	r3, [r7, #0]
 c002a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c002a88:	2b00      	cmp	r3, #0
 c002a8a:	d00b      	beq.n	c002aa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002a8c:	68fb      	ldr	r3, [r7, #12]
 c002a8e:	6819      	ldr	r1, [r3, #0]
 c002a90:	687b      	ldr	r3, [r7, #4]
 c002a92:	f003 031f 	and.w	r3, r3, #31
 c002a96:	2201      	movs	r2, #1
 c002a98:	fa02 f303 	lsl.w	r3, r2, r3
 c002a9c:	43da      	mvns	r2, r3
 c002a9e:	68fb      	ldr	r3, [r7, #12]
 c002aa0:	400a      	ands	r2, r1
 c002aa2:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c002aa4:	2300      	movs	r3, #0
}
 c002aa6:	4618      	mov	r0, r3
 c002aa8:	3714      	adds	r7, #20
 c002aaa:	46bd      	mov	sp, r7
 c002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ab0:	4770      	bx	lr
 c002ab2:	bf00      	nop
 c002ab4:	50032400 	.word	0x50032400
 c002ab8:	56023000 	.word	0x56023000

0c002abc <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002abc:	b480      	push	{r7}
 c002abe:	b089      	sub	sp, #36	@ 0x24
 c002ac0:	af00      	add	r7, sp, #0
 c002ac2:	6078      	str	r0, [r7, #4]
 c002ac4:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002ac6:	687b      	ldr	r3, [r7, #4]
 c002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c002acc:	d01b      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c002ace:	687b      	ldr	r3, [r7, #4]
 c002ad0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c002ad4:	d017      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c002ad6:	687b      	ldr	r3, [r7, #4]
 c002ad8:	4a5c      	ldr	r2, [pc, #368]	@ (c002c4c <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c002ada:	4293      	cmp	r3, r2
 c002adc:	d013      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c002ade:	687b      	ldr	r3, [r7, #4]
 c002ae0:	4a5b      	ldr	r2, [pc, #364]	@ (c002c50 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c002ae2:	4293      	cmp	r3, r2
 c002ae4:	d00f      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c002ae6:	687b      	ldr	r3, [r7, #4]
 c002ae8:	4a5a      	ldr	r2, [pc, #360]	@ (c002c54 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c002aea:	4293      	cmp	r3, r2
 c002aec:	d00b      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c002aee:	687b      	ldr	r3, [r7, #4]
 c002af0:	4a59      	ldr	r2, [pc, #356]	@ (c002c58 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c002af2:	4293      	cmp	r3, r2
 c002af4:	d007      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c002af6:	687b      	ldr	r3, [r7, #4]
 c002af8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c002afc:	d003      	beq.n	c002b06 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c002afe:	687b      	ldr	r3, [r7, #4]
 c002b00:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c002b04:	d111      	bne.n	c002b2a <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002b06:	683b      	ldr	r3, [r7, #0]
 c002b08:	681b      	ldr	r3, [r3, #0]
 c002b0a:	2b00      	cmp	r3, #0
 c002b0c:	d004      	beq.n	c002b18 <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002b0e:	683b      	ldr	r3, [r7, #0]
 c002b10:	681b      	ldr	r3, [r3, #0]
 c002b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c002b16:	d108      	bne.n	c002b2a <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002b18:	683b      	ldr	r3, [r7, #0]
 c002b1a:	685b      	ldr	r3, [r3, #4]
 c002b1c:	2b00      	cmp	r3, #0
 c002b1e:	d006      	beq.n	c002b2e <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002b20:	683b      	ldr	r3, [r7, #0]
 c002b22:	685b      	ldr	r3, [r3, #4]
 c002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c002b28:	d001      	beq.n	c002b2e <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c002b2a:	2301      	movs	r3, #1
 c002b2c:	e088      	b.n	c002c40 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002b2e:	687b      	ldr	r3, [r7, #4]
 c002b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c002b34:	d003      	beq.n	c002b3e <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c002b36:	687b      	ldr	r3, [r7, #4]
 c002b38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c002b3c:	d105      	bne.n	c002b4a <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c002b3e:	4b47      	ldr	r3, [pc, #284]	@ (c002c5c <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c002b40:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002b42:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c002b46:	61bb      	str	r3, [r7, #24]
 c002b48:	e02b      	b.n	c002ba2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c002b4a:	687b      	ldr	r3, [r7, #4]
 c002b4c:	4a3f      	ldr	r2, [pc, #252]	@ (c002c4c <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c002b4e:	4293      	cmp	r3, r2
 c002b50:	d003      	beq.n	c002b5a <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c002b52:	687b      	ldr	r3, [r7, #4]
 c002b54:	4a3e      	ldr	r2, [pc, #248]	@ (c002c50 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c002b56:	4293      	cmp	r3, r2
 c002b58:	d105      	bne.n	c002b66 <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c002b5a:	4b41      	ldr	r3, [pc, #260]	@ (c002c60 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c002b5c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c002b5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c002b62:	61bb      	str	r3, [r7, #24]
 c002b64:	e01d      	b.n	c002ba2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c002b66:	687b      	ldr	r3, [r7, #4]
 c002b68:	4a3a      	ldr	r2, [pc, #232]	@ (c002c54 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c002b6a:	4293      	cmp	r3, r2
 c002b6c:	d003      	beq.n	c002b76 <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c002b6e:	687b      	ldr	r3, [r7, #4]
 c002b70:	4a39      	ldr	r2, [pc, #228]	@ (c002c58 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c002b72:	4293      	cmp	r3, r2
 c002b74:	d105      	bne.n	c002b82 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c002b76:	4b3b      	ldr	r3, [pc, #236]	@ (c002c64 <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c002b78:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c002b7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 c002b7e:	61bb      	str	r3, [r7, #24]
 c002b80:	e00f      	b.n	c002ba2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c002b82:	687b      	ldr	r3, [r7, #4]
 c002b84:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c002b88:	d003      	beq.n	c002b92 <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c002b8a:	687b      	ldr	r3, [r7, #4]
 c002b8c:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c002b90:	d105      	bne.n	c002b9e <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c002b92:	4b35      	ldr	r3, [pc, #212]	@ (c002c68 <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c002b94:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c002b96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c002b9a:	61bb      	str	r3, [r7, #24]
 c002b9c:	e001      	b.n	c002ba2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c002b9e:	2301      	movs	r3, #1
 c002ba0:	e04e      	b.n	c002c40 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c002ba2:	69bb      	ldr	r3, [r7, #24]
 c002ba4:	0b9b      	lsrs	r3, r3, #14
 c002ba6:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c002ba8:	2300      	movs	r3, #0
 c002baa:	617b      	str	r3, [r7, #20]
 c002bac:	e00c      	b.n	c002bc8 <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c002bae:	683b      	ldr	r3, [r7, #0]
 c002bb0:	697a      	ldr	r2, [r7, #20]
 c002bb2:	3222      	adds	r2, #34	@ 0x22
 c002bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002bb8:	69fb      	ldr	r3, [r7, #28]
 c002bba:	697a      	ldr	r2, [r7, #20]
 c002bbc:	3280      	adds	r2, #128	@ 0x80
 c002bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002bc2:	697b      	ldr	r3, [r7, #20]
 c002bc4:	3301      	adds	r3, #1
 c002bc6:	617b      	str	r3, [r7, #20]
 c002bc8:	697a      	ldr	r2, [r7, #20]
 c002bca:	693b      	ldr	r3, [r7, #16]
 c002bcc:	429a      	cmp	r2, r3
 c002bce:	d3ee      	bcc.n	c002bae <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c002bd0:	2300      	movs	r3, #0
 c002bd2:	617b      	str	r3, [r7, #20]
 c002bd4:	e00c      	b.n	c002bf0 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c002bd6:	683b      	ldr	r3, [r7, #0]
 c002bd8:	697a      	ldr	r2, [r7, #20]
 c002bda:	3202      	adds	r2, #2
 c002bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002be0:	69fb      	ldr	r3, [r7, #28]
 c002be2:	697a      	ldr	r2, [r7, #20]
 c002be4:	3240      	adds	r2, #64	@ 0x40
 c002be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002bea:	697b      	ldr	r3, [r7, #20]
 c002bec:	3301      	adds	r3, #1
 c002bee:	617b      	str	r3, [r7, #20]
 c002bf0:	697a      	ldr	r2, [r7, #20]
 c002bf2:	693b      	ldr	r3, [r7, #16]
 c002bf4:	429a      	cmp	r2, r3
 c002bf6:	d3ee      	bcc.n	c002bd6 <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c002bf8:	693b      	ldr	r3, [r7, #16]
 c002bfa:	f003 031f 	and.w	r3, r3, #31
 c002bfe:	2201      	movs	r2, #1
 c002c00:	fa02 f303 	lsl.w	r3, r2, r3
 c002c04:	3b01      	subs	r3, #1
 c002c06:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002c08:	69fb      	ldr	r3, [r7, #28]
 c002c0a:	691a      	ldr	r2, [r3, #16]
 c002c0c:	68fb      	ldr	r3, [r7, #12]
 c002c0e:	43db      	mvns	r3, r3
 c002c10:	401a      	ands	r2, r3
 c002c12:	683b      	ldr	r3, [r7, #0]
 c002c14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c002c18:	431a      	orrs	r2, r3
 c002c1a:	69fb      	ldr	r3, [r7, #28]
 c002c1c:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002c1e:	683b      	ldr	r3, [r7, #0]
 c002c20:	685b      	ldr	r3, [r3, #4]
 c002c22:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002c24:	683b      	ldr	r3, [r7, #0]
 c002c26:	681b      	ldr	r3, [r3, #0]
 c002c28:	68ba      	ldr	r2, [r7, #8]
 c002c2a:	4313      	orrs	r3, r2
 c002c2c:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c002c2e:	69fb      	ldr	r3, [r7, #28]
 c002c30:	681b      	ldr	r3, [r3, #0]
 c002c32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c002c36:	68bb      	ldr	r3, [r7, #8]
 c002c38:	431a      	orrs	r2, r3
 c002c3a:	69fb      	ldr	r3, [r7, #28]
 c002c3c:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c002c3e:	2300      	movs	r3, #0
}
 c002c40:	4618      	mov	r0, r3
 c002c42:	3724      	adds	r7, #36	@ 0x24
 c002c44:	46bd      	mov	sp, r7
 c002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c4a:	4770      	bx	lr
 c002c4c:	20030000 	.word	0x20030000
 c002c50:	30030000 	.word	0x30030000
 c002c54:	20040000 	.word	0x20040000
 c002c58:	30040000 	.word	0x30040000
 c002c5c:	50032c00 	.word	0x50032c00
 c002c60:	50033000 	.word	0x50033000
 c002c64:	50033400 	.word	0x50033400
 c002c68:	56023800 	.word	0x56023800

0c002c6c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c002c6c:	b480      	push	{r7}
 c002c6e:	b085      	sub	sp, #20
 c002c70:	af00      	add	r7, sp, #0
 c002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002c74:	2300      	movs	r3, #0
 c002c76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c002c78:	4b0b      	ldr	r3, [pc, #44]	@ (c002ca8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002c7a:	681b      	ldr	r3, [r3, #0]
 c002c7c:	f003 0301 	and.w	r3, r3, #1
 c002c80:	2b00      	cmp	r3, #0
 c002c82:	d002      	beq.n	c002c8a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c002c84:	2301      	movs	r3, #1
 c002c86:	73fb      	strb	r3, [r7, #15]
 c002c88:	e007      	b.n	c002c9a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c002c8a:	4b07      	ldr	r3, [pc, #28]	@ (c002ca8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002c8c:	681b      	ldr	r3, [r3, #0]
 c002c8e:	f023 0204 	bic.w	r2, r3, #4
 c002c92:	4905      	ldr	r1, [pc, #20]	@ (c002ca8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002c94:	687b      	ldr	r3, [r7, #4]
 c002c96:	4313      	orrs	r3, r2
 c002c98:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 c002c9c:	4618      	mov	r0, r3
 c002c9e:	3714      	adds	r7, #20
 c002ca0:	46bd      	mov	sp, r7
 c002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ca6:	4770      	bx	lr
 c002ca8:	50030400 	.word	0x50030400

0c002cac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002cac:	b480      	push	{r7}
 c002cae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002cb0:	4b05      	ldr	r3, [pc, #20]	@ (c002cc8 <HAL_ICACHE_Enable+0x1c>)
 c002cb2:	681b      	ldr	r3, [r3, #0]
 c002cb4:	4a04      	ldr	r2, [pc, #16]	@ (c002cc8 <HAL_ICACHE_Enable+0x1c>)
 c002cb6:	f043 0301 	orr.w	r3, r3, #1
 c002cba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002cbc:	2300      	movs	r3, #0
}
 c002cbe:	4618      	mov	r0, r3
 c002cc0:	46bd      	mov	sp, r7
 c002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002cc6:	4770      	bx	lr
 c002cc8:	50030400 	.word	0x50030400

0c002ccc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 c002ccc:	b580      	push	{r7, lr}
 c002cce:	b086      	sub	sp, #24
 c002cd0:	af02      	add	r7, sp, #8
 c002cd2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 c002cd4:	687b      	ldr	r3, [r7, #4]
 c002cd6:	2b00      	cmp	r3, #0
 c002cd8:	d101      	bne.n	c002cde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 c002cda:	2301      	movs	r3, #1
 c002cdc:	e108      	b.n	c002ef0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 c002cde:	687b      	ldr	r3, [r7, #4]
 c002ce0:	681b      	ldr	r3, [r3, #0]
 c002ce2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 c002ce4:	687b      	ldr	r3, [r7, #4]
 c002ce6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 c002cea:	b2db      	uxtb	r3, r3
 c002cec:	2b00      	cmp	r3, #0
 c002cee:	d106      	bne.n	c002cfe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 c002cf0:	687b      	ldr	r3, [r7, #4]
 c002cf2:	2200      	movs	r2, #0
 c002cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 c002cf8:	6878      	ldr	r0, [r7, #4]
 c002cfa:	f7fe fa7b 	bl	c0011f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 c002cfe:	687b      	ldr	r3, [r7, #4]
 c002d00:	2203      	movs	r2, #3
 c002d02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 c002d06:	68bb      	ldr	r3, [r7, #8]
 c002d08:	4a7b      	ldr	r2, [pc, #492]	@ (c002ef8 <HAL_PCD_Init+0x22c>)
 c002d0a:	4293      	cmp	r3, r2
 c002d0c:	d102      	bne.n	c002d14 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 c002d0e:	687b      	ldr	r3, [r7, #4]
 c002d10:	2200      	movs	r2, #0
 c002d12:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 c002d14:	687b      	ldr	r3, [r7, #4]
 c002d16:	681b      	ldr	r3, [r3, #0]
 c002d18:	4618      	mov	r0, r3
 c002d1a:	f005 f86b 	bl	c007df4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 c002d1e:	687b      	ldr	r3, [r7, #4]
 c002d20:	6818      	ldr	r0, [r3, #0]
 c002d22:	687b      	ldr	r3, [r7, #4]
 c002d24:	7c1a      	ldrb	r2, [r3, #16]
 c002d26:	f88d 2000 	strb.w	r2, [sp]
 c002d2a:	3304      	adds	r3, #4
 c002d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 c002d2e:	f005 f834 	bl	c007d9a <USB_CoreInit>
 c002d32:	4603      	mov	r3, r0
 c002d34:	2b00      	cmp	r3, #0
 c002d36:	d005      	beq.n	c002d44 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c002d38:	687b      	ldr	r3, [r7, #4]
 c002d3a:	2202      	movs	r2, #2
 c002d3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c002d40:	2301      	movs	r3, #1
 c002d42:	e0d5      	b.n	c002ef0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 c002d44:	687b      	ldr	r3, [r7, #4]
 c002d46:	681b      	ldr	r3, [r3, #0]
 c002d48:	2100      	movs	r1, #0
 c002d4a:	4618      	mov	r0, r3
 c002d4c:	f005 f863 	bl	c007e16 <USB_SetCurrentMode>
 c002d50:	4603      	mov	r3, r0
 c002d52:	2b00      	cmp	r3, #0
 c002d54:	d005      	beq.n	c002d62 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c002d56:	687b      	ldr	r3, [r7, #4]
 c002d58:	2202      	movs	r2, #2
 c002d5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c002d5e:	2301      	movs	r3, #1
 c002d60:	e0c6      	b.n	c002ef0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c002d62:	2300      	movs	r3, #0
 c002d64:	73fb      	strb	r3, [r7, #15]
 c002d66:	e04a      	b.n	c002dfe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 c002d68:	7bfa      	ldrb	r2, [r7, #15]
 c002d6a:	6879      	ldr	r1, [r7, #4]
 c002d6c:	4613      	mov	r3, r2
 c002d6e:	00db      	lsls	r3, r3, #3
 c002d70:	4413      	add	r3, r2
 c002d72:	009b      	lsls	r3, r3, #2
 c002d74:	440b      	add	r3, r1
 c002d76:	3315      	adds	r3, #21
 c002d78:	2201      	movs	r2, #1
 c002d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 c002d7c:	7bfa      	ldrb	r2, [r7, #15]
 c002d7e:	6879      	ldr	r1, [r7, #4]
 c002d80:	4613      	mov	r3, r2
 c002d82:	00db      	lsls	r3, r3, #3
 c002d84:	4413      	add	r3, r2
 c002d86:	009b      	lsls	r3, r3, #2
 c002d88:	440b      	add	r3, r1
 c002d8a:	3314      	adds	r3, #20
 c002d8c:	7bfa      	ldrb	r2, [r7, #15]
 c002d8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 c002d90:	7bfa      	ldrb	r2, [r7, #15]
 c002d92:	7bfb      	ldrb	r3, [r7, #15]
 c002d94:	b298      	uxth	r0, r3
 c002d96:	6879      	ldr	r1, [r7, #4]
 c002d98:	4613      	mov	r3, r2
 c002d9a:	00db      	lsls	r3, r3, #3
 c002d9c:	4413      	add	r3, r2
 c002d9e:	009b      	lsls	r3, r3, #2
 c002da0:	440b      	add	r3, r1
 c002da2:	332e      	adds	r3, #46	@ 0x2e
 c002da4:	4602      	mov	r2, r0
 c002da6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 c002da8:	7bfa      	ldrb	r2, [r7, #15]
 c002daa:	6879      	ldr	r1, [r7, #4]
 c002dac:	4613      	mov	r3, r2
 c002dae:	00db      	lsls	r3, r3, #3
 c002db0:	4413      	add	r3, r2
 c002db2:	009b      	lsls	r3, r3, #2
 c002db4:	440b      	add	r3, r1
 c002db6:	3318      	adds	r3, #24
 c002db8:	2200      	movs	r2, #0
 c002dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 c002dbc:	7bfa      	ldrb	r2, [r7, #15]
 c002dbe:	6879      	ldr	r1, [r7, #4]
 c002dc0:	4613      	mov	r3, r2
 c002dc2:	00db      	lsls	r3, r3, #3
 c002dc4:	4413      	add	r3, r2
 c002dc6:	009b      	lsls	r3, r3, #2
 c002dc8:	440b      	add	r3, r1
 c002dca:	331c      	adds	r3, #28
 c002dcc:	2200      	movs	r2, #0
 c002dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 c002dd0:	7bfa      	ldrb	r2, [r7, #15]
 c002dd2:	6879      	ldr	r1, [r7, #4]
 c002dd4:	4613      	mov	r3, r2
 c002dd6:	00db      	lsls	r3, r3, #3
 c002dd8:	4413      	add	r3, r2
 c002dda:	009b      	lsls	r3, r3, #2
 c002ddc:	440b      	add	r3, r1
 c002dde:	3320      	adds	r3, #32
 c002de0:	2200      	movs	r2, #0
 c002de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 c002de4:	7bfa      	ldrb	r2, [r7, #15]
 c002de6:	6879      	ldr	r1, [r7, #4]
 c002de8:	4613      	mov	r3, r2
 c002dea:	00db      	lsls	r3, r3, #3
 c002dec:	4413      	add	r3, r2
 c002dee:	009b      	lsls	r3, r3, #2
 c002df0:	440b      	add	r3, r1
 c002df2:	3324      	adds	r3, #36	@ 0x24
 c002df4:	2200      	movs	r2, #0
 c002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c002df8:	7bfb      	ldrb	r3, [r7, #15]
 c002dfa:	3301      	adds	r3, #1
 c002dfc:	73fb      	strb	r3, [r7, #15]
 c002dfe:	687b      	ldr	r3, [r7, #4]
 c002e00:	791b      	ldrb	r3, [r3, #4]
 c002e02:	7bfa      	ldrb	r2, [r7, #15]
 c002e04:	429a      	cmp	r2, r3
 c002e06:	d3af      	bcc.n	c002d68 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c002e08:	2300      	movs	r3, #0
 c002e0a:	73fb      	strb	r3, [r7, #15]
 c002e0c:	e044      	b.n	c002e98 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 c002e0e:	7bfa      	ldrb	r2, [r7, #15]
 c002e10:	6879      	ldr	r1, [r7, #4]
 c002e12:	4613      	mov	r3, r2
 c002e14:	00db      	lsls	r3, r3, #3
 c002e16:	4413      	add	r3, r2
 c002e18:	009b      	lsls	r3, r3, #2
 c002e1a:	440b      	add	r3, r1
 c002e1c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 c002e20:	2200      	movs	r2, #0
 c002e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 c002e24:	7bfa      	ldrb	r2, [r7, #15]
 c002e26:	6879      	ldr	r1, [r7, #4]
 c002e28:	4613      	mov	r3, r2
 c002e2a:	00db      	lsls	r3, r3, #3
 c002e2c:	4413      	add	r3, r2
 c002e2e:	009b      	lsls	r3, r3, #2
 c002e30:	440b      	add	r3, r1
 c002e32:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 c002e36:	7bfa      	ldrb	r2, [r7, #15]
 c002e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 c002e3a:	7bfa      	ldrb	r2, [r7, #15]
 c002e3c:	6879      	ldr	r1, [r7, #4]
 c002e3e:	4613      	mov	r3, r2
 c002e40:	00db      	lsls	r3, r3, #3
 c002e42:	4413      	add	r3, r2
 c002e44:	009b      	lsls	r3, r3, #2
 c002e46:	440b      	add	r3, r1
 c002e48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 c002e4c:	2200      	movs	r2, #0
 c002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 c002e50:	7bfa      	ldrb	r2, [r7, #15]
 c002e52:	6879      	ldr	r1, [r7, #4]
 c002e54:	4613      	mov	r3, r2
 c002e56:	00db      	lsls	r3, r3, #3
 c002e58:	4413      	add	r3, r2
 c002e5a:	009b      	lsls	r3, r3, #2
 c002e5c:	440b      	add	r3, r1
 c002e5e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 c002e62:	2200      	movs	r2, #0
 c002e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 c002e66:	7bfa      	ldrb	r2, [r7, #15]
 c002e68:	6879      	ldr	r1, [r7, #4]
 c002e6a:	4613      	mov	r3, r2
 c002e6c:	00db      	lsls	r3, r3, #3
 c002e6e:	4413      	add	r3, r2
 c002e70:	009b      	lsls	r3, r3, #2
 c002e72:	440b      	add	r3, r1
 c002e74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 c002e78:	2200      	movs	r2, #0
 c002e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 c002e7c:	7bfa      	ldrb	r2, [r7, #15]
 c002e7e:	6879      	ldr	r1, [r7, #4]
 c002e80:	4613      	mov	r3, r2
 c002e82:	00db      	lsls	r3, r3, #3
 c002e84:	4413      	add	r3, r2
 c002e86:	009b      	lsls	r3, r3, #2
 c002e88:	440b      	add	r3, r1
 c002e8a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 c002e8e:	2200      	movs	r2, #0
 c002e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c002e92:	7bfb      	ldrb	r3, [r7, #15]
 c002e94:	3301      	adds	r3, #1
 c002e96:	73fb      	strb	r3, [r7, #15]
 c002e98:	687b      	ldr	r3, [r7, #4]
 c002e9a:	791b      	ldrb	r3, [r3, #4]
 c002e9c:	7bfa      	ldrb	r2, [r7, #15]
 c002e9e:	429a      	cmp	r2, r3
 c002ea0:	d3b5      	bcc.n	c002e0e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 c002ea2:	687b      	ldr	r3, [r7, #4]
 c002ea4:	6818      	ldr	r0, [r3, #0]
 c002ea6:	687b      	ldr	r3, [r7, #4]
 c002ea8:	7c1a      	ldrb	r2, [r3, #16]
 c002eaa:	f88d 2000 	strb.w	r2, [sp]
 c002eae:	3304      	adds	r3, #4
 c002eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 c002eb2:	f004 fffd 	bl	c007eb0 <USB_DevInit>
 c002eb6:	4603      	mov	r3, r0
 c002eb8:	2b00      	cmp	r3, #0
 c002eba:	d005      	beq.n	c002ec8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c002ebc:	687b      	ldr	r3, [r7, #4]
 c002ebe:	2202      	movs	r2, #2
 c002ec0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c002ec4:	2301      	movs	r3, #1
 c002ec6:	e013      	b.n	c002ef0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 c002ec8:	687b      	ldr	r3, [r7, #4]
 c002eca:	2200      	movs	r2, #0
 c002ecc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 c002ece:	687b      	ldr	r3, [r7, #4]
 c002ed0:	2201      	movs	r2, #1
 c002ed2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 c002ed6:	687b      	ldr	r3, [r7, #4]
 c002ed8:	7b1b      	ldrb	r3, [r3, #12]
 c002eda:	2b01      	cmp	r3, #1
 c002edc:	d102      	bne.n	c002ee4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 c002ede:	6878      	ldr	r0, [r7, #4]
 c002ee0:	f000 f80c 	bl	c002efc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 c002ee4:	687b      	ldr	r3, [r7, #4]
 c002ee6:	681b      	ldr	r3, [r3, #0]
 c002ee8:	4618      	mov	r0, r3
 c002eea:	f005 f9a6 	bl	c00823a <USB_DevDisconnect>

  return HAL_OK;
 c002eee:	2300      	movs	r3, #0
}
 c002ef0:	4618      	mov	r0, r3
 c002ef2:	3710      	adds	r7, #16
 c002ef4:	46bd      	mov	sp, r7
 c002ef6:	bd80      	pop	{r7, pc}
 c002ef8:	52040000 	.word	0x52040000

0c002efc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 c002efc:	b480      	push	{r7}
 c002efe:	b085      	sub	sp, #20
 c002f00:	af00      	add	r7, sp, #0
 c002f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 c002f04:	687b      	ldr	r3, [r7, #4]
 c002f06:	681b      	ldr	r3, [r3, #0]
 c002f08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 c002f0a:	687b      	ldr	r3, [r7, #4]
 c002f0c:	2201      	movs	r2, #1
 c002f0e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 c002f12:	687b      	ldr	r3, [r7, #4]
 c002f14:	2200      	movs	r2, #0
 c002f16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 c002f1a:	68fb      	ldr	r3, [r7, #12]
 c002f1c:	699b      	ldr	r3, [r3, #24]
 c002f1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 c002f22:	68fb      	ldr	r3, [r7, #12]
 c002f24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 c002f26:	68fb      	ldr	r3, [r7, #12]
 c002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c002f2e:	f043 0303 	orr.w	r3, r3, #3
 c002f32:	68fa      	ldr	r2, [r7, #12]
 c002f34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 c002f36:	2300      	movs	r3, #0
}
 c002f38:	4618      	mov	r0, r3
 c002f3a:	3714      	adds	r7, #20
 c002f3c:	46bd      	mov	sp, r7
 c002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f42:	4770      	bx	lr

0c002f44 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002f44:	b480      	push	{r7}
 c002f46:	b085      	sub	sp, #20
 c002f48:	af00      	add	r7, sp, #0
 c002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 c002f4c:	4b39      	ldr	r3, [pc, #228]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c002f54:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002f56:	68ba      	ldr	r2, [r7, #8]
 c002f58:	687b      	ldr	r3, [r7, #4]
 c002f5a:	429a      	cmp	r2, r3
 c002f5c:	d10b      	bne.n	c002f76 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c002f5e:	687b      	ldr	r3, [r7, #4]
 c002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c002f64:	d905      	bls.n	c002f72 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c002f66:	4b33      	ldr	r3, [pc, #204]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f68:	68db      	ldr	r3, [r3, #12]
 c002f6a:	4a32      	ldr	r2, [pc, #200]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002f70:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 c002f72:	2300      	movs	r3, #0
 c002f74:	e057      	b.n	c003026 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c002f76:	687b      	ldr	r3, [r7, #4]
 c002f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c002f7c:	d90a      	bls.n	c002f94 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 c002f7e:	4b2d      	ldr	r3, [pc, #180]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f80:	68db      	ldr	r3, [r3, #12]
 c002f82:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c002f86:	687b      	ldr	r3, [r7, #4]
 c002f88:	4313      	orrs	r3, r2
 c002f8a:	4a2a      	ldr	r2, [pc, #168]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002f90:	60d3      	str	r3, [r2, #12]
 c002f92:	e007      	b.n	c002fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 c002f94:	4b27      	ldr	r3, [pc, #156]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f96:	68db      	ldr	r3, [r3, #12]
 c002f98:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c002f9c:	4925      	ldr	r1, [pc, #148]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002f9e:	687b      	ldr	r3, [r7, #4]
 c002fa0:	4313      	orrs	r3, r2
 c002fa2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c002fa4:	4b24      	ldr	r3, [pc, #144]	@ (c003038 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c002fa6:	681b      	ldr	r3, [r3, #0]
 c002fa8:	4a24      	ldr	r2, [pc, #144]	@ (c00303c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002faa:	fba2 2303 	umull	r2, r3, r2, r3
 c002fae:	099b      	lsrs	r3, r3, #6
 c002fb0:	2232      	movs	r2, #50	@ 0x32
 c002fb2:	fb02 f303 	mul.w	r3, r2, r3
 c002fb6:	4a21      	ldr	r2, [pc, #132]	@ (c00303c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 c002fbc:	099b      	lsrs	r3, r3, #6
 c002fbe:	3301      	adds	r3, #1
 c002fc0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c002fc2:	e002      	b.n	c002fca <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 c002fc4:	68fb      	ldr	r3, [r7, #12]
 c002fc6:	3b01      	subs	r3, #1
 c002fc8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c002fca:	4b1a      	ldr	r3, [pc, #104]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002fcc:	68db      	ldr	r3, [r3, #12]
 c002fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c002fd2:	2b00      	cmp	r3, #0
 c002fd4:	d102      	bne.n	c002fdc <HAL_PWREx_ControlVoltageScaling+0x98>
 c002fd6:	68fb      	ldr	r3, [r7, #12]
 c002fd8:	2b00      	cmp	r3, #0
 c002fda:	d1f3      	bne.n	c002fc4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 c002fdc:	68fb      	ldr	r3, [r7, #12]
 c002fde:	2b00      	cmp	r3, #0
 c002fe0:	d01b      	beq.n	c00301a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c002fe2:	4b15      	ldr	r3, [pc, #84]	@ (c003038 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c002fe4:	681b      	ldr	r3, [r3, #0]
 c002fe6:	4a15      	ldr	r2, [pc, #84]	@ (c00303c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 c002fec:	099b      	lsrs	r3, r3, #6
 c002fee:	2232      	movs	r2, #50	@ 0x32
 c002ff0:	fb02 f303 	mul.w	r3, r2, r3
 c002ff4:	4a11      	ldr	r2, [pc, #68]	@ (c00303c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 c002ffa:	099b      	lsrs	r3, r3, #6
 c002ffc:	3301      	adds	r3, #1
 c002ffe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c003000:	e002      	b.n	c003008 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 c003002:	68fb      	ldr	r3, [r7, #12]
 c003004:	3b01      	subs	r3, #1
 c003006:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c003008:	4b0a      	ldr	r3, [pc, #40]	@ (c003034 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00300c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c003010:	2b00      	cmp	r3, #0
 c003012:	d102      	bne.n	c00301a <HAL_PWREx_ControlVoltageScaling+0xd6>
 c003014:	68fb      	ldr	r3, [r7, #12]
 c003016:	2b00      	cmp	r3, #0
 c003018:	d1f3      	bne.n	c003002 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c00301a:	68fb      	ldr	r3, [r7, #12]
 c00301c:	2b00      	cmp	r3, #0
 c00301e:	d101      	bne.n	c003024 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 c003020:	2303      	movs	r3, #3
 c003022:	e000      	b.n	c003026 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 c003024:	2300      	movs	r3, #0
}
 c003026:	4618      	mov	r0, r3
 c003028:	3714      	adds	r7, #20
 c00302a:	46bd      	mov	sp, r7
 c00302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003030:	4770      	bx	lr
 c003032:	bf00      	nop
 c003034:	56020800 	.word	0x56020800
 c003038:	30000000 	.word	0x30000000
 c00303c:	10624dd3 	.word	0x10624dd3

0c003040 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c003040:	b480      	push	{r7}
 c003042:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 c003044:	4b04      	ldr	r3, [pc, #16]	@ (c003058 <HAL_PWREx_GetVoltageRange+0x18>)
 c003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c003048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 c00304c:	4618      	mov	r0, r3
 c00304e:	46bd      	mov	sp, r7
 c003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003054:	4770      	bx	lr
 c003056:	bf00      	nop
 c003058:	56020800 	.word	0x56020800

0c00305c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c00305c:	b480      	push	{r7}
 c00305e:	b085      	sub	sp, #20
 c003060:	af00      	add	r7, sp, #0
 c003062:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c003064:	4b22      	ldr	r3, [pc, #136]	@ (c0030f0 <HAL_PWREx_ConfigSupply+0x94>)
 c003066:	681b      	ldr	r3, [r3, #0]
 c003068:	4a22      	ldr	r2, [pc, #136]	@ (c0030f4 <HAL_PWREx_ConfigSupply+0x98>)
 c00306a:	fba2 2303 	umull	r2, r3, r2, r3
 c00306e:	099b      	lsrs	r3, r3, #6
 c003070:	2232      	movs	r2, #50	@ 0x32
 c003072:	fb02 f303 	mul.w	r3, r2, r3
 c003076:	4a1f      	ldr	r2, [pc, #124]	@ (c0030f4 <HAL_PWREx_ConfigSupply+0x98>)
 c003078:	fba2 2303 	umull	r2, r3, r2, r3
 c00307c:	099b      	lsrs	r3, r3, #6
 c00307e:	3301      	adds	r3, #1
 c003080:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c003082:	687b      	ldr	r3, [r7, #4]
 c003084:	2b00      	cmp	r3, #0
 c003086:	d113      	bne.n	c0030b0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c003088:	4b1b      	ldr	r3, [pc, #108]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00308a:	689b      	ldr	r3, [r3, #8]
 c00308c:	4a1a      	ldr	r2, [pc, #104]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00308e:	f023 0302 	bic.w	r3, r3, #2
 c003092:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c003094:	e002      	b.n	c00309c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c003096:	68fb      	ldr	r3, [r7, #12]
 c003098:	3b01      	subs	r3, #1
 c00309a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c00309c:	4b16      	ldr	r3, [pc, #88]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0030a0:	f003 0302 	and.w	r3, r3, #2
 c0030a4:	2b02      	cmp	r3, #2
 c0030a6:	d116      	bne.n	c0030d6 <HAL_PWREx_ConfigSupply+0x7a>
 c0030a8:	68fb      	ldr	r3, [r7, #12]
 c0030aa:	2b00      	cmp	r3, #0
 c0030ac:	d1f3      	bne.n	c003096 <HAL_PWREx_ConfigSupply+0x3a>
 c0030ae:	e012      	b.n	c0030d6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c0030b0:	4b11      	ldr	r3, [pc, #68]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c0030b2:	689b      	ldr	r3, [r3, #8]
 c0030b4:	4a10      	ldr	r2, [pc, #64]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c0030b6:	f043 0302 	orr.w	r3, r3, #2
 c0030ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c0030bc:	e002      	b.n	c0030c4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c0030be:	68fb      	ldr	r3, [r7, #12]
 c0030c0:	3b01      	subs	r3, #1
 c0030c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c0030c4:	4b0c      	ldr	r3, [pc, #48]	@ (c0030f8 <HAL_PWREx_ConfigSupply+0x9c>)
 c0030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0030c8:	f003 0302 	and.w	r3, r3, #2
 c0030cc:	2b00      	cmp	r3, #0
 c0030ce:	d102      	bne.n	c0030d6 <HAL_PWREx_ConfigSupply+0x7a>
 c0030d0:	68fb      	ldr	r3, [r7, #12]
 c0030d2:	2b00      	cmp	r3, #0
 c0030d4:	d1f3      	bne.n	c0030be <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c0030d6:	68fb      	ldr	r3, [r7, #12]
 c0030d8:	2b00      	cmp	r3, #0
 c0030da:	d101      	bne.n	c0030e0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c0030dc:	2303      	movs	r3, #3
 c0030de:	e000      	b.n	c0030e2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c0030e0:	2300      	movs	r3, #0
}
 c0030e2:	4618      	mov	r0, r3
 c0030e4:	3714      	adds	r7, #20
 c0030e6:	46bd      	mov	sp, r7
 c0030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0030ec:	4770      	bx	lr
 c0030ee:	bf00      	nop
 c0030f0:	30000000 	.word	0x30000000
 c0030f4:	10624dd3 	.word	0x10624dd3
 c0030f8:	56020800 	.word	0x56020800

0c0030fc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 c0030fc:	b480      	push	{r7}
 c0030fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 c003100:	4b05      	ldr	r3, [pc, #20]	@ (c003118 <HAL_PWREx_EnableVddUSB+0x1c>)
 c003102:	691b      	ldr	r3, [r3, #16]
 c003104:	4a04      	ldr	r2, [pc, #16]	@ (c003118 <HAL_PWREx_EnableVddUSB+0x1c>)
 c003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c00310a:	6113      	str	r3, [r2, #16]
}
 c00310c:	bf00      	nop
 c00310e:	46bd      	mov	sp, r7
 c003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003114:	4770      	bx	lr
 c003116:	bf00      	nop
 c003118:	56020800 	.word	0x56020800

0c00311c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c00311c:	b480      	push	{r7}
 c00311e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 c003120:	4b05      	ldr	r3, [pc, #20]	@ (c003138 <HAL_PWREx_EnableVddIO2+0x1c>)
 c003122:	691b      	ldr	r3, [r3, #16]
 c003124:	4a04      	ldr	r2, [pc, #16]	@ (c003138 <HAL_PWREx_EnableVddIO2+0x1c>)
 c003126:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 c00312a:	6113      	str	r3, [r2, #16]
}
 c00312c:	bf00      	nop
 c00312e:	46bd      	mov	sp, r7
 c003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003134:	4770      	bx	lr
 c003136:	bf00      	nop
 c003138:	56020800 	.word	0x56020800

0c00313c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 c00313c:	b480      	push	{r7}
 c00313e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 c003140:	4b05      	ldr	r3, [pc, #20]	@ (c003158 <HAL_PWREx_EnableVddA+0x1c>)
 c003142:	691b      	ldr	r3, [r3, #16]
 c003144:	4a04      	ldr	r2, [pc, #16]	@ (c003158 <HAL_PWREx_EnableVddA+0x1c>)
 c003146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 c00314a:	6113      	str	r3, [r2, #16]
}
 c00314c:	bf00      	nop
 c00314e:	46bd      	mov	sp, r7
 c003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003154:	4770      	bx	lr
 c003156:	bf00      	nop
 c003158:	56020800 	.word	0x56020800

0c00315c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 c00315c:	b580      	push	{r7, lr}
 c00315e:	b08e      	sub	sp, #56	@ 0x38
 c003160:	af00      	add	r7, sp, #0
 c003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 c003164:	2300      	movs	r3, #0
 c003166:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 c00316a:	687b      	ldr	r3, [r7, #4]
 c00316c:	2b00      	cmp	r3, #0
 c00316e:	d102      	bne.n	c003176 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 c003170:	2301      	movs	r3, #1
 c003172:	f000 bec8 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003176:	4b99      	ldr	r3, [pc, #612]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003178:	69db      	ldr	r3, [r3, #28]
 c00317a:	f003 030c 	and.w	r3, r3, #12
 c00317e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003180:	4b96      	ldr	r3, [pc, #600]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003184:	f003 0303 	and.w	r3, r3, #3
 c003188:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c00318a:	687b      	ldr	r3, [r7, #4]
 c00318c:	681b      	ldr	r3, [r3, #0]
 c00318e:	f003 0310 	and.w	r3, r3, #16
 c003192:	2b00      	cmp	r3, #0
 c003194:	f000 816c 	beq.w	c003470 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00319a:	2b00      	cmp	r3, #0
 c00319c:	d007      	beq.n	c0031ae <HAL_RCC_OscConfig+0x52>
 c00319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0031a0:	2b0c      	cmp	r3, #12
 c0031a2:	f040 80de 	bne.w	c003362 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0031a8:	2b01      	cmp	r3, #1
 c0031aa:	f040 80da 	bne.w	c003362 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c0031ae:	687b      	ldr	r3, [r7, #4]
 c0031b0:	69db      	ldr	r3, [r3, #28]
 c0031b2:	2b00      	cmp	r3, #0
 c0031b4:	d102      	bne.n	c0031bc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 c0031b6:	2301      	movs	r3, #1
 c0031b8:	f000 bea5 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0031bc:	687b      	ldr	r3, [r7, #4]
 c0031be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c0031c0:	4b86      	ldr	r3, [pc, #536]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0031c2:	689b      	ldr	r3, [r3, #8]
 c0031c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0031c8:	2b00      	cmp	r3, #0
 c0031ca:	d004      	beq.n	c0031d6 <HAL_RCC_OscConfig+0x7a>
 c0031cc:	4b83      	ldr	r3, [pc, #524]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0031ce:	689b      	ldr	r3, [r3, #8]
 c0031d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0031d4:	e005      	b.n	c0031e2 <HAL_RCC_OscConfig+0x86>
 c0031d6:	4b81      	ldr	r3, [pc, #516]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0031d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0031dc:	041b      	lsls	r3, r3, #16
 c0031de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0031e2:	4293      	cmp	r3, r2
 c0031e4:	d255      	bcs.n	c003292 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0031e8:	2b00      	cmp	r3, #0
 c0031ea:	d10a      	bne.n	c003202 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0031ec:	687b      	ldr	r3, [r7, #4]
 c0031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0031f0:	4618      	mov	r0, r3
 c0031f2:	f001 f9d9 	bl	c0045a8 <RCC_SetFlashLatencyFromMSIRange>
 c0031f6:	4603      	mov	r3, r0
 c0031f8:	2b00      	cmp	r3, #0
 c0031fa:	d002      	beq.n	c003202 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 c0031fc:	2301      	movs	r3, #1
 c0031fe:	f000 be82 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c003202:	4b76      	ldr	r3, [pc, #472]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003204:	689b      	ldr	r3, [r3, #8]
 c003206:	4a75      	ldr	r2, [pc, #468]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c00320c:	6093      	str	r3, [r2, #8]
 c00320e:	4b73      	ldr	r3, [pc, #460]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003210:	689b      	ldr	r3, [r3, #8]
 c003212:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c003216:	687b      	ldr	r3, [r7, #4]
 c003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00321a:	4970      	ldr	r1, [pc, #448]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00321c:	4313      	orrs	r3, r2
 c00321e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c003220:	687b      	ldr	r3, [r7, #4]
 c003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003224:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c003228:	d309      	bcc.n	c00323e <HAL_RCC_OscConfig+0xe2>
 c00322a:	4b6c      	ldr	r3, [pc, #432]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00322c:	68db      	ldr	r3, [r3, #12]
 c00322e:	f023 021f 	bic.w	r2, r3, #31
 c003232:	687b      	ldr	r3, [r7, #4]
 c003234:	6a1b      	ldr	r3, [r3, #32]
 c003236:	4969      	ldr	r1, [pc, #420]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003238:	4313      	orrs	r3, r2
 c00323a:	60cb      	str	r3, [r1, #12]
 c00323c:	e07e      	b.n	c00333c <HAL_RCC_OscConfig+0x1e0>
 c00323e:	687b      	ldr	r3, [r7, #4]
 c003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003242:	2b00      	cmp	r3, #0
 c003244:	da0a      	bge.n	c00325c <HAL_RCC_OscConfig+0x100>
 c003246:	4b65      	ldr	r3, [pc, #404]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003248:	68db      	ldr	r3, [r3, #12]
 c00324a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c00324e:	687b      	ldr	r3, [r7, #4]
 c003250:	6a1b      	ldr	r3, [r3, #32]
 c003252:	015b      	lsls	r3, r3, #5
 c003254:	4961      	ldr	r1, [pc, #388]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003256:	4313      	orrs	r3, r2
 c003258:	60cb      	str	r3, [r1, #12]
 c00325a:	e06f      	b.n	c00333c <HAL_RCC_OscConfig+0x1e0>
 c00325c:	687b      	ldr	r3, [r7, #4]
 c00325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c003264:	d30a      	bcc.n	c00327c <HAL_RCC_OscConfig+0x120>
 c003266:	4b5d      	ldr	r3, [pc, #372]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003268:	68db      	ldr	r3, [r3, #12]
 c00326a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c00326e:	687b      	ldr	r3, [r7, #4]
 c003270:	6a1b      	ldr	r3, [r3, #32]
 c003272:	029b      	lsls	r3, r3, #10
 c003274:	4959      	ldr	r1, [pc, #356]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003276:	4313      	orrs	r3, r2
 c003278:	60cb      	str	r3, [r1, #12]
 c00327a:	e05f      	b.n	c00333c <HAL_RCC_OscConfig+0x1e0>
 c00327c:	4b57      	ldr	r3, [pc, #348]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00327e:	68db      	ldr	r3, [r3, #12]
 c003280:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c003284:	687b      	ldr	r3, [r7, #4]
 c003286:	6a1b      	ldr	r3, [r3, #32]
 c003288:	03db      	lsls	r3, r3, #15
 c00328a:	4954      	ldr	r1, [pc, #336]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00328c:	4313      	orrs	r3, r2
 c00328e:	60cb      	str	r3, [r1, #12]
 c003290:	e054      	b.n	c00333c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c003292:	4b52      	ldr	r3, [pc, #328]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003294:	689b      	ldr	r3, [r3, #8]
 c003296:	4a51      	ldr	r2, [pc, #324]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c00329c:	6093      	str	r3, [r2, #8]
 c00329e:	4b4f      	ldr	r3, [pc, #316]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032a0:	689b      	ldr	r3, [r3, #8]
 c0032a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c0032a6:	687b      	ldr	r3, [r7, #4]
 c0032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0032aa:	494c      	ldr	r1, [pc, #304]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032ac:	4313      	orrs	r3, r2
 c0032ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0032b0:	687b      	ldr	r3, [r7, #4]
 c0032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0032b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0032b8:	d309      	bcc.n	c0032ce <HAL_RCC_OscConfig+0x172>
 c0032ba:	4b48      	ldr	r3, [pc, #288]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032bc:	68db      	ldr	r3, [r3, #12]
 c0032be:	f023 021f 	bic.w	r2, r3, #31
 c0032c2:	687b      	ldr	r3, [r7, #4]
 c0032c4:	6a1b      	ldr	r3, [r3, #32]
 c0032c6:	4945      	ldr	r1, [pc, #276]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032c8:	4313      	orrs	r3, r2
 c0032ca:	60cb      	str	r3, [r1, #12]
 c0032cc:	e028      	b.n	c003320 <HAL_RCC_OscConfig+0x1c4>
 c0032ce:	687b      	ldr	r3, [r7, #4]
 c0032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0032d2:	2b00      	cmp	r3, #0
 c0032d4:	da0a      	bge.n	c0032ec <HAL_RCC_OscConfig+0x190>
 c0032d6:	4b41      	ldr	r3, [pc, #260]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032d8:	68db      	ldr	r3, [r3, #12]
 c0032da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c0032de:	687b      	ldr	r3, [r7, #4]
 c0032e0:	6a1b      	ldr	r3, [r3, #32]
 c0032e2:	015b      	lsls	r3, r3, #5
 c0032e4:	493d      	ldr	r1, [pc, #244]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032e6:	4313      	orrs	r3, r2
 c0032e8:	60cb      	str	r3, [r1, #12]
 c0032ea:	e019      	b.n	c003320 <HAL_RCC_OscConfig+0x1c4>
 c0032ec:	687b      	ldr	r3, [r7, #4]
 c0032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0032f4:	d30a      	bcc.n	c00330c <HAL_RCC_OscConfig+0x1b0>
 c0032f6:	4b39      	ldr	r3, [pc, #228]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0032f8:	68db      	ldr	r3, [r3, #12]
 c0032fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c0032fe:	687b      	ldr	r3, [r7, #4]
 c003300:	6a1b      	ldr	r3, [r3, #32]
 c003302:	029b      	lsls	r3, r3, #10
 c003304:	4935      	ldr	r1, [pc, #212]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003306:	4313      	orrs	r3, r2
 c003308:	60cb      	str	r3, [r1, #12]
 c00330a:	e009      	b.n	c003320 <HAL_RCC_OscConfig+0x1c4>
 c00330c:	4b33      	ldr	r3, [pc, #204]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00330e:	68db      	ldr	r3, [r3, #12]
 c003310:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c003314:	687b      	ldr	r3, [r7, #4]
 c003316:	6a1b      	ldr	r3, [r3, #32]
 c003318:	03db      	lsls	r3, r3, #15
 c00331a:	4930      	ldr	r1, [pc, #192]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00331c:	4313      	orrs	r3, r2
 c00331e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c003322:	2b00      	cmp	r3, #0
 c003324:	d10a      	bne.n	c00333c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003326:	687b      	ldr	r3, [r7, #4]
 c003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00332a:	4618      	mov	r0, r3
 c00332c:	f001 f93c 	bl	c0045a8 <RCC_SetFlashLatencyFromMSIRange>
 c003330:	4603      	mov	r3, r0
 c003332:	2b00      	cmp	r3, #0
 c003334:	d002      	beq.n	c00333c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 c003336:	2301      	movs	r3, #1
 c003338:	f000 bde5 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 c00333c:	f001 f8de 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c003340:	4b27      	ldr	r3, [pc, #156]	@ (c0033e0 <HAL_RCC_OscConfig+0x284>)
 c003342:	681b      	ldr	r3, [r3, #0]
 c003344:	4618      	mov	r0, r3
 c003346:	f7fe fa19 	bl	c00177c <HAL_InitTick>
 c00334a:	4603      	mov	r3, r0
 c00334c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 c003350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c003354:	2b00      	cmp	r3, #0
 c003356:	f000 808a 	beq.w	c00346e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 c00335a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c00335e:	f000 bdd2 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c003362:	687b      	ldr	r3, [r7, #4]
 c003364:	69db      	ldr	r3, [r3, #28]
 c003366:	2b00      	cmp	r3, #0
 c003368:	d066      	beq.n	c003438 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 c00336a:	4b1c      	ldr	r3, [pc, #112]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c00336c:	681b      	ldr	r3, [r3, #0]
 c00336e:	4a1b      	ldr	r2, [pc, #108]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003370:	f043 0301 	orr.w	r3, r3, #1
 c003374:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003376:	f7fe fa8b 	bl	c001890 <HAL_GetTick>
 c00337a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c00337c:	e009      	b.n	c003392 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00337e:	f7fe fa87 	bl	c001890 <HAL_GetTick>
 c003382:	4602      	mov	r2, r0
 c003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003386:	1ad3      	subs	r3, r2, r3
 c003388:	2b02      	cmp	r3, #2
 c00338a:	d902      	bls.n	c003392 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 c00338c:	2303      	movs	r3, #3
 c00338e:	f000 bdba 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c003392:	4b12      	ldr	r3, [pc, #72]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c003394:	681b      	ldr	r3, [r3, #0]
 c003396:	f003 0304 	and.w	r3, r3, #4
 c00339a:	2b00      	cmp	r3, #0
 c00339c:	d0ef      	beq.n	c00337e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c00339e:	4b0f      	ldr	r3, [pc, #60]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033a0:	689b      	ldr	r3, [r3, #8]
 c0033a2:	4a0e      	ldr	r2, [pc, #56]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0033a8:	6093      	str	r3, [r2, #8]
 c0033aa:	4b0c      	ldr	r3, [pc, #48]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033ac:	689b      	ldr	r3, [r3, #8]
 c0033ae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c0033b2:	687b      	ldr	r3, [r7, #4]
 c0033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0033b6:	4909      	ldr	r1, [pc, #36]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033b8:	4313      	orrs	r3, r2
 c0033ba:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0033bc:	687b      	ldr	r3, [r7, #4]
 c0033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0033c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0033c4:	d30e      	bcc.n	c0033e4 <HAL_RCC_OscConfig+0x288>
 c0033c6:	4b05      	ldr	r3, [pc, #20]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033c8:	68db      	ldr	r3, [r3, #12]
 c0033ca:	f023 021f 	bic.w	r2, r3, #31
 c0033ce:	687b      	ldr	r3, [r7, #4]
 c0033d0:	6a1b      	ldr	r3, [r3, #32]
 c0033d2:	4902      	ldr	r1, [pc, #8]	@ (c0033dc <HAL_RCC_OscConfig+0x280>)
 c0033d4:	4313      	orrs	r3, r2
 c0033d6:	60cb      	str	r3, [r1, #12]
 c0033d8:	e04a      	b.n	c003470 <HAL_RCC_OscConfig+0x314>
 c0033da:	bf00      	nop
 c0033dc:	56020c00 	.word	0x56020c00
 c0033e0:	30000004 	.word	0x30000004
 c0033e4:	687b      	ldr	r3, [r7, #4]
 c0033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0033e8:	2b00      	cmp	r3, #0
 c0033ea:	da0a      	bge.n	c003402 <HAL_RCC_OscConfig+0x2a6>
 c0033ec:	4b98      	ldr	r3, [pc, #608]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0033ee:	68db      	ldr	r3, [r3, #12]
 c0033f0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c0033f4:	687b      	ldr	r3, [r7, #4]
 c0033f6:	6a1b      	ldr	r3, [r3, #32]
 c0033f8:	015b      	lsls	r3, r3, #5
 c0033fa:	4995      	ldr	r1, [pc, #596]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0033fc:	4313      	orrs	r3, r2
 c0033fe:	60cb      	str	r3, [r1, #12]
 c003400:	e036      	b.n	c003470 <HAL_RCC_OscConfig+0x314>
 c003402:	687b      	ldr	r3, [r7, #4]
 c003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00340a:	d30a      	bcc.n	c003422 <HAL_RCC_OscConfig+0x2c6>
 c00340c:	4b90      	ldr	r3, [pc, #576]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00340e:	68db      	ldr	r3, [r3, #12]
 c003410:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c003414:	687b      	ldr	r3, [r7, #4]
 c003416:	6a1b      	ldr	r3, [r3, #32]
 c003418:	029b      	lsls	r3, r3, #10
 c00341a:	498d      	ldr	r1, [pc, #564]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00341c:	4313      	orrs	r3, r2
 c00341e:	60cb      	str	r3, [r1, #12]
 c003420:	e026      	b.n	c003470 <HAL_RCC_OscConfig+0x314>
 c003422:	4b8b      	ldr	r3, [pc, #556]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003424:	68db      	ldr	r3, [r3, #12]
 c003426:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c00342a:	687b      	ldr	r3, [r7, #4]
 c00342c:	6a1b      	ldr	r3, [r3, #32]
 c00342e:	03db      	lsls	r3, r3, #15
 c003430:	4987      	ldr	r1, [pc, #540]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003432:	4313      	orrs	r3, r2
 c003434:	60cb      	str	r3, [r1, #12]
 c003436:	e01b      	b.n	c003470 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 c003438:	4b85      	ldr	r3, [pc, #532]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00343a:	681b      	ldr	r3, [r3, #0]
 c00343c:	4a84      	ldr	r2, [pc, #528]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00343e:	f023 0301 	bic.w	r3, r3, #1
 c003442:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003444:	f7fe fa24 	bl	c001890 <HAL_GetTick>
 c003448:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c00344a:	e009      	b.n	c003460 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00344c:	f7fe fa20 	bl	c001890 <HAL_GetTick>
 c003450:	4602      	mov	r2, r0
 c003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003454:	1ad3      	subs	r3, r2, r3
 c003456:	2b02      	cmp	r3, #2
 c003458:	d902      	bls.n	c003460 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 c00345a:	2303      	movs	r3, #3
 c00345c:	f000 bd53 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c003460:	4b7b      	ldr	r3, [pc, #492]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003462:	681b      	ldr	r3, [r3, #0]
 c003464:	f003 0304 	and.w	r3, r3, #4
 c003468:	2b00      	cmp	r3, #0
 c00346a:	d1ef      	bne.n	c00344c <HAL_RCC_OscConfig+0x2f0>
 c00346c:	e000      	b.n	c003470 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c00346e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003470:	687b      	ldr	r3, [r7, #4]
 c003472:	681b      	ldr	r3, [r3, #0]
 c003474:	f003 0301 	and.w	r3, r3, #1
 c003478:	2b00      	cmp	r3, #0
 c00347a:	f000 808b 	beq.w	c003594 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c00347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c003480:	2b08      	cmp	r3, #8
 c003482:	d005      	beq.n	c003490 <HAL_RCC_OscConfig+0x334>
 c003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c003486:	2b0c      	cmp	r3, #12
 c003488:	d109      	bne.n	c00349e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c00348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00348c:	2b03      	cmp	r3, #3
 c00348e:	d106      	bne.n	c00349e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 c003490:	687b      	ldr	r3, [r7, #4]
 c003492:	685b      	ldr	r3, [r3, #4]
 c003494:	2b00      	cmp	r3, #0
 c003496:	d17d      	bne.n	c003594 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 c003498:	2301      	movs	r3, #1
 c00349a:	f000 bd34 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 c00349e:	687b      	ldr	r3, [r7, #4]
 c0034a0:	685b      	ldr	r3, [r3, #4]
 c0034a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0034a6:	d106      	bne.n	c0034b6 <HAL_RCC_OscConfig+0x35a>
 c0034a8:	4b69      	ldr	r3, [pc, #420]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034aa:	681b      	ldr	r3, [r3, #0]
 c0034ac:	4a68      	ldr	r2, [pc, #416]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0034b2:	6013      	str	r3, [r2, #0]
 c0034b4:	e041      	b.n	c00353a <HAL_RCC_OscConfig+0x3de>
 c0034b6:	687b      	ldr	r3, [r7, #4]
 c0034b8:	685b      	ldr	r3, [r3, #4]
 c0034ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c0034be:	d112      	bne.n	c0034e6 <HAL_RCC_OscConfig+0x38a>
 c0034c0:	4b63      	ldr	r3, [pc, #396]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034c2:	681b      	ldr	r3, [r3, #0]
 c0034c4:	4a62      	ldr	r2, [pc, #392]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0034ca:	6013      	str	r3, [r2, #0]
 c0034cc:	4b60      	ldr	r3, [pc, #384]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034ce:	681b      	ldr	r3, [r3, #0]
 c0034d0:	4a5f      	ldr	r2, [pc, #380]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c0034d6:	6013      	str	r3, [r2, #0]
 c0034d8:	4b5d      	ldr	r3, [pc, #372]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034da:	681b      	ldr	r3, [r3, #0]
 c0034dc:	4a5c      	ldr	r2, [pc, #368]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0034e2:	6013      	str	r3, [r2, #0]
 c0034e4:	e029      	b.n	c00353a <HAL_RCC_OscConfig+0x3de>
 c0034e6:	687b      	ldr	r3, [r7, #4]
 c0034e8:	685b      	ldr	r3, [r3, #4]
 c0034ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 c0034ee:	d112      	bne.n	c003516 <HAL_RCC_OscConfig+0x3ba>
 c0034f0:	4b57      	ldr	r3, [pc, #348]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034f2:	681b      	ldr	r3, [r3, #0]
 c0034f4:	4a56      	ldr	r2, [pc, #344]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0034fa:	6013      	str	r3, [r2, #0]
 c0034fc:	4b54      	ldr	r3, [pc, #336]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0034fe:	681b      	ldr	r3, [r3, #0]
 c003500:	4a53      	ldr	r2, [pc, #332]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c003506:	6013      	str	r3, [r2, #0]
 c003508:	4b51      	ldr	r3, [pc, #324]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00350a:	681b      	ldr	r3, [r3, #0]
 c00350c:	4a50      	ldr	r2, [pc, #320]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00350e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003512:	6013      	str	r3, [r2, #0]
 c003514:	e011      	b.n	c00353a <HAL_RCC_OscConfig+0x3de>
 c003516:	4b4e      	ldr	r3, [pc, #312]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003518:	681b      	ldr	r3, [r3, #0]
 c00351a:	4a4d      	ldr	r2, [pc, #308]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00351c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c003520:	6013      	str	r3, [r2, #0]
 c003522:	4b4b      	ldr	r3, [pc, #300]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003524:	681b      	ldr	r3, [r3, #0]
 c003526:	4a4a      	ldr	r2, [pc, #296]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c00352c:	6013      	str	r3, [r2, #0]
 c00352e:	4b48      	ldr	r3, [pc, #288]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003530:	681b      	ldr	r3, [r3, #0]
 c003532:	4a47      	ldr	r2, [pc, #284]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c003538:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c00353a:	687b      	ldr	r3, [r7, #4]
 c00353c:	685b      	ldr	r3, [r3, #4]
 c00353e:	2b00      	cmp	r3, #0
 c003540:	d014      	beq.n	c00356c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 c003542:	f7fe f9a5 	bl	c001890 <HAL_GetTick>
 c003546:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003548:	e009      	b.n	c00355e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00354a:	f7fe f9a1 	bl	c001890 <HAL_GetTick>
 c00354e:	4602      	mov	r2, r0
 c003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003552:	1ad3      	subs	r3, r2, r3
 c003554:	2b64      	cmp	r3, #100	@ 0x64
 c003556:	d902      	bls.n	c00355e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 c003558:	2303      	movs	r3, #3
 c00355a:	f000 bcd4 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00355e:	4b3c      	ldr	r3, [pc, #240]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003560:	681b      	ldr	r3, [r3, #0]
 c003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c003566:	2b00      	cmp	r3, #0
 c003568:	d0ef      	beq.n	c00354a <HAL_RCC_OscConfig+0x3ee>
 c00356a:	e013      	b.n	c003594 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 c00356c:	f7fe f990 	bl	c001890 <HAL_GetTick>
 c003570:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003572:	e009      	b.n	c003588 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c003574:	f7fe f98c 	bl	c001890 <HAL_GetTick>
 c003578:	4602      	mov	r2, r0
 c00357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00357c:	1ad3      	subs	r3, r2, r3
 c00357e:	2b64      	cmp	r3, #100	@ 0x64
 c003580:	d902      	bls.n	c003588 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 c003582:	2303      	movs	r3, #3
 c003584:	f000 bcbf 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003588:	4b31      	ldr	r3, [pc, #196]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00358a:	681b      	ldr	r3, [r3, #0]
 c00358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c003590:	2b00      	cmp	r3, #0
 c003592:	d1ef      	bne.n	c003574 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003594:	687b      	ldr	r3, [r7, #4]
 c003596:	681b      	ldr	r3, [r3, #0]
 c003598:	f003 0302 	and.w	r3, r3, #2
 c00359c:	2b00      	cmp	r3, #0
 c00359e:	d05f      	beq.n	c003660 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0035a2:	2b04      	cmp	r3, #4
 c0035a4:	d005      	beq.n	c0035b2 <HAL_RCC_OscConfig+0x456>
 c0035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0035a8:	2b0c      	cmp	r3, #12
 c0035aa:	d114      	bne.n	c0035d6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0035ae:	2b02      	cmp	r3, #2
 c0035b0:	d111      	bne.n	c0035d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c0035b2:	687b      	ldr	r3, [r7, #4]
 c0035b4:	68db      	ldr	r3, [r3, #12]
 c0035b6:	2b00      	cmp	r3, #0
 c0035b8:	d102      	bne.n	c0035c0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 c0035ba:	2301      	movs	r3, #1
 c0035bc:	f000 bca3 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c0035c0:	4b23      	ldr	r3, [pc, #140]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0035c2:	691b      	ldr	r3, [r3, #16]
 c0035c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c0035c8:	687b      	ldr	r3, [r7, #4]
 c0035ca:	691b      	ldr	r3, [r3, #16]
 c0035cc:	041b      	lsls	r3, r3, #16
 c0035ce:	4920      	ldr	r1, [pc, #128]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0035d0:	4313      	orrs	r3, r2
 c0035d2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c0035d4:	e044      	b.n	c003660 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0035d6:	687b      	ldr	r3, [r7, #4]
 c0035d8:	68db      	ldr	r3, [r3, #12]
 c0035da:	2b00      	cmp	r3, #0
 c0035dc:	d024      	beq.n	c003628 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 c0035de:	4b1c      	ldr	r3, [pc, #112]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0035e0:	681b      	ldr	r3, [r3, #0]
 c0035e2:	4a1b      	ldr	r2, [pc, #108]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c0035e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c0035e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0035ea:	f7fe f951 	bl	c001890 <HAL_GetTick>
 c0035ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0035f0:	e009      	b.n	c003606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0035f2:	f7fe f94d 	bl	c001890 <HAL_GetTick>
 c0035f6:	4602      	mov	r2, r0
 c0035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0035fa:	1ad3      	subs	r3, r2, r3
 c0035fc:	2b02      	cmp	r3, #2
 c0035fe:	d902      	bls.n	c003606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 c003600:	2303      	movs	r3, #3
 c003602:	f000 bc80 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003606:	4b12      	ldr	r3, [pc, #72]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003608:	681b      	ldr	r3, [r3, #0]
 c00360a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00360e:	2b00      	cmp	r3, #0
 c003610:	d0ef      	beq.n	c0035f2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c003612:	4b0f      	ldr	r3, [pc, #60]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003614:	691b      	ldr	r3, [r3, #16]
 c003616:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c00361a:	687b      	ldr	r3, [r7, #4]
 c00361c:	691b      	ldr	r3, [r3, #16]
 c00361e:	041b      	lsls	r3, r3, #16
 c003620:	490b      	ldr	r1, [pc, #44]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c003622:	4313      	orrs	r3, r2
 c003624:	610b      	str	r3, [r1, #16]
 c003626:	e01b      	b.n	c003660 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 c003628:	4b09      	ldr	r3, [pc, #36]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00362a:	681b      	ldr	r3, [r3, #0]
 c00362c:	4a08      	ldr	r2, [pc, #32]	@ (c003650 <HAL_RCC_OscConfig+0x4f4>)
 c00362e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c003632:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003634:	f7fe f92c 	bl	c001890 <HAL_GetTick>
 c003638:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00363a:	e00b      	b.n	c003654 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00363c:	f7fe f928 	bl	c001890 <HAL_GetTick>
 c003640:	4602      	mov	r2, r0
 c003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003644:	1ad3      	subs	r3, r2, r3
 c003646:	2b02      	cmp	r3, #2
 c003648:	d904      	bls.n	c003654 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 c00364a:	2303      	movs	r3, #3
 c00364c:	f000 bc5b 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
 c003650:	56020c00 	.word	0x56020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003654:	4baf      	ldr	r3, [pc, #700]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003656:	681b      	ldr	r3, [r3, #0]
 c003658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00365c:	2b00      	cmp	r3, #0
 c00365e:	d1ed      	bne.n	c00363c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c003660:	687b      	ldr	r3, [r7, #4]
 c003662:	681b      	ldr	r3, [r3, #0]
 c003664:	f003 0308 	and.w	r3, r3, #8
 c003668:	2b00      	cmp	r3, #0
 c00366a:	f000 80c8 	beq.w	c0037fe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 c00366e:	2300      	movs	r3, #0
 c003670:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003674:	4ba7      	ldr	r3, [pc, #668]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00367a:	f003 0304 	and.w	r3, r3, #4
 c00367e:	2b00      	cmp	r3, #0
 c003680:	d111      	bne.n	c0036a6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c003682:	4ba4      	ldr	r3, [pc, #656]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003688:	4aa2      	ldr	r2, [pc, #648]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c00368a:	f043 0304 	orr.w	r3, r3, #4
 c00368e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003692:	4ba0      	ldr	r3, [pc, #640]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003698:	f003 0304 	and.w	r3, r3, #4
 c00369c:	617b      	str	r3, [r7, #20]
 c00369e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 c0036a0:	2301      	movs	r3, #1
 c0036a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0036a6:	4b9c      	ldr	r3, [pc, #624]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c0036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0036aa:	f003 0301 	and.w	r3, r3, #1
 c0036ae:	2b00      	cmp	r3, #0
 c0036b0:	d119      	bne.n	c0036e6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c0036b2:	4b99      	ldr	r3, [pc, #612]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c0036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0036b6:	4a98      	ldr	r2, [pc, #608]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c0036b8:	f043 0301 	orr.w	r3, r3, #1
 c0036bc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0036be:	f7fe f8e7 	bl	c001890 <HAL_GetTick>
 c0036c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0036c4:	e009      	b.n	c0036da <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0036c6:	f7fe f8e3 	bl	c001890 <HAL_GetTick>
 c0036ca:	4602      	mov	r2, r0
 c0036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0036ce:	1ad3      	subs	r3, r2, r3
 c0036d0:	2b02      	cmp	r3, #2
 c0036d2:	d902      	bls.n	c0036da <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 c0036d4:	2303      	movs	r3, #3
 c0036d6:	f000 bc16 	b.w	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0036da:	4b8f      	ldr	r3, [pc, #572]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c0036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0036de:	f003 0301 	and.w	r3, r3, #1
 c0036e2:	2b00      	cmp	r3, #0
 c0036e4:	d0ef      	beq.n	c0036c6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0036e6:	687b      	ldr	r3, [r7, #4]
 c0036e8:	695b      	ldr	r3, [r3, #20]
 c0036ea:	2b00      	cmp	r3, #0
 c0036ec:	d05f      	beq.n	c0037ae <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 c0036ee:	4b89      	ldr	r3, [pc, #548]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0036f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0036f4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 c0036f6:	687b      	ldr	r3, [r7, #4]
 c0036f8:	699a      	ldr	r2, [r3, #24]
 c0036fa:	6a3b      	ldr	r3, [r7, #32]
 c0036fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c003700:	429a      	cmp	r2, r3
 c003702:	d037      	beq.n	c003774 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c003704:	6a3b      	ldr	r3, [r7, #32]
 c003706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00370a:	2b00      	cmp	r3, #0
 c00370c:	d006      	beq.n	c00371c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 c00370e:	6a3b      	ldr	r3, [r7, #32]
 c003710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c003714:	2b00      	cmp	r3, #0
 c003716:	d101      	bne.n	c00371c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 c003718:	2301      	movs	r3, #1
 c00371a:	e3f4      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 c00371c:	6a3b      	ldr	r3, [r7, #32]
 c00371e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 c003722:	2b00      	cmp	r3, #0
 c003724:	d01b      	beq.n	c00375e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 c003726:	4b7b      	ldr	r3, [pc, #492]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00372c:	4a79      	ldr	r2, [pc, #484]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c00372e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c003732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 c003736:	f7fe f8ab 	bl	c001890 <HAL_GetTick>
 c00373a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c00373c:	e008      	b.n	c003750 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00373e:	f7fe f8a7 	bl	c001890 <HAL_GetTick>
 c003742:	4602      	mov	r2, r0
 c003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003746:	1ad3      	subs	r3, r2, r3
 c003748:	2b05      	cmp	r3, #5
 c00374a:	d901      	bls.n	c003750 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 c00374c:	2303      	movs	r3, #3
 c00374e:	e3da      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c003750:	4b70      	ldr	r3, [pc, #448]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00375a:	2b00      	cmp	r3, #0
 c00375c:	d1ef      	bne.n	c00373e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 c00375e:	4b6d      	ldr	r3, [pc, #436]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003764:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 c003768:	687b      	ldr	r3, [r7, #4]
 c00376a:	699b      	ldr	r3, [r3, #24]
 c00376c:	4969      	ldr	r1, [pc, #420]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c00376e:	4313      	orrs	r3, r2
 c003770:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 c003774:	4b67      	ldr	r3, [pc, #412]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00377a:	4a66      	ldr	r2, [pc, #408]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c00377c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c003780:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c003784:	f7fe f884 	bl	c001890 <HAL_GetTick>
 c003788:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c00378a:	e008      	b.n	c00379e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00378c:	f7fe f880 	bl	c001890 <HAL_GetTick>
 c003790:	4602      	mov	r2, r0
 c003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003794:	1ad3      	subs	r3, r2, r3
 c003796:	2b05      	cmp	r3, #5
 c003798:	d901      	bls.n	c00379e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 c00379a:	2303      	movs	r3, #3
 c00379c:	e3b3      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c00379e:	4b5d      	ldr	r3, [pc, #372]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0037a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c0037a8:	2b00      	cmp	r3, #0
 c0037aa:	d0ef      	beq.n	c00378c <HAL_RCC_OscConfig+0x630>
 c0037ac:	e01b      	b.n	c0037e6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 c0037ae:	4b59      	ldr	r3, [pc, #356]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0037b4:	4a57      	ldr	r2, [pc, #348]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037b6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c0037ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c0037be:	f7fe f867 	bl	c001890 <HAL_GetTick>
 c0037c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c0037c4:	e008      	b.n	c0037d8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0037c6:	f7fe f863 	bl	c001890 <HAL_GetTick>
 c0037ca:	4602      	mov	r2, r0
 c0037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0037ce:	1ad3      	subs	r3, r2, r3
 c0037d0:	2b05      	cmp	r3, #5
 c0037d2:	d901      	bls.n	c0037d8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 c0037d4:	2303      	movs	r3, #3
 c0037d6:	e396      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c0037d8:	4b4e      	ldr	r3, [pc, #312]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0037de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c0037e2:	2b00      	cmp	r3, #0
 c0037e4:	d1ef      	bne.n	c0037c6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0037e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 c0037ea:	2b01      	cmp	r3, #1
 c0037ec:	d107      	bne.n	c0037fe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0037ee:	4b49      	ldr	r3, [pc, #292]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0037f4:	4a47      	ldr	r2, [pc, #284]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0037f6:	f023 0304 	bic.w	r3, r3, #4
 c0037fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c0037fe:	687b      	ldr	r3, [r7, #4]
 c003800:	681b      	ldr	r3, [r3, #0]
 c003802:	f003 0304 	and.w	r3, r3, #4
 c003806:	2b00      	cmp	r3, #0
 c003808:	f000 8111 	beq.w	c003a2e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 c00380c:	2300      	movs	r3, #0
 c00380e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003812:	4b40      	ldr	r3, [pc, #256]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003818:	f003 0304 	and.w	r3, r3, #4
 c00381c:	2b00      	cmp	r3, #0
 c00381e:	d111      	bne.n	c003844 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c003820:	4b3c      	ldr	r3, [pc, #240]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003826:	4a3b      	ldr	r2, [pc, #236]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003828:	f043 0304 	orr.w	r3, r3, #4
 c00382c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003830:	4b38      	ldr	r3, [pc, #224]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003836:	f003 0304 	and.w	r3, r3, #4
 c00383a:	613b      	str	r3, [r7, #16]
 c00383c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 c00383e:	2301      	movs	r3, #1
 c003840:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c003844:	4b34      	ldr	r3, [pc, #208]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003848:	f003 0301 	and.w	r3, r3, #1
 c00384c:	2b00      	cmp	r3, #0
 c00384e:	d118      	bne.n	c003882 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c003850:	4b31      	ldr	r3, [pc, #196]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003854:	4a30      	ldr	r2, [pc, #192]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c003856:	f043 0301 	orr.w	r3, r3, #1
 c00385a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00385c:	f7fe f818 	bl	c001890 <HAL_GetTick>
 c003860:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c003862:	e008      	b.n	c003876 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003864:	f7fe f814 	bl	c001890 <HAL_GetTick>
 c003868:	4602      	mov	r2, r0
 c00386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00386c:	1ad3      	subs	r3, r2, r3
 c00386e:	2b02      	cmp	r3, #2
 c003870:	d901      	bls.n	c003876 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 c003872:	2303      	movs	r3, #3
 c003874:	e347      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c003876:	4b28      	ldr	r3, [pc, #160]	@ (c003918 <HAL_RCC_OscConfig+0x7bc>)
 c003878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00387a:	f003 0301 	and.w	r3, r3, #1
 c00387e:	2b00      	cmp	r3, #0
 c003880:	d0f0      	beq.n	c003864 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c003882:	687b      	ldr	r3, [r7, #4]
 c003884:	689b      	ldr	r3, [r3, #8]
 c003886:	f003 0301 	and.w	r3, r3, #1
 c00388a:	2b00      	cmp	r3, #0
 c00388c:	d01f      	beq.n	c0038ce <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00388e:	687b      	ldr	r3, [r7, #4]
 c003890:	689b      	ldr	r3, [r3, #8]
 c003892:	f003 0304 	and.w	r3, r3, #4
 c003896:	2b00      	cmp	r3, #0
 c003898:	d010      	beq.n	c0038bc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00389a:	4b1e      	ldr	r3, [pc, #120]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c00389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0038a0:	4a1c      	ldr	r2, [pc, #112]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038a2:	f043 0304 	orr.w	r3, r3, #4
 c0038a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0038aa:	4b1a      	ldr	r3, [pc, #104]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0038b0:	4a18      	ldr	r2, [pc, #96]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038b2:	f043 0301 	orr.w	r3, r3, #1
 c0038b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c0038ba:	e018      	b.n	c0038ee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0038bc:	4b15      	ldr	r3, [pc, #84]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0038c2:	4a14      	ldr	r2, [pc, #80]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038c4:	f043 0301 	orr.w	r3, r3, #1
 c0038c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c0038cc:	e00f      	b.n	c0038ee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0038ce:	4b11      	ldr	r3, [pc, #68]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0038d4:	4a0f      	ldr	r2, [pc, #60]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038d6:	f023 0301 	bic.w	r3, r3, #1
 c0038da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0038de:	4b0d      	ldr	r3, [pc, #52]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0038e4:	4a0b      	ldr	r2, [pc, #44]	@ (c003914 <HAL_RCC_OscConfig+0x7b8>)
 c0038e6:	f023 0304 	bic.w	r3, r3, #4
 c0038ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0038ee:	687b      	ldr	r3, [r7, #4]
 c0038f0:	689b      	ldr	r3, [r3, #8]
 c0038f2:	2b00      	cmp	r3, #0
 c0038f4:	d057      	beq.n	c0039a6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 c0038f6:	f7fd ffcb 	bl	c001890 <HAL_GetTick>
 c0038fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0038fc:	e00e      	b.n	c00391c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0038fe:	f7fd ffc7 	bl	c001890 <HAL_GetTick>
 c003902:	4602      	mov	r2, r0
 c003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003906:	1ad3      	subs	r3, r2, r3
 c003908:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00390c:	4293      	cmp	r3, r2
 c00390e:	d905      	bls.n	c00391c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 c003910:	2303      	movs	r3, #3
 c003912:	e2f8      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
 c003914:	56020c00 	.word	0x56020c00
 c003918:	56020800 	.word	0x56020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00391c:	4b9c      	ldr	r3, [pc, #624]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c00391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003922:	f003 0302 	and.w	r3, r3, #2
 c003926:	2b00      	cmp	r3, #0
 c003928:	d0e9      	beq.n	c0038fe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c00392a:	687b      	ldr	r3, [r7, #4]
 c00392c:	689b      	ldr	r3, [r3, #8]
 c00392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c003932:	2b00      	cmp	r3, #0
 c003934:	d01b      	beq.n	c00396e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003936:	4b96      	ldr	r3, [pc, #600]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00393c:	4a94      	ldr	r2, [pc, #592]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c00393e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c003942:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003946:	e00a      	b.n	c00395e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003948:	f7fd ffa2 	bl	c001890 <HAL_GetTick>
 c00394c:	4602      	mov	r2, r0
 c00394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003950:	1ad3      	subs	r3, r2, r3
 c003952:	f241 3288 	movw	r2, #5000	@ 0x1388
 c003956:	4293      	cmp	r3, r2
 c003958:	d901      	bls.n	c00395e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 c00395a:	2303      	movs	r3, #3
 c00395c:	e2d3      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00395e:	4b8c      	ldr	r3, [pc, #560]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c003968:	2b00      	cmp	r3, #0
 c00396a:	d0ed      	beq.n	c003948 <HAL_RCC_OscConfig+0x7ec>
 c00396c:	e053      	b.n	c003a16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00396e:	4b88      	ldr	r3, [pc, #544]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003974:	4a86      	ldr	r2, [pc, #536]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c00397a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00397e:	e00a      	b.n	c003996 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003980:	f7fd ff86 	bl	c001890 <HAL_GetTick>
 c003984:	4602      	mov	r2, r0
 c003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003988:	1ad3      	subs	r3, r2, r3
 c00398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00398e:	4293      	cmp	r3, r2
 c003990:	d901      	bls.n	c003996 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 c003992:	2303      	movs	r3, #3
 c003994:	e2b7      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003996:	4b7e      	ldr	r3, [pc, #504]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00399c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c0039a0:	2b00      	cmp	r3, #0
 c0039a2:	d1ed      	bne.n	c003980 <HAL_RCC_OscConfig+0x824>
 c0039a4:	e037      	b.n	c003a16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 c0039a6:	f7fd ff73 	bl	c001890 <HAL_GetTick>
 c0039aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0039ac:	e00a      	b.n	c0039c4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0039ae:	f7fd ff6f 	bl	c001890 <HAL_GetTick>
 c0039b2:	4602      	mov	r2, r0
 c0039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0039b6:	1ad3      	subs	r3, r2, r3
 c0039b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0039bc:	4293      	cmp	r3, r2
 c0039be:	d901      	bls.n	c0039c4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 c0039c0:	2303      	movs	r3, #3
 c0039c2:	e2a0      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0039c4:	4b72      	ldr	r3, [pc, #456]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c0039c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0039ca:	f003 0302 	and.w	r3, r3, #2
 c0039ce:	2b00      	cmp	r3, #0
 c0039d0:	d1ed      	bne.n	c0039ae <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0039d2:	4b6f      	ldr	r3, [pc, #444]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c0039d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0039dc:	2b00      	cmp	r3, #0
 c0039de:	d01a      	beq.n	c003a16 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0039e0:	4b6b      	ldr	r3, [pc, #428]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c0039e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0039e6:	4a6a      	ldr	r2, [pc, #424]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c0039e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c0039ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0039f0:	e00a      	b.n	c003a08 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0039f2:	f7fd ff4d 	bl	c001890 <HAL_GetTick>
 c0039f6:	4602      	mov	r2, r0
 c0039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0039fa:	1ad3      	subs	r3, r2, r3
 c0039fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 c003a00:	4293      	cmp	r3, r2
 c003a02:	d901      	bls.n	c003a08 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 c003a04:	2303      	movs	r3, #3
 c003a06:	e27e      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003a08:	4b61      	ldr	r3, [pc, #388]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c003a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c003a12:	2b00      	cmp	r3, #0
 c003a14:	d1ed      	bne.n	c0039f2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003a16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 c003a1a:	2b01      	cmp	r3, #1
 c003a1c:	d107      	bne.n	c003a2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003a1e:	4b5c      	ldr	r3, [pc, #368]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003a24:	4a5a      	ldr	r2, [pc, #360]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a26:	f023 0304 	bic.w	r3, r3, #4
 c003a2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003a2e:	687b      	ldr	r3, [r7, #4]
 c003a30:	681b      	ldr	r3, [r3, #0]
 c003a32:	f003 0320 	and.w	r3, r3, #32
 c003a36:	2b00      	cmp	r3, #0
 c003a38:	d036      	beq.n	c003aa8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003a3a:	687b      	ldr	r3, [r7, #4]
 c003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c003a3e:	2b00      	cmp	r3, #0
 c003a40:	d019      	beq.n	c003a76 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 c003a42:	4b53      	ldr	r3, [pc, #332]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a44:	681b      	ldr	r3, [r3, #0]
 c003a46:	4a52      	ldr	r2, [pc, #328]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c003a4c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003a4e:	f7fd ff1f 	bl	c001890 <HAL_GetTick>
 c003a52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003a54:	e008      	b.n	c003a68 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003a56:	f7fd ff1b 	bl	c001890 <HAL_GetTick>
 c003a5a:	4602      	mov	r2, r0
 c003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003a5e:	1ad3      	subs	r3, r2, r3
 c003a60:	2b02      	cmp	r3, #2
 c003a62:	d901      	bls.n	c003a68 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 c003a64:	2303      	movs	r3, #3
 c003a66:	e24e      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003a68:	4b49      	ldr	r3, [pc, #292]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a6a:	681b      	ldr	r3, [r3, #0]
 c003a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c003a70:	2b00      	cmp	r3, #0
 c003a72:	d0f0      	beq.n	c003a56 <HAL_RCC_OscConfig+0x8fa>
 c003a74:	e018      	b.n	c003aa8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 c003a76:	4b46      	ldr	r3, [pc, #280]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a78:	681b      	ldr	r3, [r3, #0]
 c003a7a:	4a45      	ldr	r2, [pc, #276]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c003a80:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003a82:	f7fd ff05 	bl	c001890 <HAL_GetTick>
 c003a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003a88:	e008      	b.n	c003a9c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003a8a:	f7fd ff01 	bl	c001890 <HAL_GetTick>
 c003a8e:	4602      	mov	r2, r0
 c003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003a92:	1ad3      	subs	r3, r2, r3
 c003a94:	2b02      	cmp	r3, #2
 c003a96:	d901      	bls.n	c003a9c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 c003a98:	2303      	movs	r3, #3
 c003a9a:	e234      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003a9c:	4b3c      	ldr	r3, [pc, #240]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003a9e:	681b      	ldr	r3, [r3, #0]
 c003aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c003aa4:	2b00      	cmp	r3, #0
 c003aa6:	d1f0      	bne.n	c003a8a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 c003aa8:	687b      	ldr	r3, [r7, #4]
 c003aaa:	681b      	ldr	r3, [r3, #0]
 c003aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c003ab0:	2b00      	cmp	r3, #0
 c003ab2:	d036      	beq.n	c003b22 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 c003ab4:	687b      	ldr	r3, [r7, #4]
 c003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c003ab8:	2b00      	cmp	r3, #0
 c003aba:	d019      	beq.n	c003af0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 c003abc:	4b34      	ldr	r3, [pc, #208]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003abe:	681b      	ldr	r3, [r3, #0]
 c003ac0:	4a33      	ldr	r2, [pc, #204]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c003ac6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003ac8:	f7fd fee2 	bl	c001890 <HAL_GetTick>
 c003acc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c003ace:	e008      	b.n	c003ae2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c003ad0:	f7fd fede 	bl	c001890 <HAL_GetTick>
 c003ad4:	4602      	mov	r2, r0
 c003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003ad8:	1ad3      	subs	r3, r2, r3
 c003ada:	2b02      	cmp	r3, #2
 c003adc:	d901      	bls.n	c003ae2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 c003ade:	2303      	movs	r3, #3
 c003ae0:	e211      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003ae4:	681b      	ldr	r3, [r3, #0]
 c003ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c003aea:	2b00      	cmp	r3, #0
 c003aec:	d0f0      	beq.n	c003ad0 <HAL_RCC_OscConfig+0x974>
 c003aee:	e018      	b.n	c003b22 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 c003af0:	4b27      	ldr	r3, [pc, #156]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003af2:	681b      	ldr	r3, [r3, #0]
 c003af4:	4a26      	ldr	r2, [pc, #152]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c003afa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003afc:	f7fd fec8 	bl	c001890 <HAL_GetTick>
 c003b00:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c003b02:	e008      	b.n	c003b16 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c003b04:	f7fd fec4 	bl	c001890 <HAL_GetTick>
 c003b08:	4602      	mov	r2, r0
 c003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003b0c:	1ad3      	subs	r3, r2, r3
 c003b0e:	2b02      	cmp	r3, #2
 c003b10:	d901      	bls.n	c003b16 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 c003b12:	2303      	movs	r3, #3
 c003b14:	e1f7      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c003b16:	4b1e      	ldr	r3, [pc, #120]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b18:	681b      	ldr	r3, [r3, #0]
 c003b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c003b1e:	2b00      	cmp	r3, #0
 c003b20:	d1f0      	bne.n	c003b04 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 c003b22:	687b      	ldr	r3, [r7, #4]
 c003b24:	681b      	ldr	r3, [r3, #0]
 c003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c003b2a:	2b00      	cmp	r3, #0
 c003b2c:	d07f      	beq.n	c003c2e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 c003b2e:	687b      	ldr	r3, [r7, #4]
 c003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003b32:	2b00      	cmp	r3, #0
 c003b34:	d062      	beq.n	c003bfc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 c003b36:	4b16      	ldr	r3, [pc, #88]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b38:	689b      	ldr	r3, [r3, #8]
 c003b3a:	4a15      	ldr	r2, [pc, #84]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c003b40:	6093      	str	r3, [r2, #8]
 c003b42:	4b13      	ldr	r3, [pc, #76]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b44:	689b      	ldr	r3, [r3, #8]
 c003b46:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 c003b4a:	687b      	ldr	r3, [r7, #4]
 c003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003b4e:	4910      	ldr	r1, [pc, #64]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b50:	4313      	orrs	r3, r2
 c003b52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c003b54:	687b      	ldr	r3, [r7, #4]
 c003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003b58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c003b5c:	d309      	bcc.n	c003b72 <HAL_RCC_OscConfig+0xa16>
 c003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b60:	68db      	ldr	r3, [r3, #12]
 c003b62:	f023 021f 	bic.w	r2, r3, #31
 c003b66:	687b      	ldr	r3, [r7, #4]
 c003b68:	6a1b      	ldr	r3, [r3, #32]
 c003b6a:	4909      	ldr	r1, [pc, #36]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b6c:	4313      	orrs	r3, r2
 c003b6e:	60cb      	str	r3, [r1, #12]
 c003b70:	e02a      	b.n	c003bc8 <HAL_RCC_OscConfig+0xa6c>
 c003b72:	687b      	ldr	r3, [r7, #4]
 c003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003b76:	2b00      	cmp	r3, #0
 c003b78:	da0c      	bge.n	c003b94 <HAL_RCC_OscConfig+0xa38>
 c003b7a:	4b05      	ldr	r3, [pc, #20]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b7c:	68db      	ldr	r3, [r3, #12]
 c003b7e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c003b82:	687b      	ldr	r3, [r7, #4]
 c003b84:	6a1b      	ldr	r3, [r3, #32]
 c003b86:	015b      	lsls	r3, r3, #5
 c003b88:	4901      	ldr	r1, [pc, #4]	@ (c003b90 <HAL_RCC_OscConfig+0xa34>)
 c003b8a:	4313      	orrs	r3, r2
 c003b8c:	60cb      	str	r3, [r1, #12]
 c003b8e:	e01b      	b.n	c003bc8 <HAL_RCC_OscConfig+0xa6c>
 c003b90:	56020c00 	.word	0x56020c00
 c003b94:	687b      	ldr	r3, [r7, #4]
 c003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c003b9c:	d30a      	bcc.n	c003bb4 <HAL_RCC_OscConfig+0xa58>
 c003b9e:	4ba1      	ldr	r3, [pc, #644]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003ba0:	68db      	ldr	r3, [r3, #12]
 c003ba2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c003ba6:	687b      	ldr	r3, [r7, #4]
 c003ba8:	6a1b      	ldr	r3, [r3, #32]
 c003baa:	029b      	lsls	r3, r3, #10
 c003bac:	499d      	ldr	r1, [pc, #628]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bae:	4313      	orrs	r3, r2
 c003bb0:	60cb      	str	r3, [r1, #12]
 c003bb2:	e009      	b.n	c003bc8 <HAL_RCC_OscConfig+0xa6c>
 c003bb4:	4b9b      	ldr	r3, [pc, #620]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bb6:	68db      	ldr	r3, [r3, #12]
 c003bb8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c003bbc:	687b      	ldr	r3, [r7, #4]
 c003bbe:	6a1b      	ldr	r3, [r3, #32]
 c003bc0:	03db      	lsls	r3, r3, #15
 c003bc2:	4998      	ldr	r1, [pc, #608]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bc4:	4313      	orrs	r3, r2
 c003bc6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 c003bc8:	4b96      	ldr	r3, [pc, #600]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bca:	681b      	ldr	r3, [r3, #0]
 c003bcc:	4a95      	ldr	r2, [pc, #596]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bce:	f043 0310 	orr.w	r3, r3, #16
 c003bd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003bd4:	f7fd fe5c 	bl	c001890 <HAL_GetTick>
 c003bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c003bda:	e008      	b.n	c003bee <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c003bdc:	f7fd fe58 	bl	c001890 <HAL_GetTick>
 c003be0:	4602      	mov	r2, r0
 c003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003be4:	1ad3      	subs	r3, r2, r3
 c003be6:	2b02      	cmp	r3, #2
 c003be8:	d901      	bls.n	c003bee <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 c003bea:	2303      	movs	r3, #3
 c003bec:	e18b      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c003bee:	4b8d      	ldr	r3, [pc, #564]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bf0:	681b      	ldr	r3, [r3, #0]
 c003bf2:	f003 0320 	and.w	r3, r3, #32
 c003bf6:	2b00      	cmp	r3, #0
 c003bf8:	d0f0      	beq.n	c003bdc <HAL_RCC_OscConfig+0xa80>
 c003bfa:	e018      	b.n	c003c2e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 c003bfc:	4b89      	ldr	r3, [pc, #548]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003bfe:	681b      	ldr	r3, [r3, #0]
 c003c00:	4a88      	ldr	r2, [pc, #544]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c02:	f023 0310 	bic.w	r3, r3, #16
 c003c06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003c08:	f7fd fe42 	bl	c001890 <HAL_GetTick>
 c003c0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c003c0e:	e008      	b.n	c003c22 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c003c10:	f7fd fe3e 	bl	c001890 <HAL_GetTick>
 c003c14:	4602      	mov	r2, r0
 c003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003c18:	1ad3      	subs	r3, r2, r3
 c003c1a:	2b02      	cmp	r3, #2
 c003c1c:	d901      	bls.n	c003c22 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 c003c1e:	2303      	movs	r3, #3
 c003c20:	e171      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c003c22:	4b80      	ldr	r3, [pc, #512]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c24:	681b      	ldr	r3, [r3, #0]
 c003c26:	f003 0320 	and.w	r3, r3, #32
 c003c2a:	2b00      	cmp	r3, #0
 c003c2c:	d1f0      	bne.n	c003c10 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c003c2e:	687b      	ldr	r3, [r7, #4]
 c003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003c32:	2b00      	cmp	r3, #0
 c003c34:	f000 8166 	beq.w	c003f04 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 c003c38:	2300      	movs	r3, #0
 c003c3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003c3e:	4b79      	ldr	r3, [pc, #484]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c40:	69db      	ldr	r3, [r3, #28]
 c003c42:	f003 030c 	and.w	r3, r3, #12
 c003c46:	2b0c      	cmp	r3, #12
 c003c48:	f000 80f2 	beq.w	c003e30 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c003c4c:	687b      	ldr	r3, [r7, #4]
 c003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003c50:	2b02      	cmp	r3, #2
 c003c52:	f040 80c5 	bne.w	c003de0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c003c56:	4b73      	ldr	r3, [pc, #460]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c58:	681b      	ldr	r3, [r3, #0]
 c003c5a:	4a72      	ldr	r2, [pc, #456]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c003c60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003c62:	f7fd fe15 	bl	c001890 <HAL_GetTick>
 c003c66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003c68:	e008      	b.n	c003c7c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003c6a:	f7fd fe11 	bl	c001890 <HAL_GetTick>
 c003c6e:	4602      	mov	r2, r0
 c003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003c72:	1ad3      	subs	r3, r2, r3
 c003c74:	2b02      	cmp	r3, #2
 c003c76:	d901      	bls.n	c003c7c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 c003c78:	2303      	movs	r3, #3
 c003c7a:	e144      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003c7c:	4b69      	ldr	r3, [pc, #420]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c7e:	681b      	ldr	r3, [r3, #0]
 c003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c003c84:	2b00      	cmp	r3, #0
 c003c86:	d1f0      	bne.n	c003c6a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003c88:	4b66      	ldr	r3, [pc, #408]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003c8e:	f003 0304 	and.w	r3, r3, #4
 c003c92:	2b00      	cmp	r3, #0
 c003c94:	d111      	bne.n	c003cba <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 c003c96:	4b63      	ldr	r3, [pc, #396]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003c9c:	4a61      	ldr	r2, [pc, #388]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003c9e:	f043 0304 	orr.w	r3, r3, #4
 c003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003ca6:	4b5f      	ldr	r3, [pc, #380]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003cac:	f003 0304 	and.w	r3, r3, #4
 c003cb0:	60fb      	str	r3, [r7, #12]
 c003cb2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 c003cb4:	2301      	movs	r3, #1
 c003cb6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 c003cba:	4b5b      	ldr	r3, [pc, #364]	@ (c003e28 <HAL_RCC_OscConfig+0xccc>)
 c003cbc:	68db      	ldr	r3, [r3, #12]
 c003cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c003cc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c003cc6:	d102      	bne.n	c003cce <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 c003cc8:	2301      	movs	r3, #1
 c003cca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c003cce:	4b56      	ldr	r3, [pc, #344]	@ (c003e28 <HAL_RCC_OscConfig+0xccc>)
 c003cd0:	68db      	ldr	r3, [r3, #12]
 c003cd2:	4a55      	ldr	r2, [pc, #340]	@ (c003e28 <HAL_RCC_OscConfig+0xccc>)
 c003cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c003cd8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 c003cda:	4b52      	ldr	r3, [pc, #328]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c003ce2:	f023 0303 	bic.w	r3, r3, #3
 c003ce6:	687a      	ldr	r2, [r7, #4]
 c003ce8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 c003cea:	687a      	ldr	r2, [r7, #4]
 c003cec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 c003cee:	3a01      	subs	r2, #1
 c003cf0:	0212      	lsls	r2, r2, #8
 c003cf2:	4311      	orrs	r1, r2
 c003cf4:	687a      	ldr	r2, [r7, #4]
 c003cf6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c003cf8:	430a      	orrs	r2, r1
 c003cfa:	494a      	ldr	r1, [pc, #296]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003cfc:	4313      	orrs	r3, r2
 c003cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 c003d00:	4b48      	ldr	r3, [pc, #288]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c003d04:	4b49      	ldr	r3, [pc, #292]	@ (c003e2c <HAL_RCC_OscConfig+0xcd0>)
 c003d06:	4013      	ands	r3, r2
 c003d08:	687a      	ldr	r2, [r7, #4]
 c003d0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 c003d0c:	3a01      	subs	r2, #1
 c003d0e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c003d12:	687a      	ldr	r2, [r7, #4]
 c003d14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 c003d16:	3a01      	subs	r2, #1
 c003d18:	0252      	lsls	r2, r2, #9
 c003d1a:	b292      	uxth	r2, r2
 c003d1c:	4311      	orrs	r1, r2
 c003d1e:	687a      	ldr	r2, [r7, #4]
 c003d20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 c003d22:	3a01      	subs	r2, #1
 c003d24:	0412      	lsls	r2, r2, #16
 c003d26:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c003d2a:	4311      	orrs	r1, r2
 c003d2c:	687a      	ldr	r2, [r7, #4]
 c003d2e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 c003d30:	3a01      	subs	r2, #1
 c003d32:	0612      	lsls	r2, r2, #24
 c003d34:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c003d38:	430a      	orrs	r2, r1
 c003d3a:	493a      	ldr	r1, [pc, #232]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d3c:	4313      	orrs	r3, r2
 c003d3e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c003d40:	4b38      	ldr	r3, [pc, #224]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003d44:	4a37      	ldr	r2, [pc, #220]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d46:	f023 0310 	bic.w	r3, r3, #16
 c003d4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c003d4c:	687b      	ldr	r3, [r7, #4]
 c003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003d50:	4a34      	ldr	r2, [pc, #208]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d52:	00db      	lsls	r3, r3, #3
 c003d54:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c003d56:	4b33      	ldr	r3, [pc, #204]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003d5a:	4a32      	ldr	r2, [pc, #200]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d5c:	f043 0310 	orr.w	r3, r3, #16
 c003d60:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 c003d62:	4b30      	ldr	r3, [pc, #192]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003d66:	f023 020c 	bic.w	r2, r3, #12
 c003d6a:	687b      	ldr	r3, [r7, #4]
 c003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c003d6e:	492d      	ldr	r1, [pc, #180]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d70:	4313      	orrs	r3, r2
 c003d72:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 c003d74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 c003d78:	2b01      	cmp	r3, #1
 c003d7a:	d105      	bne.n	c003d88 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c003d7c:	4b2a      	ldr	r3, [pc, #168]	@ (c003e28 <HAL_RCC_OscConfig+0xccc>)
 c003d7e:	68db      	ldr	r3, [r3, #12]
 c003d80:	4a29      	ldr	r2, [pc, #164]	@ (c003e28 <HAL_RCC_OscConfig+0xccc>)
 c003d82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c003d86:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 c003d88:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 c003d8c:	2b01      	cmp	r3, #1
 c003d8e:	d107      	bne.n	c003da0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 c003d90:	4b24      	ldr	r3, [pc, #144]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003d96:	4a23      	ldr	r2, [pc, #140]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003d98:	f023 0304 	bic.w	r3, r3, #4
 c003d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 c003da0:	4b20      	ldr	r3, [pc, #128]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003da2:	681b      	ldr	r3, [r3, #0]
 c003da4:	4a1f      	ldr	r2, [pc, #124]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c003daa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003dac:	f7fd fd70 	bl	c001890 <HAL_GetTick>
 c003db0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003db2:	e008      	b.n	c003dc6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003db4:	f7fd fd6c 	bl	c001890 <HAL_GetTick>
 c003db8:	4602      	mov	r2, r0
 c003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003dbc:	1ad3      	subs	r3, r2, r3
 c003dbe:	2b02      	cmp	r3, #2
 c003dc0:	d901      	bls.n	c003dc6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 c003dc2:	2303      	movs	r3, #3
 c003dc4:	e09f      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003dc6:	4b17      	ldr	r3, [pc, #92]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003dc8:	681b      	ldr	r3, [r3, #0]
 c003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c003dce:	2b00      	cmp	r3, #0
 c003dd0:	d0f0      	beq.n	c003db4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 c003dd2:	4b14      	ldr	r3, [pc, #80]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003dd6:	4a13      	ldr	r2, [pc, #76]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c003ddc:	6293      	str	r3, [r2, #40]	@ 0x28
 c003dde:	e091      	b.n	c003f04 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c003de0:	4b10      	ldr	r3, [pc, #64]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003de2:	681b      	ldr	r3, [r3, #0]
 c003de4:	4a0f      	ldr	r2, [pc, #60]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c003dea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c003dec:	f7fd fd50 	bl	c001890 <HAL_GetTick>
 c003df0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003df2:	e008      	b.n	c003e06 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003df4:	f7fd fd4c 	bl	c001890 <HAL_GetTick>
 c003df8:	4602      	mov	r2, r0
 c003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003dfc:	1ad3      	subs	r3, r2, r3
 c003dfe:	2b02      	cmp	r3, #2
 c003e00:	d901      	bls.n	c003e06 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 c003e02:	2303      	movs	r3, #3
 c003e04:	e07f      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003e06:	4b07      	ldr	r3, [pc, #28]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003e08:	681b      	ldr	r3, [r3, #0]
 c003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c003e0e:	2b00      	cmp	r3, #0
 c003e10:	d1f0      	bne.n	c003df4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c003e12:	4b04      	ldr	r3, [pc, #16]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003e16:	4a03      	ldr	r2, [pc, #12]	@ (c003e24 <HAL_RCC_OscConfig+0xcc8>)
 c003e18:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 c003e1c:	f023 0303 	bic.w	r3, r3, #3
 c003e20:	6293      	str	r3, [r2, #40]	@ 0x28
 c003e22:	e06f      	b.n	c003f04 <HAL_RCC_OscConfig+0xda8>
 c003e24:	56020c00 	.word	0x56020c00
 c003e28:	56020800 	.word	0x56020800
 c003e2c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c003e30:	4b37      	ldr	r3, [pc, #220]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003e34:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c003e36:	4b36      	ldr	r3, [pc, #216]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003e3a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003e3c:	687b      	ldr	r3, [r7, #4]
 c003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003e40:	2b01      	cmp	r3, #1
 c003e42:	d039      	beq.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c003e44:	69fb      	ldr	r3, [r7, #28]
 c003e46:	f003 0203 	and.w	r2, r3, #3
 c003e4a:	687b      	ldr	r3, [r7, #4]
 c003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003e4e:	429a      	cmp	r2, r3
 c003e50:	d132      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c003e52:	69fb      	ldr	r3, [r7, #28]
 c003e54:	0a1b      	lsrs	r3, r3, #8
 c003e56:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c003e5a:	687b      	ldr	r3, [r7, #4]
 c003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c003e5e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c003e60:	429a      	cmp	r2, r3
 c003e62:	d129      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c003e64:	69fb      	ldr	r3, [r7, #28]
 c003e66:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 c003e6a:	687b      	ldr	r3, [r7, #4]
 c003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c003e6e:	429a      	cmp	r2, r3
 c003e70:	d122      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c003e72:	69bb      	ldr	r3, [r7, #24]
 c003e74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003e78:	687b      	ldr	r3, [r7, #4]
 c003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c003e7c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c003e7e:	429a      	cmp	r2, r3
 c003e80:	d11a      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c003e82:	69bb      	ldr	r3, [r7, #24]
 c003e84:	0a5b      	lsrs	r3, r3, #9
 c003e86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c003e8a:	687b      	ldr	r3, [r7, #4]
 c003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c003e8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c003e90:	429a      	cmp	r2, r3
 c003e92:	d111      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c003e94:	69bb      	ldr	r3, [r7, #24]
 c003e96:	0c1b      	lsrs	r3, r3, #16
 c003e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c003e9c:	687b      	ldr	r3, [r7, #4]
 c003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c003ea0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c003ea2:	429a      	cmp	r2, r3
 c003ea4:	d108      	bne.n	c003eb8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c003ea6:	69bb      	ldr	r3, [r7, #24]
 c003ea8:	0e1b      	lsrs	r3, r3, #24
 c003eaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 c003eae:	687b      	ldr	r3, [r7, #4]
 c003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c003eb2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c003eb4:	429a      	cmp	r2, r3
 c003eb6:	d001      	beq.n	c003ebc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 c003eb8:	2301      	movs	r3, #1
 c003eba:	e024      	b.n	c003f06 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003ebc:	4b14      	ldr	r3, [pc, #80]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003ec0:	08db      	lsrs	r3, r3, #3
 c003ec2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 c003ec6:	687b      	ldr	r3, [r7, #4]
 c003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003eca:	429a      	cmp	r2, r3
 c003ecc:	d01a      	beq.n	c003f04 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c003ece:	4b10      	ldr	r3, [pc, #64]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003ed2:	4a0f      	ldr	r2, [pc, #60]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003ed4:	f023 0310 	bic.w	r3, r3, #16
 c003ed8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003eda:	f7fd fcd9 	bl	c001890 <HAL_GetTick>
 c003ede:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 c003ee0:	bf00      	nop
 c003ee2:	f7fd fcd5 	bl	c001890 <HAL_GetTick>
 c003ee6:	4602      	mov	r2, r0
 c003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003eea:	4293      	cmp	r3, r2
 c003eec:	d0f9      	beq.n	c003ee2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c003eee:	687b      	ldr	r3, [r7, #4]
 c003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003ef2:	4a07      	ldr	r2, [pc, #28]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003ef4:	00db      	lsls	r3, r3, #3
 c003ef6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c003ef8:	4b05      	ldr	r3, [pc, #20]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003efc:	4a04      	ldr	r2, [pc, #16]	@ (c003f10 <HAL_RCC_OscConfig+0xdb4>)
 c003efe:	f043 0310 	orr.w	r3, r3, #16
 c003f02:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 c003f04:	2300      	movs	r3, #0
}
 c003f06:	4618      	mov	r0, r3
 c003f08:	3738      	adds	r7, #56	@ 0x38
 c003f0a:	46bd      	mov	sp, r7
 c003f0c:	bd80      	pop	{r7, pc}
 c003f0e:	bf00      	nop
 c003f10:	56020c00 	.word	0x56020c00

0c003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 c003f14:	b580      	push	{r7, lr}
 c003f16:	b086      	sub	sp, #24
 c003f18:	af00      	add	r7, sp, #0
 c003f1a:	6078      	str	r0, [r7, #4]
 c003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 c003f1e:	687b      	ldr	r3, [r7, #4]
 c003f20:	2b00      	cmp	r3, #0
 c003f22:	d101      	bne.n	c003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c003f24:	2301      	movs	r3, #1
 c003f26:	e1d9      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003f28:	4b9b      	ldr	r3, [pc, #620]	@ (c004198 <HAL_RCC_ClockConfig+0x284>)
 c003f2a:	681b      	ldr	r3, [r3, #0]
 c003f2c:	f003 030f 	and.w	r3, r3, #15
 c003f30:	683a      	ldr	r2, [r7, #0]
 c003f32:	429a      	cmp	r2, r3
 c003f34:	d910      	bls.n	c003f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003f36:	4b98      	ldr	r3, [pc, #608]	@ (c004198 <HAL_RCC_ClockConfig+0x284>)
 c003f38:	681b      	ldr	r3, [r3, #0]
 c003f3a:	f023 020f 	bic.w	r2, r3, #15
 c003f3e:	4996      	ldr	r1, [pc, #600]	@ (c004198 <HAL_RCC_ClockConfig+0x284>)
 c003f40:	683b      	ldr	r3, [r7, #0]
 c003f42:	4313      	orrs	r3, r2
 c003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003f46:	4b94      	ldr	r3, [pc, #592]	@ (c004198 <HAL_RCC_ClockConfig+0x284>)
 c003f48:	681b      	ldr	r3, [r3, #0]
 c003f4a:	f003 030f 	and.w	r3, r3, #15
 c003f4e:	683a      	ldr	r2, [r7, #0]
 c003f50:	429a      	cmp	r2, r3
 c003f52:	d001      	beq.n	c003f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c003f54:	2301      	movs	r3, #1
 c003f56:	e1c1      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c003f58:	687b      	ldr	r3, [r7, #4]
 c003f5a:	681b      	ldr	r3, [r3, #0]
 c003f5c:	f003 0310 	and.w	r3, r3, #16
 c003f60:	2b00      	cmp	r3, #0
 c003f62:	d010      	beq.n	c003f86 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c003f64:	687b      	ldr	r3, [r7, #4]
 c003f66:	695a      	ldr	r2, [r3, #20]
 c003f68:	4b8c      	ldr	r3, [pc, #560]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003f70:	429a      	cmp	r2, r3
 c003f72:	d908      	bls.n	c003f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 c003f74:	4b89      	ldr	r3, [pc, #548]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c003f7c:	687b      	ldr	r3, [r7, #4]
 c003f7e:	695b      	ldr	r3, [r3, #20]
 c003f80:	4986      	ldr	r1, [pc, #536]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003f82:	4313      	orrs	r3, r2
 c003f84:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003f86:	687b      	ldr	r3, [r7, #4]
 c003f88:	681b      	ldr	r3, [r3, #0]
 c003f8a:	f003 0308 	and.w	r3, r3, #8
 c003f8e:	2b00      	cmp	r3, #0
 c003f90:	d012      	beq.n	c003fb8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c003f92:	687b      	ldr	r3, [r7, #4]
 c003f94:	691a      	ldr	r2, [r3, #16]
 c003f96:	4b81      	ldr	r3, [pc, #516]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003f98:	6a1b      	ldr	r3, [r3, #32]
 c003f9a:	091b      	lsrs	r3, r3, #4
 c003f9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003fa0:	429a      	cmp	r2, r3
 c003fa2:	d909      	bls.n	c003fb8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c003fa4:	4b7d      	ldr	r3, [pc, #500]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003fa6:	6a1b      	ldr	r3, [r3, #32]
 c003fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c003fac:	687b      	ldr	r3, [r7, #4]
 c003fae:	691b      	ldr	r3, [r3, #16]
 c003fb0:	011b      	lsls	r3, r3, #4
 c003fb2:	497a      	ldr	r1, [pc, #488]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003fb4:	4313      	orrs	r3, r2
 c003fb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003fb8:	687b      	ldr	r3, [r7, #4]
 c003fba:	681b      	ldr	r3, [r3, #0]
 c003fbc:	f003 0304 	and.w	r3, r3, #4
 c003fc0:	2b00      	cmp	r3, #0
 c003fc2:	d010      	beq.n	c003fe6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c003fc4:	687b      	ldr	r3, [r7, #4]
 c003fc6:	68da      	ldr	r2, [r3, #12]
 c003fc8:	4b74      	ldr	r3, [pc, #464]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003fca:	6a1b      	ldr	r3, [r3, #32]
 c003fcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003fd0:	429a      	cmp	r2, r3
 c003fd2:	d908      	bls.n	c003fe6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c003fd4:	4b71      	ldr	r3, [pc, #452]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003fd6:	6a1b      	ldr	r3, [r3, #32]
 c003fd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c003fdc:	687b      	ldr	r3, [r7, #4]
 c003fde:	68db      	ldr	r3, [r3, #12]
 c003fe0:	496e      	ldr	r1, [pc, #440]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003fe2:	4313      	orrs	r3, r2
 c003fe4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003fe6:	687b      	ldr	r3, [r7, #4]
 c003fe8:	681b      	ldr	r3, [r3, #0]
 c003fea:	f003 0302 	and.w	r3, r3, #2
 c003fee:	2b00      	cmp	r3, #0
 c003ff0:	d010      	beq.n	c004014 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003ff2:	687b      	ldr	r3, [r7, #4]
 c003ff4:	689a      	ldr	r2, [r3, #8]
 c003ff6:	4b69      	ldr	r3, [pc, #420]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c003ff8:	6a1b      	ldr	r3, [r3, #32]
 c003ffa:	f003 030f 	and.w	r3, r3, #15
 c003ffe:	429a      	cmp	r2, r3
 c004000:	d908      	bls.n	c004014 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c004002:	4b66      	ldr	r3, [pc, #408]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004004:	6a1b      	ldr	r3, [r3, #32]
 c004006:	f023 020f 	bic.w	r2, r3, #15
 c00400a:	687b      	ldr	r3, [r7, #4]
 c00400c:	689b      	ldr	r3, [r3, #8]
 c00400e:	4963      	ldr	r1, [pc, #396]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004010:	4313      	orrs	r3, r2
 c004012:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c004014:	687b      	ldr	r3, [r7, #4]
 c004016:	681b      	ldr	r3, [r3, #0]
 c004018:	f003 0301 	and.w	r3, r3, #1
 c00401c:	2b00      	cmp	r3, #0
 c00401e:	f000 80d2 	beq.w	c0041c6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 c004022:	2300      	movs	r3, #0
 c004024:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c004026:	687b      	ldr	r3, [r7, #4]
 c004028:	685b      	ldr	r3, [r3, #4]
 c00402a:	2b03      	cmp	r3, #3
 c00402c:	d143      	bne.n	c0040b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c00402e:	4b5b      	ldr	r3, [pc, #364]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004034:	f003 0304 	and.w	r3, r3, #4
 c004038:	2b00      	cmp	r3, #0
 c00403a:	d110      	bne.n	c00405e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 c00403c:	4b57      	ldr	r3, [pc, #348]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c00403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004042:	4a56      	ldr	r2, [pc, #344]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004044:	f043 0304 	orr.w	r3, r3, #4
 c004048:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00404c:	4b53      	ldr	r3, [pc, #332]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c00404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004052:	f003 0304 	and.w	r3, r3, #4
 c004056:	60bb      	str	r3, [r7, #8]
 c004058:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 c00405a:	2301      	movs	r3, #1
 c00405c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 c00405e:	f7fd fc17 	bl	c001890 <HAL_GetTick>
 c004062:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 c004064:	4b4e      	ldr	r3, [pc, #312]	@ (c0041a0 <HAL_RCC_ClockConfig+0x28c>)
 c004066:	68db      	ldr	r3, [r3, #12]
 c004068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c00406c:	2b00      	cmp	r3, #0
 c00406e:	d00f      	beq.n	c004090 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c004070:	e008      	b.n	c004084 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 c004072:	f7fd fc0d 	bl	c001890 <HAL_GetTick>
 c004076:	4602      	mov	r2, r0
 c004078:	693b      	ldr	r3, [r7, #16]
 c00407a:	1ad3      	subs	r3, r2, r3
 c00407c:	2b02      	cmp	r3, #2
 c00407e:	d901      	bls.n	c004084 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 c004080:	2303      	movs	r3, #3
 c004082:	e12b      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c004084:	4b46      	ldr	r3, [pc, #280]	@ (c0041a0 <HAL_RCC_ClockConfig+0x28c>)
 c004086:	68db      	ldr	r3, [r3, #12]
 c004088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c00408c:	2b00      	cmp	r3, #0
 c00408e:	d0f0      	beq.n	c004072 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 c004090:	7dfb      	ldrb	r3, [r7, #23]
 c004092:	2b01      	cmp	r3, #1
 c004094:	d107      	bne.n	c0040a6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 c004096:	4b41      	ldr	r3, [pc, #260]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00409c:	4a3f      	ldr	r2, [pc, #252]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c00409e:	f023 0304 	bic.w	r3, r3, #4
 c0040a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c0040a6:	4b3d      	ldr	r3, [pc, #244]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c0040a8:	681b      	ldr	r3, [r3, #0]
 c0040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c0040ae:	2b00      	cmp	r3, #0
 c0040b0:	d121      	bne.n	c0040f6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 c0040b2:	2301      	movs	r3, #1
 c0040b4:	e112      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0040b6:	687b      	ldr	r3, [r7, #4]
 c0040b8:	685b      	ldr	r3, [r3, #4]
 c0040ba:	2b02      	cmp	r3, #2
 c0040bc:	d107      	bne.n	c0040ce <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0040be:	4b37      	ldr	r3, [pc, #220]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c0040c0:	681b      	ldr	r3, [r3, #0]
 c0040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0040c6:	2b00      	cmp	r3, #0
 c0040c8:	d115      	bne.n	c0040f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0040ca:	2301      	movs	r3, #1
 c0040cc:	e106      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0040ce:	687b      	ldr	r3, [r7, #4]
 c0040d0:	685b      	ldr	r3, [r3, #4]
 c0040d2:	2b00      	cmp	r3, #0
 c0040d4:	d107      	bne.n	c0040e6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c0040d6:	4b31      	ldr	r3, [pc, #196]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c0040d8:	681b      	ldr	r3, [r3, #0]
 c0040da:	f003 0304 	and.w	r3, r3, #4
 c0040de:	2b00      	cmp	r3, #0
 c0040e0:	d109      	bne.n	c0040f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0040e2:	2301      	movs	r3, #1
 c0040e4:	e0fa      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0040e6:	4b2d      	ldr	r3, [pc, #180]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c0040e8:	681b      	ldr	r3, [r3, #0]
 c0040ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0040ee:	2b00      	cmp	r3, #0
 c0040f0:	d101      	bne.n	c0040f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0040f2:	2301      	movs	r3, #1
 c0040f4:	e0f2      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 c0040f6:	4b29      	ldr	r3, [pc, #164]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c0040f8:	69db      	ldr	r3, [r3, #28]
 c0040fa:	f023 0203 	bic.w	r2, r3, #3
 c0040fe:	687b      	ldr	r3, [r7, #4]
 c004100:	685b      	ldr	r3, [r3, #4]
 c004102:	4926      	ldr	r1, [pc, #152]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004104:	4313      	orrs	r3, r2
 c004106:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 c004108:	f7fd fbc2 	bl	c001890 <HAL_GetTick>
 c00410c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00410e:	687b      	ldr	r3, [r7, #4]
 c004110:	685b      	ldr	r3, [r3, #4]
 c004112:	2b03      	cmp	r3, #3
 c004114:	d112      	bne.n	c00413c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c004116:	e00a      	b.n	c00412e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c004118:	f7fd fbba 	bl	c001890 <HAL_GetTick>
 c00411c:	4602      	mov	r2, r0
 c00411e:	693b      	ldr	r3, [r7, #16]
 c004120:	1ad3      	subs	r3, r2, r3
 c004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 c004126:	4293      	cmp	r3, r2
 c004128:	d901      	bls.n	c00412e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 c00412a:	2303      	movs	r3, #3
 c00412c:	e0d6      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00412e:	4b1b      	ldr	r3, [pc, #108]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c004130:	69db      	ldr	r3, [r3, #28]
 c004132:	f003 030c 	and.w	r3, r3, #12
 c004136:	2b0c      	cmp	r3, #12
 c004138:	d1ee      	bne.n	c004118 <HAL_RCC_ClockConfig+0x204>
 c00413a:	e044      	b.n	c0041c6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c00413c:	687b      	ldr	r3, [r7, #4]
 c00413e:	685b      	ldr	r3, [r3, #4]
 c004140:	2b02      	cmp	r3, #2
 c004142:	d112      	bne.n	c00416a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c004144:	e00a      	b.n	c00415c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c004146:	f7fd fba3 	bl	c001890 <HAL_GetTick>
 c00414a:	4602      	mov	r2, r0
 c00414c:	693b      	ldr	r3, [r7, #16]
 c00414e:	1ad3      	subs	r3, r2, r3
 c004150:	f241 3288 	movw	r2, #5000	@ 0x1388
 c004154:	4293      	cmp	r3, r2
 c004156:	d901      	bls.n	c00415c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 c004158:	2303      	movs	r3, #3
 c00415a:	e0bf      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c00415c:	4b0f      	ldr	r3, [pc, #60]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c00415e:	69db      	ldr	r3, [r3, #28]
 c004160:	f003 030c 	and.w	r3, r3, #12
 c004164:	2b08      	cmp	r3, #8
 c004166:	d1ee      	bne.n	c004146 <HAL_RCC_ClockConfig+0x232>
 c004168:	e02d      	b.n	c0041c6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00416a:	687b      	ldr	r3, [r7, #4]
 c00416c:	685b      	ldr	r3, [r3, #4]
 c00416e:	2b00      	cmp	r3, #0
 c004170:	d123      	bne.n	c0041ba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c004172:	e00a      	b.n	c00418a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c004174:	f7fd fb8c 	bl	c001890 <HAL_GetTick>
 c004178:	4602      	mov	r2, r0
 c00417a:	693b      	ldr	r3, [r7, #16]
 c00417c:	1ad3      	subs	r3, r2, r3
 c00417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 c004182:	4293      	cmp	r3, r2
 c004184:	d901      	bls.n	c00418a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 c004186:	2303      	movs	r3, #3
 c004188:	e0a8      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c00418a:	4b04      	ldr	r3, [pc, #16]	@ (c00419c <HAL_RCC_ClockConfig+0x288>)
 c00418c:	69db      	ldr	r3, [r3, #28]
 c00418e:	f003 030c 	and.w	r3, r3, #12
 c004192:	2b00      	cmp	r3, #0
 c004194:	d1ee      	bne.n	c004174 <HAL_RCC_ClockConfig+0x260>
 c004196:	e016      	b.n	c0041c6 <HAL_RCC_ClockConfig+0x2b2>
 c004198:	50022000 	.word	0x50022000
 c00419c:	56020c00 	.word	0x56020c00
 c0041a0:	56020800 	.word	0x56020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0041a4:	f7fd fb74 	bl	c001890 <HAL_GetTick>
 c0041a8:	4602      	mov	r2, r0
 c0041aa:	693b      	ldr	r3, [r7, #16]
 c0041ac:	1ad3      	subs	r3, r2, r3
 c0041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0041b2:	4293      	cmp	r3, r2
 c0041b4:	d901      	bls.n	c0041ba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 c0041b6:	2303      	movs	r3, #3
 c0041b8:	e090      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c0041ba:	4b4a      	ldr	r3, [pc, #296]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0041bc:	69db      	ldr	r3, [r3, #28]
 c0041be:	f003 030c 	and.w	r3, r3, #12
 c0041c2:	2b04      	cmp	r3, #4
 c0041c4:	d1ee      	bne.n	c0041a4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0041c6:	687b      	ldr	r3, [r7, #4]
 c0041c8:	681b      	ldr	r3, [r3, #0]
 c0041ca:	f003 0302 	and.w	r3, r3, #2
 c0041ce:	2b00      	cmp	r3, #0
 c0041d0:	d010      	beq.n	c0041f4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c0041d2:	687b      	ldr	r3, [r7, #4]
 c0041d4:	689a      	ldr	r2, [r3, #8]
 c0041d6:	4b43      	ldr	r3, [pc, #268]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0041d8:	6a1b      	ldr	r3, [r3, #32]
 c0041da:	f003 030f 	and.w	r3, r3, #15
 c0041de:	429a      	cmp	r2, r3
 c0041e0:	d208      	bcs.n	c0041f4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c0041e2:	4b40      	ldr	r3, [pc, #256]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0041e4:	6a1b      	ldr	r3, [r3, #32]
 c0041e6:	f023 020f 	bic.w	r2, r3, #15
 c0041ea:	687b      	ldr	r3, [r7, #4]
 c0041ec:	689b      	ldr	r3, [r3, #8]
 c0041ee:	493d      	ldr	r1, [pc, #244]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0041f0:	4313      	orrs	r3, r2
 c0041f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c0041f4:	4b3c      	ldr	r3, [pc, #240]	@ (c0042e8 <HAL_RCC_ClockConfig+0x3d4>)
 c0041f6:	681b      	ldr	r3, [r3, #0]
 c0041f8:	f003 030f 	and.w	r3, r3, #15
 c0041fc:	683a      	ldr	r2, [r7, #0]
 c0041fe:	429a      	cmp	r2, r3
 c004200:	d210      	bcs.n	c004224 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c004202:	4b39      	ldr	r3, [pc, #228]	@ (c0042e8 <HAL_RCC_ClockConfig+0x3d4>)
 c004204:	681b      	ldr	r3, [r3, #0]
 c004206:	f023 020f 	bic.w	r2, r3, #15
 c00420a:	4937      	ldr	r1, [pc, #220]	@ (c0042e8 <HAL_RCC_ClockConfig+0x3d4>)
 c00420c:	683b      	ldr	r3, [r7, #0]
 c00420e:	4313      	orrs	r3, r2
 c004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c004212:	4b35      	ldr	r3, [pc, #212]	@ (c0042e8 <HAL_RCC_ClockConfig+0x3d4>)
 c004214:	681b      	ldr	r3, [r3, #0]
 c004216:	f003 030f 	and.w	r3, r3, #15
 c00421a:	683a      	ldr	r2, [r7, #0]
 c00421c:	429a      	cmp	r2, r3
 c00421e:	d001      	beq.n	c004224 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 c004220:	2301      	movs	r3, #1
 c004222:	e05b      	b.n	c0042dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c004224:	687b      	ldr	r3, [r7, #4]
 c004226:	681b      	ldr	r3, [r3, #0]
 c004228:	f003 0304 	and.w	r3, r3, #4
 c00422c:	2b00      	cmp	r3, #0
 c00422e:	d010      	beq.n	c004252 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c004230:	687b      	ldr	r3, [r7, #4]
 c004232:	68da      	ldr	r2, [r3, #12]
 c004234:	4b2b      	ldr	r3, [pc, #172]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004236:	6a1b      	ldr	r3, [r3, #32]
 c004238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c00423c:	429a      	cmp	r2, r3
 c00423e:	d208      	bcs.n	c004252 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c004240:	4b28      	ldr	r3, [pc, #160]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004242:	6a1b      	ldr	r3, [r3, #32]
 c004244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c004248:	687b      	ldr	r3, [r7, #4]
 c00424a:	68db      	ldr	r3, [r3, #12]
 c00424c:	4925      	ldr	r1, [pc, #148]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c00424e:	4313      	orrs	r3, r2
 c004250:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c004252:	687b      	ldr	r3, [r7, #4]
 c004254:	681b      	ldr	r3, [r3, #0]
 c004256:	f003 0308 	and.w	r3, r3, #8
 c00425a:	2b00      	cmp	r3, #0
 c00425c:	d012      	beq.n	c004284 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c00425e:	687b      	ldr	r3, [r7, #4]
 c004260:	691a      	ldr	r2, [r3, #16]
 c004262:	4b20      	ldr	r3, [pc, #128]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004264:	6a1b      	ldr	r3, [r3, #32]
 c004266:	091b      	lsrs	r3, r3, #4
 c004268:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c00426c:	429a      	cmp	r2, r3
 c00426e:	d209      	bcs.n	c004284 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c004270:	4b1c      	ldr	r3, [pc, #112]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004272:	6a1b      	ldr	r3, [r3, #32]
 c004274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c004278:	687b      	ldr	r3, [r7, #4]
 c00427a:	691b      	ldr	r3, [r3, #16]
 c00427c:	011b      	lsls	r3, r3, #4
 c00427e:	4919      	ldr	r1, [pc, #100]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004280:	4313      	orrs	r3, r2
 c004282:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c004284:	687b      	ldr	r3, [r7, #4]
 c004286:	681b      	ldr	r3, [r3, #0]
 c004288:	f003 0310 	and.w	r3, r3, #16
 c00428c:	2b00      	cmp	r3, #0
 c00428e:	d010      	beq.n	c0042b2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c004290:	687b      	ldr	r3, [r7, #4]
 c004292:	695a      	ldr	r2, [r3, #20]
 c004294:	4b13      	ldr	r3, [pc, #76]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c004298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c00429c:	429a      	cmp	r2, r3
 c00429e:	d208      	bcs.n	c0042b2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 c0042a0:	4b10      	ldr	r3, [pc, #64]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0042a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c0042a8:	687b      	ldr	r3, [r7, #4]
 c0042aa:	695b      	ldr	r3, [r3, #20]
 c0042ac:	490d      	ldr	r1, [pc, #52]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0042ae:	4313      	orrs	r3, r2
 c0042b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0042b2:	f000 f821 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c0042b6:	4602      	mov	r2, r0
 c0042b8:	4b0a      	ldr	r3, [pc, #40]	@ (c0042e4 <HAL_RCC_ClockConfig+0x3d0>)
 c0042ba:	6a1b      	ldr	r3, [r3, #32]
 c0042bc:	f003 030f 	and.w	r3, r3, #15
 c0042c0:	490a      	ldr	r1, [pc, #40]	@ (c0042ec <HAL_RCC_ClockConfig+0x3d8>)
 c0042c2:	5ccb      	ldrb	r3, [r1, r3]
 c0042c4:	fa22 f303 	lsr.w	r3, r2, r3
 c0042c8:	4a09      	ldr	r2, [pc, #36]	@ (c0042f0 <HAL_RCC_ClockConfig+0x3dc>)
 c0042ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 c0042cc:	4b09      	ldr	r3, [pc, #36]	@ (c0042f4 <HAL_RCC_ClockConfig+0x3e0>)
 c0042ce:	681b      	ldr	r3, [r3, #0]
 c0042d0:	4618      	mov	r0, r3
 c0042d2:	f7fd fa53 	bl	c00177c <HAL_InitTick>
 c0042d6:	4603      	mov	r3, r0
 c0042d8:	73fb      	strb	r3, [r7, #15]

  return status;
 c0042da:	7bfb      	ldrb	r3, [r7, #15]
}
 c0042dc:	4618      	mov	r0, r3
 c0042de:	3718      	adds	r7, #24
 c0042e0:	46bd      	mov	sp, r7
 c0042e2:	bd80      	pop	{r7, pc}
 c0042e4:	56020c00 	.word	0x56020c00
 c0042e8:	50022000 	.word	0x50022000
 c0042ec:	0c00836c 	.word	0x0c00836c
 c0042f0:	30000000 	.word	0x30000000
 c0042f4:	30000004 	.word	0x30000004

0c0042f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0042f8:	b480      	push	{r7}
 c0042fa:	b08b      	sub	sp, #44	@ 0x2c
 c0042fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c0042fe:	2300      	movs	r3, #0
 c004300:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c004302:	2300      	movs	r3, #0
 c004304:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c004306:	4b78      	ldr	r3, [pc, #480]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c004308:	69db      	ldr	r3, [r3, #28]
 c00430a:	f003 030c 	and.w	r3, r3, #12
 c00430e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c004310:	4b75      	ldr	r3, [pc, #468]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c004312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004314:	f003 0303 	and.w	r3, r3, #3
 c004318:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00431a:	69bb      	ldr	r3, [r7, #24]
 c00431c:	2b00      	cmp	r3, #0
 c00431e:	d005      	beq.n	c00432c <HAL_RCC_GetSysClockFreq+0x34>
 c004320:	69bb      	ldr	r3, [r7, #24]
 c004322:	2b0c      	cmp	r3, #12
 c004324:	d121      	bne.n	c00436a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c004326:	697b      	ldr	r3, [r7, #20]
 c004328:	2b01      	cmp	r3, #1
 c00432a:	d11e      	bne.n	c00436a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c00432c:	4b6e      	ldr	r3, [pc, #440]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00432e:	689b      	ldr	r3, [r3, #8]
 c004330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c004334:	2b00      	cmp	r3, #0
 c004336:	d107      	bne.n	c004348 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c004338:	4b6b      	ldr	r3, [pc, #428]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00433a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00433e:	0b1b      	lsrs	r3, r3, #12
 c004340:	f003 030f 	and.w	r3, r3, #15
 c004344:	627b      	str	r3, [r7, #36]	@ 0x24
 c004346:	e005      	b.n	c004354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c004348:	4b67      	ldr	r3, [pc, #412]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00434a:	689b      	ldr	r3, [r3, #8]
 c00434c:	0f1b      	lsrs	r3, r3, #28
 c00434e:	f003 030f 	and.w	r3, r3, #15
 c004352:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c004354:	4a65      	ldr	r2, [pc, #404]	@ (c0044ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 c004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00435c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00435e:	69bb      	ldr	r3, [r7, #24]
 c004360:	2b00      	cmp	r3, #0
 c004362:	d110      	bne.n	c004386 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004366:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c004368:	e00d      	b.n	c004386 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00436a:	4b5f      	ldr	r3, [pc, #380]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00436c:	69db      	ldr	r3, [r3, #28]
 c00436e:	f003 030c 	and.w	r3, r3, #12
 c004372:	2b04      	cmp	r3, #4
 c004374:	d102      	bne.n	c00437c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c004376:	4b5e      	ldr	r3, [pc, #376]	@ (c0044f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c004378:	623b      	str	r3, [r7, #32]
 c00437a:	e004      	b.n	c004386 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00437c:	69bb      	ldr	r3, [r7, #24]
 c00437e:	2b08      	cmp	r3, #8
 c004380:	d101      	bne.n	c004386 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c004382:	4b5b      	ldr	r3, [pc, #364]	@ (c0044f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c004384:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c004386:	69bb      	ldr	r3, [r7, #24]
 c004388:	2b0c      	cmp	r3, #12
 c00438a:	f040 80a5 	bne.w	c0044d8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00438e:	4b56      	ldr	r3, [pc, #344]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004392:	f003 0303 	and.w	r3, r3, #3
 c004396:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c004398:	4b53      	ldr	r3, [pc, #332]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00439c:	0a1b      	lsrs	r3, r3, #8
 c00439e:	f003 030f 	and.w	r3, r3, #15
 c0043a2:	3301      	adds	r3, #1
 c0043a4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c0043a6:	4b50      	ldr	r3, [pc, #320]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0043aa:	091b      	lsrs	r3, r3, #4
 c0043ac:	f003 0301 	and.w	r3, r3, #1
 c0043b0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c0043b2:	4b4d      	ldr	r3, [pc, #308]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0043b6:	08db      	lsrs	r3, r3, #3
 c0043b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0043bc:	68ba      	ldr	r2, [r7, #8]
 c0043be:	fb02 f303 	mul.w	r3, r2, r3
 c0043c2:	ee07 3a90 	vmov	s15, r3
 c0043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0043ca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c0043ce:	693b      	ldr	r3, [r7, #16]
 c0043d0:	2b02      	cmp	r3, #2
 c0043d2:	d003      	beq.n	c0043dc <HAL_RCC_GetSysClockFreq+0xe4>
 c0043d4:	693b      	ldr	r3, [r7, #16]
 c0043d6:	2b03      	cmp	r3, #3
 c0043d8:	d022      	beq.n	c004420 <HAL_RCC_GetSysClockFreq+0x128>
 c0043da:	e043      	b.n	c004464 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0043dc:	68fb      	ldr	r3, [r7, #12]
 c0043de:	ee07 3a90 	vmov	s15, r3
 c0043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0043e6:	eddf 6a43 	vldr	s13, [pc, #268]	@ c0044f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 c0043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0043ee:	4b3e      	ldr	r3, [pc, #248]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0043f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0043f6:	ee07 3a90 	vmov	s15, r3
 c0043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c0043fe:	ed97 6a01 	vldr	s12, [r7, #4]
 c004402:	eddf 5a3d 	vldr	s11, [pc, #244]	@ c0044f8 <HAL_RCC_GetSysClockFreq+0x200>
 c004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00440e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c00441e:	e046      	b.n	c0044ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004420:	68fb      	ldr	r3, [r7, #12]
 c004422:	ee07 3a90 	vmov	s15, r3
 c004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00442a:	eddf 6a32 	vldr	s13, [pc, #200]	@ c0044f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 c00442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004432:	4b2d      	ldr	r3, [pc, #180]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00443a:	ee07 3a90 	vmov	s15, r3
 c00443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c004442:	ed97 6a01 	vldr	s12, [r7, #4]
 c004446:	eddf 5a2c 	vldr	s11, [pc, #176]	@ c0044f8 <HAL_RCC_GetSysClockFreq+0x200>
 c00444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c004452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00445e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c004462:	e024      	b.n	c0044ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004466:	ee07 3a90 	vmov	s15, r3
 c00446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00446e:	68fb      	ldr	r3, [r7, #12]
 c004470:	ee07 3a90 	vmov	s15, r3
 c004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00447c:	4b1a      	ldr	r3, [pc, #104]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004484:	ee07 3a90 	vmov	s15, r3
 c004488:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00448c:	ed97 6a01 	vldr	s12, [r7, #4]
 c004490:	eddf 5a19 	vldr	s11, [pc, #100]	@ c0044f8 <HAL_RCC_GetSysClockFreq+0x200>
 c004494:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004498:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00449c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0044a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0044a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0044a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0044ac:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c0044ae:	4b0e      	ldr	r3, [pc, #56]	@ (c0044e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0044b2:	0e1b      	lsrs	r3, r3, #24
 c0044b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0044b8:	3301      	adds	r3, #1
 c0044ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c0044bc:	683b      	ldr	r3, [r7, #0]
 c0044be:	ee07 3a90 	vmov	s15, r3
 c0044c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0044c6:	edd7 6a07 	vldr	s13, [r7, #28]
 c0044ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0044ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0044d2:	ee17 3a90 	vmov	r3, s15
 c0044d6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c0044d8:	6a3b      	ldr	r3, [r7, #32]
}
 c0044da:	4618      	mov	r0, r3
 c0044dc:	372c      	adds	r7, #44	@ 0x2c
 c0044de:	46bd      	mov	sp, r7
 c0044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0044e4:	4770      	bx	lr
 c0044e6:	bf00      	nop
 c0044e8:	56020c00 	.word	0x56020c00
 c0044ec:	0c008384 	.word	0x0c008384
 c0044f0:	00f42400 	.word	0x00f42400
 c0044f4:	4b742400 	.word	0x4b742400
 c0044f8:	46000000 	.word	0x46000000

0c0044fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0044fc:	b580      	push	{r7, lr}
 c0044fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c004500:	f7ff fefa 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c004504:	4602      	mov	r2, r0
 c004506:	4b07      	ldr	r3, [pc, #28]	@ (c004524 <HAL_RCC_GetHCLKFreq+0x28>)
 c004508:	6a1b      	ldr	r3, [r3, #32]
 c00450a:	f003 030f 	and.w	r3, r3, #15
 c00450e:	4906      	ldr	r1, [pc, #24]	@ (c004528 <HAL_RCC_GetHCLKFreq+0x2c>)
 c004510:	5ccb      	ldrb	r3, [r1, r3]
 c004512:	fa22 f303 	lsr.w	r3, r2, r3
 c004516:	4a05      	ldr	r2, [pc, #20]	@ (c00452c <HAL_RCC_GetHCLKFreq+0x30>)
 c004518:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 c00451a:	4b04      	ldr	r3, [pc, #16]	@ (c00452c <HAL_RCC_GetHCLKFreq+0x30>)
 c00451c:	681b      	ldr	r3, [r3, #0]
}
 c00451e:	4618      	mov	r0, r3
 c004520:	bd80      	pop	{r7, pc}
 c004522:	bf00      	nop
 c004524:	56020c00 	.word	0x56020c00
 c004528:	0c00836c 	.word	0x0c00836c
 c00452c:	30000000 	.word	0x30000000

0c004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c004530:	b580      	push	{r7, lr}
 c004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 c004534:	f7ff ffe2 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c004538:	4602      	mov	r2, r0
 c00453a:	4b05      	ldr	r3, [pc, #20]	@ (c004550 <HAL_RCC_GetPCLK1Freq+0x20>)
 c00453c:	6a1b      	ldr	r3, [r3, #32]
 c00453e:	091b      	lsrs	r3, r3, #4
 c004540:	f003 0307 	and.w	r3, r3, #7
 c004544:	4903      	ldr	r1, [pc, #12]	@ (c004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 c004546:	5ccb      	ldrb	r3, [r1, r3]
 c004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00454c:	4618      	mov	r0, r3
 c00454e:	bd80      	pop	{r7, pc}
 c004550:	56020c00 	.word	0x56020c00
 c004554:	0c00837c 	.word	0x0c00837c

0c004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c004558:	b580      	push	{r7, lr}
 c00455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 c00455c:	f7ff ffce 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c004560:	4602      	mov	r2, r0
 c004562:	4b05      	ldr	r3, [pc, #20]	@ (c004578 <HAL_RCC_GetPCLK2Freq+0x20>)
 c004564:	6a1b      	ldr	r3, [r3, #32]
 c004566:	0a1b      	lsrs	r3, r3, #8
 c004568:	f003 0307 	and.w	r3, r3, #7
 c00456c:	4903      	ldr	r1, [pc, #12]	@ (c00457c <HAL_RCC_GetPCLK2Freq+0x24>)
 c00456e:	5ccb      	ldrb	r3, [r1, r3]
 c004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 c004574:	4618      	mov	r0, r3
 c004576:	bd80      	pop	{r7, pc}
 c004578:	56020c00 	.word	0x56020c00
 c00457c:	0c00837c 	.word	0x0c00837c

0c004580 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 c004580:	b580      	push	{r7, lr}
 c004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 c004584:	f7ff ffba 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c004588:	4602      	mov	r2, r0
 c00458a:	4b05      	ldr	r3, [pc, #20]	@ (c0045a0 <HAL_RCC_GetPCLK3Freq+0x20>)
 c00458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00458e:	091b      	lsrs	r3, r3, #4
 c004590:	f003 0307 	and.w	r3, r3, #7
 c004594:	4903      	ldr	r1, [pc, #12]	@ (c0045a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 c004596:	5ccb      	ldrb	r3, [r1, r3]
 c004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00459c:	4618      	mov	r0, r3
 c00459e:	bd80      	pop	{r7, pc}
 c0045a0:	56020c00 	.word	0x56020c00
 c0045a4:	0c00837c 	.word	0x0c00837c

0c0045a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0045a8:	b580      	push	{r7, lr}
 c0045aa:	b086      	sub	sp, #24
 c0045ac:	af00      	add	r7, sp, #0
 c0045ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0045b0:	4b3e      	ldr	r3, [pc, #248]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0045b6:	f003 0304 	and.w	r3, r3, #4
 c0045ba:	2b00      	cmp	r3, #0
 c0045bc:	d003      	beq.n	c0045c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0045be:	f7fe fd3f 	bl	c003040 <HAL_PWREx_GetVoltageRange>
 c0045c2:	6178      	str	r0, [r7, #20]
 c0045c4:	e019      	b.n	c0045fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0045c6:	4b39      	ldr	r3, [pc, #228]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0045cc:	4a37      	ldr	r2, [pc, #220]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045ce:	f043 0304 	orr.w	r3, r3, #4
 c0045d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c0045d6:	4b35      	ldr	r3, [pc, #212]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0045dc:	f003 0304 	and.w	r3, r3, #4
 c0045e0:	60fb      	str	r3, [r7, #12]
 c0045e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0045e4:	f7fe fd2c 	bl	c003040 <HAL_PWREx_GetVoltageRange>
 c0045e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0045ea:	4b30      	ldr	r3, [pc, #192]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0045f0:	4a2e      	ldr	r2, [pc, #184]	@ (c0046ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0045f2:	f023 0304 	bic.w	r3, r3, #4
 c0045f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 c0045fa:	697b      	ldr	r3, [r7, #20]
 c0045fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c004600:	d003      	beq.n	c00460a <RCC_SetFlashLatencyFromMSIRange+0x62>
 c004602:	697b      	ldr	r3, [r7, #20]
 c004604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c004608:	d109      	bne.n	c00461e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 c00460a:	687b      	ldr	r3, [r7, #4]
 c00460c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c004610:	d202      	bcs.n	c004618 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 c004612:	2301      	movs	r3, #1
 c004614:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c004616:	e033      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 c004618:	2300      	movs	r3, #0
 c00461a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c00461c:	e030      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 c00461e:	687b      	ldr	r3, [r7, #4]
 c004620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c004624:	d208      	bcs.n	c004638 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c004626:	697b      	ldr	r3, [r7, #20]
 c004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00462c:	d102      	bne.n	c004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 c00462e:	2303      	movs	r3, #3
 c004630:	613b      	str	r3, [r7, #16]
 c004632:	e025      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 c004634:	2301      	movs	r3, #1
 c004636:	e035      	b.n	c0046a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 c004638:	687b      	ldr	r3, [r7, #4]
 c00463a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c00463e:	d90f      	bls.n	c004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 c004640:	697b      	ldr	r3, [r7, #20]
 c004642:	2b00      	cmp	r3, #0
 c004644:	d109      	bne.n	c00465a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 c004646:	687b      	ldr	r3, [r7, #4]
 c004648:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c00464c:	d902      	bls.n	c004654 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 c00464e:	2300      	movs	r3, #0
 c004650:	613b      	str	r3, [r7, #16]
 c004652:	e015      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 c004654:	2301      	movs	r3, #1
 c004656:	613b      	str	r3, [r7, #16]
 c004658:	e012      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 c00465a:	2300      	movs	r3, #0
 c00465c:	613b      	str	r3, [r7, #16]
 c00465e:	e00f      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 c004660:	687b      	ldr	r3, [r7, #4]
 c004662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c004666:	d109      	bne.n	c00467c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c004668:	697b      	ldr	r3, [r7, #20]
 c00466a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00466e:	d102      	bne.n	c004676 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 c004670:	2301      	movs	r3, #1
 c004672:	613b      	str	r3, [r7, #16]
 c004674:	e004      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 c004676:	2302      	movs	r3, #2
 c004678:	613b      	str	r3, [r7, #16]
 c00467a:	e001      	b.n	c004680 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 c00467c:	2301      	movs	r3, #1
 c00467e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c004680:	4b0b      	ldr	r3, [pc, #44]	@ (c0046b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c004682:	681b      	ldr	r3, [r3, #0]
 c004684:	f023 020f 	bic.w	r2, r3, #15
 c004688:	4909      	ldr	r1, [pc, #36]	@ (c0046b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00468a:	693b      	ldr	r3, [r7, #16]
 c00468c:	4313      	orrs	r3, r2
 c00468e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c004690:	4b07      	ldr	r3, [pc, #28]	@ (c0046b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c004692:	681b      	ldr	r3, [r3, #0]
 c004694:	f003 030f 	and.w	r3, r3, #15
 c004698:	693a      	ldr	r2, [r7, #16]
 c00469a:	429a      	cmp	r2, r3
 c00469c:	d001      	beq.n	c0046a2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 c00469e:	2301      	movs	r3, #1
 c0046a0:	e000      	b.n	c0046a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 c0046a2:	2300      	movs	r3, #0
}
 c0046a4:	4618      	mov	r0, r3
 c0046a6:	3718      	adds	r7, #24
 c0046a8:	46bd      	mov	sp, r7
 c0046aa:	bd80      	pop	{r7, pc}
 c0046ac:	56020c00 	.word	0x56020c00
 c0046b0:	50022000 	.word	0x50022000

0c0046b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c0046b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c0046b8:	b0b8      	sub	sp, #224	@ 0xe0
 c0046ba:	af00      	add	r7, sp, #0
 c0046bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c0046c0:	2300      	movs	r3, #0
 c0046c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c0046c6:	2300      	movs	r3, #0
 c0046c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0046cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0046d4:	f002 0401 	and.w	r4, r2, #1
 c0046d8:	2500      	movs	r5, #0
 c0046da:	ea54 0305 	orrs.w	r3, r4, r5
 c0046de:	d00b      	beq.n	c0046f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c0046e0:	4bca      	ldr	r3, [pc, #808]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0046e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0046e6:	f023 0103 	bic.w	r1, r3, #3
 c0046ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0046ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0046f0:	4ac6      	ldr	r2, [pc, #792]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0046f2:	430b      	orrs	r3, r1
 c0046f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0046f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004700:	f002 0802 	and.w	r8, r2, #2
 c004704:	f04f 0900 	mov.w	r9, #0
 c004708:	ea58 0309 	orrs.w	r3, r8, r9
 c00470c:	d00b      	beq.n	c004726 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c00470e:	4bbf      	ldr	r3, [pc, #764]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004714:	f023 010c 	bic.w	r1, r3, #12
 c004718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c00471e:	4abb      	ldr	r2, [pc, #748]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004720:	430b      	orrs	r3, r1
 c004722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c004726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00472e:	f002 0a04 	and.w	sl, r2, #4
 c004732:	f04f 0b00 	mov.w	fp, #0
 c004736:	ea5a 030b 	orrs.w	r3, sl, fp
 c00473a:	d00b      	beq.n	c004754 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c00473c:	4bb3      	ldr	r3, [pc, #716]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004742:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 c004746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c00474c:	4aaf      	ldr	r2, [pc, #700]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00474e:	430b      	orrs	r3, r1
 c004750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c004754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00475c:	f002 0308 	and.w	r3, r2, #8
 c004760:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 c004764:	2300      	movs	r3, #0
 c004766:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 c00476a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 c00476e:	460b      	mov	r3, r1
 c004770:	4313      	orrs	r3, r2
 c004772:	d00b      	beq.n	c00478c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c004774:	4ba5      	ldr	r3, [pc, #660]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00477a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c00477e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c004784:	4aa1      	ldr	r2, [pc, #644]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004786:	430b      	orrs	r3, r1
 c004788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00478c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004794:	f002 0310 	and.w	r3, r2, #16
 c004798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 c00479c:	2300      	movs	r3, #0
 c00479e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 c0047a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 c0047a6:	460b      	mov	r3, r1
 c0047a8:	4313      	orrs	r3, r2
 c0047aa:	d00b      	beq.n	c0047c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c0047ac:	4b97      	ldr	r3, [pc, #604]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0047ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0047b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c0047b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c0047bc:	4a93      	ldr	r2, [pc, #588]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0047be:	430b      	orrs	r3, r1
 c0047c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0047c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0047cc:	f002 0320 	and.w	r3, r2, #32
 c0047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c0047d4:	2300      	movs	r3, #0
 c0047d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 c0047da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 c0047de:	460b      	mov	r3, r1
 c0047e0:	4313      	orrs	r3, r2
 c0047e2:	d00b      	beq.n	c0047fc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c0047e4:	4b89      	ldr	r3, [pc, #548]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0047e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0047ea:	f023 0107 	bic.w	r1, r3, #7
 c0047ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0047f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c0047f4:	4a85      	ldr	r2, [pc, #532]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0047f6:	430b      	orrs	r3, r1
 c0047f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0047fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004804:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 c004808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 c00480c:	2300      	movs	r3, #0
 c00480e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c004812:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 c004816:	460b      	mov	r3, r1
 c004818:	4313      	orrs	r3, r2
 c00481a:	d00b      	beq.n	c004834 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c00481c:	4b7b      	ldr	r3, [pc, #492]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00481e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004822:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c004826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00482a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c00482c:	4a77      	ldr	r2, [pc, #476]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00482e:	430b      	orrs	r3, r1
 c004830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c004834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00483c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 c004840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c004844:	2300      	movs	r3, #0
 c004846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c00484a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 c00484e:	460b      	mov	r3, r1
 c004850:	4313      	orrs	r3, r2
 c004852:	d00b      	beq.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c004854:	4b6d      	ldr	r3, [pc, #436]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00485a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c00485e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c004864:	4a69      	ldr	r2, [pc, #420]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004866:	430b      	orrs	r3, r1
 c004868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c00486c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004874:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 c004878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 c00487c:	2300      	movs	r3, #0
 c00487e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 c004882:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 c004886:	460b      	mov	r3, r1
 c004888:	4313      	orrs	r3, r2
 c00488a:	d00b      	beq.n	c0048a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c00488c:	4b5f      	ldr	r3, [pc, #380]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00488e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c004896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c00489c:	4a5b      	ldr	r2, [pc, #364]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00489e:	430b      	orrs	r3, r1
 c0048a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c0048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0048ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 c0048b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 c0048b4:	2300      	movs	r3, #0
 c0048b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 c0048ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 c0048be:	460b      	mov	r3, r1
 c0048c0:	4313      	orrs	r3, r2
 c0048c2:	d00b      	beq.n	c0048dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c0048c4:	4b51      	ldr	r3, [pc, #324]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0048c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0048ca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 c0048ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0048d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c0048d4:	4a4d      	ldr	r2, [pc, #308]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0048d6:	430b      	orrs	r3, r1
 c0048d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0048dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0048e4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 c0048e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 c0048ec:	2300      	movs	r3, #0
 c0048ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 c0048f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 c0048f6:	460b      	mov	r3, r1
 c0048f8:	4313      	orrs	r3, r2
 c0048fa:	d00b      	beq.n	c004914 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c0048fc:	4b43      	ldr	r3, [pc, #268]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0048fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004902:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c004906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00490a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c00490c:	4a3f      	ldr	r2, [pc, #252]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00490e:	430b      	orrs	r3, r1
 c004910:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00491c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 c004920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 c004924:	2300      	movs	r3, #0
 c004926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 c00492a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 c00492e:	460b      	mov	r3, r1
 c004930:	4313      	orrs	r3, r2
 c004932:	d00b      	beq.n	c00494c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c004934:	4b35      	ldr	r3, [pc, #212]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00493a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 c00493e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c004944:	4a31      	ldr	r2, [pc, #196]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c004946:	430b      	orrs	r3, r1
 c004948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 c00494c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004954:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 c004958:	67bb      	str	r3, [r7, #120]	@ 0x78
 c00495a:	2300      	movs	r3, #0
 c00495c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 c00495e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 c004962:	460b      	mov	r3, r1
 c004964:	4313      	orrs	r3, r2
 c004966:	d00c      	beq.n	c004982 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 c004968:	4b28      	ldr	r3, [pc, #160]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00496a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00496e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c004972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c00497a:	4a24      	ldr	r2, [pc, #144]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c00497c:	430b      	orrs	r3, r1
 c00497e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c004982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00498a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 c00498e:	673b      	str	r3, [r7, #112]	@ 0x70
 c004990:	2300      	movs	r3, #0
 c004992:	677b      	str	r3, [r7, #116]	@ 0x74
 c004994:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 c004998:	460b      	mov	r3, r1
 c00499a:	4313      	orrs	r3, r2
 c00499c:	d04f      	beq.n	c004a3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c00499e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0049a6:	2b80      	cmp	r3, #128	@ 0x80
 c0049a8:	d02d      	beq.n	c004a06 <HAL_RCCEx_PeriphCLKConfig+0x352>
 c0049aa:	2b80      	cmp	r3, #128	@ 0x80
 c0049ac:	d827      	bhi.n	c0049fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 c0049ae:	2b60      	cmp	r3, #96	@ 0x60
 c0049b0:	d02e      	beq.n	c004a10 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 c0049b2:	2b60      	cmp	r3, #96	@ 0x60
 c0049b4:	d823      	bhi.n	c0049fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 c0049b6:	2b40      	cmp	r3, #64	@ 0x40
 c0049b8:	d006      	beq.n	c0049c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 c0049ba:	2b40      	cmp	r3, #64	@ 0x40
 c0049bc:	d81f      	bhi.n	c0049fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 c0049be:	2b00      	cmp	r3, #0
 c0049c0:	d009      	beq.n	c0049d6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 c0049c2:	2b20      	cmp	r3, #32
 c0049c4:	d011      	beq.n	c0049ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 c0049c6:	e01a      	b.n	c0049fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c0049c8:	4b10      	ldr	r3, [pc, #64]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0049cc:	4a0f      	ldr	r2, [pc, #60]	@ (c004a0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 c0049ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0049d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0049d4:	e01d      	b.n	c004a12 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0049d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049da:	3308      	adds	r3, #8
 c0049dc:	4618      	mov	r0, r3
 c0049de:	f002 f9d1 	bl	c006d84 <RCCEx_PLL2_Config>
 c0049e2:	4603      	mov	r3, r0
 c0049e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0049e8:	e013      	b.n	c004a12 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049ee:	332c      	adds	r3, #44	@ 0x2c
 c0049f0:	4618      	mov	r0, r3
 c0049f2:	f002 fa5f 	bl	c006eb4 <RCCEx_PLL3_Config>
 c0049f6:	4603      	mov	r3, r0
 c0049f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0049fc:	e009      	b.n	c004a12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0049fe:	2301      	movs	r3, #1
 c004a00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004a04:	e005      	b.n	c004a12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 c004a06:	bf00      	nop
 c004a08:	e003      	b.n	c004a12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 c004a0a:	bf00      	nop
 c004a0c:	56020c00 	.word	0x56020c00
        break;
 c004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004a12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004a16:	2b00      	cmp	r3, #0
 c004a18:	d10d      	bne.n	c004a36 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c004a1a:	4bb6      	ldr	r3, [pc, #728]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004a20:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 c004a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c004a2c:	4ab1      	ldr	r2, [pc, #708]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004a2e:	430b      	orrs	r3, r1
 c004a30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004a34:	e003      	b.n	c004a3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004a36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004a3a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c004a3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004a46:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 c004a4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 c004a4c:	2300      	movs	r3, #0
 c004a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 c004a50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 c004a54:	460b      	mov	r3, r1
 c004a56:	4313      	orrs	r3, r2
 c004a58:	d053      	beq.n	c004b02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c004a5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004a66:	d033      	beq.n	c004ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004a6c:	d82c      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 c004a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c004a72:	d02f      	beq.n	c004ad4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 c004a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c004a78:	d826      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 c004a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c004a7e:	d008      	beq.n	c004a92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 c004a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c004a84:	d820      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 c004a86:	2b00      	cmp	r3, #0
 c004a88:	d00a      	beq.n	c004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 c004a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c004a8e:	d011      	beq.n	c004ab4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 c004a90:	e01a      	b.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004a92:	4b98      	ldr	r3, [pc, #608]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004a96:	4a97      	ldr	r2, [pc, #604]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004a9c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004a9e:	e01a      	b.n	c004ad6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004aa4:	3308      	adds	r3, #8
 c004aa6:	4618      	mov	r0, r3
 c004aa8:	f002 f96c 	bl	c006d84 <RCCEx_PLL2_Config>
 c004aac:	4603      	mov	r3, r0
 c004aae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004ab2:	e010      	b.n	c004ad6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004ab8:	332c      	adds	r3, #44	@ 0x2c
 c004aba:	4618      	mov	r0, r3
 c004abc:	f002 f9fa 	bl	c006eb4 <RCCEx_PLL3_Config>
 c004ac0:	4603      	mov	r3, r0
 c004ac2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004ac6:	e006      	b.n	c004ad6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004ac8:	2301      	movs	r3, #1
 c004aca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004ace:	e002      	b.n	c004ad6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 c004ad0:	bf00      	nop
 c004ad2:	e000      	b.n	c004ad6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 c004ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004ad6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004ada:	2b00      	cmp	r3, #0
 c004adc:	d10d      	bne.n	c004afa <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c004ade:	4b85      	ldr	r3, [pc, #532]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004ae4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 c004ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004af0:	4a80      	ldr	r2, [pc, #512]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004af2:	430b      	orrs	r3, r1
 c004af4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004af8:	e003      	b.n	c004b02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004afa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004afe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c004b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004b0a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 c004b0e:	663b      	str	r3, [r7, #96]	@ 0x60
 c004b10:	2300      	movs	r3, #0
 c004b12:	667b      	str	r3, [r7, #100]	@ 0x64
 c004b14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 c004b18:	460b      	mov	r3, r1
 c004b1a:	4313      	orrs	r3, r2
 c004b1c:	d046      	beq.n	c004bac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c004b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004b26:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c004b2a:	d028      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 c004b2c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c004b30:	d821      	bhi.n	c004b76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 c004b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004b36:	d022      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 c004b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004b3c:	d81b      	bhi.n	c004b76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 c004b3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c004b42:	d01c      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 c004b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c004b48:	d815      	bhi.n	c004b76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 c004b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004b4e:	d008      	beq.n	c004b62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 c004b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004b54:	d80f      	bhi.n	c004b76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 c004b56:	2b00      	cmp	r3, #0
 c004b58:	d011      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 c004b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c004b5e:	d00e      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 c004b60:	e009      	b.n	c004b76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004b66:	3308      	adds	r3, #8
 c004b68:	4618      	mov	r0, r3
 c004b6a:	f002 f90b 	bl	c006d84 <RCCEx_PLL2_Config>
 c004b6e:	4603      	mov	r3, r0
 c004b70:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004b74:	e004      	b.n	c004b80 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c004b76:	2301      	movs	r3, #1
 c004b78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004b7c:	e000      	b.n	c004b80 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 c004b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004b80:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004b84:	2b00      	cmp	r3, #0
 c004b86:	d10d      	bne.n	c004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c004b88:	4b5a      	ldr	r3, [pc, #360]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004b8e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 c004b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004b9a:	4a56      	ldr	r2, [pc, #344]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004b9c:	430b      	orrs	r3, r1
 c004b9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c004ba2:	e003      	b.n	c004bac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004ba4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004ba8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 c004bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004bb4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 c004bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 c004bba:	2300      	movs	r3, #0
 c004bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 c004bbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 c004bc2:	460b      	mov	r3, r1
 c004bc4:	4313      	orrs	r3, r2
 c004bc6:	d03f      	beq.n	c004c48 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 c004bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c004bd0:	2b04      	cmp	r3, #4
 c004bd2:	d81e      	bhi.n	c004c12 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 c004bd4:	a201      	add	r2, pc, #4	@ (adr r2, c004bdc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 c004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004bda:	bf00      	nop
 c004bdc:	0c004c1b 	.word	0x0c004c1b
 c004be0:	0c004bf1 	.word	0x0c004bf1
 c004be4:	0c004bff 	.word	0x0c004bff
 c004be8:	0c004c1b 	.word	0x0c004c1b
 c004bec:	0c004c1b 	.word	0x0c004c1b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004bf0:	4b40      	ldr	r3, [pc, #256]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004bf4:	4a3f      	ldr	r2, [pc, #252]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004bfa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c004bfc:	e00e      	b.n	c004c1c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004c02:	332c      	adds	r3, #44	@ 0x2c
 c004c04:	4618      	mov	r0, r3
 c004c06:	f002 f955 	bl	c006eb4 <RCCEx_PLL3_Config>
 c004c0a:	4603      	mov	r3, r0
 c004c0c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004c10:	e004      	b.n	c004c1c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c004c12:	2301      	movs	r3, #1
 c004c14:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004c18:	e000      	b.n	c004c1c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 c004c1a:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004c1c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004c20:	2b00      	cmp	r3, #0
 c004c22:	d10d      	bne.n	c004c40 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 c004c24:	4b33      	ldr	r3, [pc, #204]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004c26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004c2a:	f023 0107 	bic.w	r1, r3, #7
 c004c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c004c36:	4a2f      	ldr	r2, [pc, #188]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004c38:	430b      	orrs	r3, r1
 c004c3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004c3e:	e003      	b.n	c004c48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004c40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004c44:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 c004c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004c50:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 c004c54:	653b      	str	r3, [r7, #80]	@ 0x50
 c004c56:	2300      	movs	r3, #0
 c004c58:	657b      	str	r3, [r7, #84]	@ 0x54
 c004c5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 c004c5e:	460b      	mov	r3, r1
 c004c60:	4313      	orrs	r3, r2
 c004c62:	d04d      	beq.n	c004d00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 c004c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c004c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c004c70:	d028      	beq.n	c004cc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 c004c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c004c76:	d821      	bhi.n	c004cbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 c004c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c004c7c:	d024      	beq.n	c004cc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 c004c7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c004c82:	d81b      	bhi.n	c004cbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 c004c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c004c88:	d00e      	beq.n	c004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 c004c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c004c8e:	d815      	bhi.n	c004cbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 c004c90:	2b00      	cmp	r3, #0
 c004c92:	d01b      	beq.n	c004ccc <HAL_RCCEx_PeriphCLKConfig+0x618>
 c004c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c004c98:	d110      	bne.n	c004cbc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004c9a:	4b16      	ldr	r3, [pc, #88]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004c9e:	4a15      	ldr	r2, [pc, #84]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004ca4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c004ca6:	e012      	b.n	c004cce <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004cac:	332c      	adds	r3, #44	@ 0x2c
 c004cae:	4618      	mov	r0, r3
 c004cb0:	f002 f900 	bl	c006eb4 <RCCEx_PLL3_Config>
 c004cb4:	4603      	mov	r3, r0
 c004cb6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004cba:	e008      	b.n	c004cce <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c004cbc:	2301      	movs	r3, #1
 c004cbe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004cc2:	e004      	b.n	c004cce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 c004cc4:	bf00      	nop
 c004cc6:	e002      	b.n	c004cce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 c004cc8:	bf00      	nop
 c004cca:	e000      	b.n	c004cce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 c004ccc:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004cce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004cd2:	2b00      	cmp	r3, #0
 c004cd4:	d110      	bne.n	c004cf8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 c004cd6:	4b07      	ldr	r3, [pc, #28]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004cdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c004ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c004ce8:	4a02      	ldr	r2, [pc, #8]	@ (c004cf4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 c004cea:	430b      	orrs	r3, r1
 c004cec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c004cf0:	e006      	b.n	c004d00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 c004cf2:	bf00      	nop
 c004cf4:	56020c00 	.word	0x56020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004cf8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004cfc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c004d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004d08:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 c004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 c004d0e:	2300      	movs	r3, #0
 c004d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c004d12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 c004d16:	460b      	mov	r3, r1
 c004d18:	4313      	orrs	r3, r2
 c004d1a:	f000 80b5 	beq.w	c004e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 c004d1e:	2300      	movs	r3, #0
 c004d20:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004d24:	4b9d      	ldr	r3, [pc, #628]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004d2a:	f003 0304 	and.w	r3, r3, #4
 c004d2e:	2b00      	cmp	r3, #0
 c004d30:	d113      	bne.n	c004d5a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c004d32:	4b9a      	ldr	r3, [pc, #616]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004d38:	4a98      	ldr	r2, [pc, #608]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004d3a:	f043 0304 	orr.w	r3, r3, #4
 c004d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c004d42:	4b96      	ldr	r3, [pc, #600]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004d48:	f003 0304 	and.w	r3, r3, #4
 c004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 c004d50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 c004d54:	2301      	movs	r3, #1
 c004d56:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c004d5a:	4b91      	ldr	r3, [pc, #580]	@ (c004fa0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004d5e:	4a90      	ldr	r2, [pc, #576]	@ (c004fa0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004d60:	f043 0301 	orr.w	r3, r3, #1
 c004d64:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004d66:	f7fc fd93 	bl	c001890 <HAL_GetTick>
 c004d6a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c004d6e:	e00b      	b.n	c004d88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c004d70:	f7fc fd8e 	bl	c001890 <HAL_GetTick>
 c004d74:	4602      	mov	r2, r0
 c004d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004d7a:	1ad3      	subs	r3, r2, r3
 c004d7c:	2b02      	cmp	r3, #2
 c004d7e:	d903      	bls.n	c004d88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 c004d80:	2303      	movs	r3, #3
 c004d82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004d86:	e005      	b.n	c004d94 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c004d88:	4b85      	ldr	r3, [pc, #532]	@ (c004fa0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004d8c:	f003 0301 	and.w	r3, r3, #1
 c004d90:	2b00      	cmp	r3, #0
 c004d92:	d0ed      	beq.n	c004d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 c004d94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004d98:	2b00      	cmp	r3, #0
 c004d9a:	d165      	bne.n	c004e68 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c004d9c:	4b7f      	ldr	r3, [pc, #508]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c004da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004dae:	2b00      	cmp	r3, #0
 c004db0:	d023      	beq.n	c004dfa <HAL_RCCEx_PeriphCLKConfig+0x746>
 c004db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004db6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 c004dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004dbe:	4293      	cmp	r3, r2
 c004dc0:	d01b      	beq.n	c004dfa <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c004dc2:	4b76      	ldr	r3, [pc, #472]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c004dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c004dd0:	4b72      	ldr	r3, [pc, #456]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004dd6:	4a71      	ldr	r2, [pc, #452]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c004de0:	4b6e      	ldr	r3, [pc, #440]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004de6:	4a6d      	ldr	r2, [pc, #436]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c004dec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c004df0:	4a6a      	ldr	r2, [pc, #424]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004dfe:	f003 0301 	and.w	r3, r3, #1
 c004e02:	2b00      	cmp	r3, #0
 c004e04:	d019      	beq.n	c004e3a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004e06:	f7fc fd43 	bl	c001890 <HAL_GetTick>
 c004e0a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004e0e:	e00d      	b.n	c004e2c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004e10:	f7fc fd3e 	bl	c001890 <HAL_GetTick>
 c004e14:	4602      	mov	r2, r0
 c004e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004e1a:	1ad2      	subs	r2, r2, r3
 c004e1c:	f241 3388 	movw	r3, #5000	@ 0x1388
 c004e20:	429a      	cmp	r2, r3
 c004e22:	d903      	bls.n	c004e2c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 c004e24:	2303      	movs	r3, #3
 c004e26:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 c004e2a:	e006      	b.n	c004e3a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004e2c:	4b5b      	ldr	r3, [pc, #364]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004e32:	f003 0302 	and.w	r3, r3, #2
 c004e36:	2b00      	cmp	r3, #0
 c004e38:	d0ea      	beq.n	c004e10 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 c004e3a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004e3e:	2b00      	cmp	r3, #0
 c004e40:	d10d      	bne.n	c004e5e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c004e42:	4b56      	ldr	r3, [pc, #344]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004e48:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c004e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004e50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 c004e54:	4a51      	ldr	r2, [pc, #324]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004e56:	430b      	orrs	r3, r1
 c004e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c004e5c:	e008      	b.n	c004e70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c004e5e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004e62:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 c004e66:	e003      	b.n	c004e70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004e68:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004e6c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004e70:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 c004e74:	2b01      	cmp	r3, #1
 c004e76:	d107      	bne.n	c004e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c004e78:	4b48      	ldr	r3, [pc, #288]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004e7e:	4a47      	ldr	r2, [pc, #284]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004e80:	f023 0304 	bic.w	r3, r3, #4
 c004e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 c004e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004e90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 c004e94:	643b      	str	r3, [r7, #64]	@ 0x40
 c004e96:	2300      	movs	r3, #0
 c004e98:	647b      	str	r3, [r7, #68]	@ 0x44
 c004e9a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 c004e9e:	460b      	mov	r3, r1
 c004ea0:	4313      	orrs	r3, r2
 c004ea2:	d042      	beq.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 c004ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c004eac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c004eb0:	d022      	beq.n	c004ef8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 c004eb2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c004eb6:	d81b      	bhi.n	c004ef0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 c004eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c004ebc:	d011      	beq.n	c004ee2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 c004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c004ec2:	d815      	bhi.n	c004ef0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 c004ec4:	2b00      	cmp	r3, #0
 c004ec6:	d019      	beq.n	c004efc <HAL_RCCEx_PeriphCLKConfig+0x848>
 c004ec8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c004ecc:	d110      	bne.n	c004ef0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004ed2:	3308      	adds	r3, #8
 c004ed4:	4618      	mov	r0, r3
 c004ed6:	f001 ff55 	bl	c006d84 <RCCEx_PLL2_Config>
 c004eda:	4603      	mov	r3, r0
 c004edc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004ee0:	e00d      	b.n	c004efe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c004ee2:	4b2e      	ldr	r3, [pc, #184]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004ee6:	4a2d      	ldr	r2, [pc, #180]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c004eec:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c004eee:	e006      	b.n	c004efe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c004ef0:	2301      	movs	r3, #1
 c004ef2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004ef6:	e002      	b.n	c004efe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 c004ef8:	bf00      	nop
 c004efa:	e000      	b.n	c004efe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 c004efc:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004efe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004f02:	2b00      	cmp	r3, #0
 c004f04:	d10d      	bne.n	c004f22 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 c004f06:	4b25      	ldr	r3, [pc, #148]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004f0c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 c004f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c004f18:	4a20      	ldr	r2, [pc, #128]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004f1a:	430b      	orrs	r3, r1
 c004f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 c004f20:	e003      	b.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004f22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004f26:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c004f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004f32:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 c004f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 c004f38:	2300      	movs	r3, #0
 c004f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c004f3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 c004f40:	460b      	mov	r3, r1
 c004f42:	4313      	orrs	r3, r2
 c004f44:	d032      	beq.n	c004fac <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c004f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c004f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004f52:	d00b      	beq.n	c004f6c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 c004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004f58:	d804      	bhi.n	c004f64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 c004f5a:	2b00      	cmp	r3, #0
 c004f5c:	d008      	beq.n	c004f70 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 c004f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c004f62:	d007      	beq.n	c004f74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 c004f64:	2301      	movs	r3, #1
 c004f66:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c004f6a:	e004      	b.n	c004f76 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 c004f6c:	bf00      	nop
 c004f6e:	e002      	b.n	c004f76 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 c004f70:	bf00      	nop
 c004f72:	e000      	b.n	c004f76 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 c004f74:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004f76:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004f7a:	2b00      	cmp	r3, #0
 c004f7c:	d112      	bne.n	c004fa4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c004f7e:	4b07      	ldr	r3, [pc, #28]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004f84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c004f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c004f90:	4a02      	ldr	r2, [pc, #8]	@ (c004f9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 c004f92:	430b      	orrs	r3, r1
 c004f94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004f98:	e008      	b.n	c004fac <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 c004f9a:	bf00      	nop
 c004f9c:	56020c00 	.word	0x56020c00
 c004fa0:	56020800 	.word	0x56020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004fa4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c004fa8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 c004fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004fb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 c004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 c004fba:	2300      	movs	r3, #0
 c004fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 c004fbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 c004fc2:	460b      	mov	r3, r1
 c004fc4:	4313      	orrs	r3, r2
 c004fc6:	d019      	beq.n	c004ffc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 c004fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004fcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c004fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004fd4:	d105      	bne.n	c004fe2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004fd6:	4b88      	ldr	r3, [pc, #544]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004fda:	4a87      	ldr	r2, [pc, #540]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c004fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004fe0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 c004fe2:	4b85      	ldr	r3, [pc, #532]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c004fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004fe8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 c004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c004ff4:	4a80      	ldr	r2, [pc, #512]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c004ff6:	430b      	orrs	r3, r1
 c004ff8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c004ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005004:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 c005008:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00500a:	2300      	movs	r3, #0
 c00500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c00500e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 c005012:	460b      	mov	r3, r1
 c005014:	4313      	orrs	r3, r2
 c005016:	d00c      	beq.n	c005032 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c005018:	4b77      	ldr	r3, [pc, #476]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c00501a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00501e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c005022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00502a:	4973      	ldr	r1, [pc, #460]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c00502c:	4313      	orrs	r3, r2
 c00502e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c005032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00503a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 c00503e:	623b      	str	r3, [r7, #32]
 c005040:	2300      	movs	r3, #0
 c005042:	627b      	str	r3, [r7, #36]	@ 0x24
 c005044:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c005048:	460b      	mov	r3, r1
 c00504a:	4313      	orrs	r3, r2
 c00504c:	d00c      	beq.n	c005068 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c00504e:	4b6a      	ldr	r3, [pc, #424]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005054:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 c005058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00505c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 c005060:	4965      	ldr	r1, [pc, #404]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005062:	4313      	orrs	r3, r2
 c005064:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005070:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 c005074:	61bb      	str	r3, [r7, #24]
 c005076:	2300      	movs	r3, #0
 c005078:	61fb      	str	r3, [r7, #28]
 c00507a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c00507e:	460b      	mov	r3, r1
 c005080:	4313      	orrs	r3, r2
 c005082:	d00c      	beq.n	c00509e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c005084:	4b5c      	ldr	r3, [pc, #368]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00508a:	f023 0218 	bic.w	r2, r3, #24
 c00508e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005092:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 c005096:	4958      	ldr	r1, [pc, #352]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005098:	4313      	orrs	r3, r2
 c00509a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00509e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0050a6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 c0050aa:	613b      	str	r3, [r7, #16]
 c0050ac:	2300      	movs	r3, #0
 c0050ae:	617b      	str	r3, [r7, #20]
 c0050b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c0050b4:	460b      	mov	r3, r1
 c0050b6:	4313      	orrs	r3, r2
 c0050b8:	d032      	beq.n	c005120 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 c0050ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0050be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c0050c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c0050c6:	d105      	bne.n	c0050d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0050c8:	4b4b      	ldr	r3, [pc, #300]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0050cc:	4a4a      	ldr	r2, [pc, #296]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0050ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c0050d2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 c0050d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0050d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c0050dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c0050e0:	d108      	bne.n	c0050f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0050e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0050e6:	3308      	adds	r3, #8
 c0050e8:	4618      	mov	r0, r3
 c0050ea:	f001 fe4b 	bl	c006d84 <RCCEx_PLL2_Config>
 c0050ee:	4603      	mov	r3, r0
 c0050f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 c0050f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c0050f8:	2b00      	cmp	r3, #0
 c0050fa:	d10d      	bne.n	c005118 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c0050fc:	4b3e      	ldr	r3, [pc, #248]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0050fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c005102:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00510a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c00510e:	493a      	ldr	r1, [pc, #232]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005110:	4313      	orrs	r3, r2
 c005112:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 c005116:	e003      	b.n	c005120 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005118:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c00511c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 c005120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005128:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 c00512c:	60bb      	str	r3, [r7, #8]
 c00512e:	2300      	movs	r3, #0
 c005130:	60fb      	str	r3, [r7, #12]
 c005132:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c005136:	460b      	mov	r3, r1
 c005138:	4313      	orrs	r3, r2
 c00513a:	d03a      	beq.n	c0051b2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 c00513c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c005140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c005144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c005148:	d00e      	beq.n	c005168 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 c00514a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00514e:	d815      	bhi.n	c00517c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 c005150:	2b00      	cmp	r3, #0
 c005152:	d017      	beq.n	c005184 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 c005154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c005158:	d110      	bne.n	c00517c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00515a:	4b27      	ldr	r3, [pc, #156]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c00515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00515e:	4a26      	ldr	r2, [pc, #152]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c005164:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c005166:	e00e      	b.n	c005186 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00516c:	3308      	adds	r3, #8
 c00516e:	4618      	mov	r0, r3
 c005170:	f001 fe08 	bl	c006d84 <RCCEx_PLL2_Config>
 c005174:	4603      	mov	r3, r0
 c005176:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c00517a:	e004      	b.n	c005186 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 c00517c:	2301      	movs	r3, #1
 c00517e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 c005182:	e000      	b.n	c005186 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 c005184:	bf00      	nop
    }
    if (ret == HAL_OK)
 c005186:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c00518a:	2b00      	cmp	r3, #0
 c00518c:	d10d      	bne.n	c0051aa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 c00518e:	4b1a      	ldr	r3, [pc, #104]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c005190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005194:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 c005198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00519c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c0051a0:	4915      	ldr	r1, [pc, #84]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0051a2:	4313      	orrs	r3, r2
 c0051a4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 c0051a8:	e003      	b.n	c0051b2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0051aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 c0051ae:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 c0051b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0051ba:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 c0051be:	603b      	str	r3, [r7, #0]
 c0051c0:	2300      	movs	r3, #0
 c0051c2:	607b      	str	r3, [r7, #4]
 c0051c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 c0051c8:	460b      	mov	r3, r1
 c0051ca:	4313      	orrs	r3, r2
 c0051cc:	d00c      	beq.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 c0051ce:	4b0a      	ldr	r3, [pc, #40]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0051d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0051d4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 c0051d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0051dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c0051e0:	4905      	ldr	r1, [pc, #20]	@ (c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 c0051e2:	4313      	orrs	r3, r2
 c0051e4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 c0051e8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 c0051ec:	4618      	mov	r0, r3
 c0051ee:	37e0      	adds	r7, #224	@ 0xe0
 c0051f0:	46bd      	mov	sp, r7
 c0051f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c0051f6:	bf00      	nop
 c0051f8:	56020c00 	.word	0x56020c00

0c0051fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 c0051fc:	b480      	push	{r7}
 c0051fe:	b089      	sub	sp, #36	@ 0x24
 c005200:	af00      	add	r7, sp, #0
 c005202:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 c005204:	4ba6      	ldr	r3, [pc, #664]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c005208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00520c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00520e:	4ba4      	ldr	r3, [pc, #656]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c005212:	f003 0303 	and.w	r3, r3, #3
 c005216:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c005218:	4ba1      	ldr	r3, [pc, #644]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00521c:	0a1b      	lsrs	r3, r3, #8
 c00521e:	f003 030f 	and.w	r3, r3, #15
 c005222:	3301      	adds	r3, #1
 c005224:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c005226:	4b9e      	ldr	r3, [pc, #632]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00522a:	091b      	lsrs	r3, r3, #4
 c00522c:	f003 0301 	and.w	r3, r3, #1
 c005230:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c005232:	4b9b      	ldr	r3, [pc, #620]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c005236:	08db      	lsrs	r3, r3, #3
 c005238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00523c:	68fa      	ldr	r2, [r7, #12]
 c00523e:	fb02 f303 	mul.w	r3, r2, r3
 c005242:	ee07 3a90 	vmov	s15, r3
 c005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00524a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 c00524e:	697b      	ldr	r3, [r7, #20]
 c005250:	2b03      	cmp	r3, #3
 c005252:	d062      	beq.n	c00531a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 c005254:	697b      	ldr	r3, [r7, #20]
 c005256:	2b03      	cmp	r3, #3
 c005258:	f200 8081 	bhi.w	c00535e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 c00525c:	697b      	ldr	r3, [r7, #20]
 c00525e:	2b01      	cmp	r3, #1
 c005260:	d024      	beq.n	c0052ac <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 c005262:	697b      	ldr	r3, [r7, #20]
 c005264:	2b02      	cmp	r3, #2
 c005266:	d17a      	bne.n	c00535e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c005268:	693b      	ldr	r3, [r7, #16]
 c00526a:	ee07 3a90 	vmov	s15, r3
 c00526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005272:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c0054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00527a:	4b89      	ldr	r3, [pc, #548]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c005282:	ee07 3a90 	vmov	s15, r3
 c005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00528a:	ed97 6a02 	vldr	s12, [r7, #8]
 c00528e:	eddf 5a86 	vldr	s11, [pc, #536]	@ c0054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00529a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0052a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0052aa:	e08f      	b.n	c0053cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c0052ac:	4b7c      	ldr	r3, [pc, #496]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0052ae:	689b      	ldr	r3, [r3, #8]
 c0052b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0052b4:	2b00      	cmp	r3, #0
 c0052b6:	d005      	beq.n	c0052c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 c0052b8:	4b79      	ldr	r3, [pc, #484]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0052ba:	689b      	ldr	r3, [r3, #8]
 c0052bc:	0f1b      	lsrs	r3, r3, #28
 c0052be:	f003 030f 	and.w	r3, r3, #15
 c0052c2:	e006      	b.n	c0052d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 c0052c4:	4b76      	ldr	r3, [pc, #472]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0052c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0052ca:	041b      	lsls	r3, r3, #16
 c0052cc:	0f1b      	lsrs	r3, r3, #28
 c0052ce:	f003 030f 	and.w	r3, r3, #15
 c0052d2:	4a76      	ldr	r2, [pc, #472]	@ (c0054ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c0052d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0052d8:	ee07 3a90 	vmov	s15, r3
 c0052dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0052e0:	693b      	ldr	r3, [r7, #16]
 c0052e2:	ee07 3a90 	vmov	s15, r3
 c0052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c0052ee:	69bb      	ldr	r3, [r7, #24]
 c0052f0:	ee07 3a90 	vmov	s15, r3
 c0052f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0052f8:	ed97 6a02 	vldr	s12, [r7, #8]
 c0052fc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c0054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c005300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c005304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c005308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00530c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c005310:	ee67 7a27 	vmul.f32	s15, s14, s15
 c005314:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c005318:	e058      	b.n	c0053cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00531a:	693b      	ldr	r3, [r7, #16]
 c00531c:	ee07 3a90 	vmov	s15, r3
 c005320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005324:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c0054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c005328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00532c:	4b5c      	ldr	r3, [pc, #368]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00532e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c005330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c005334:	ee07 3a90 	vmov	s15, r3
 c005338:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00533c:	ed97 6a02 	vldr	s12, [r7, #8]
 c005340:	eddf 5a59 	vldr	s11, [pc, #356]	@ c0054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c005344:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c005348:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00534c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005350:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c005354:	ee67 7a27 	vmul.f32	s15, s14, s15
 c005358:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00535c:	e036      	b.n	c0053cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00535e:	4b50      	ldr	r3, [pc, #320]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005360:	689b      	ldr	r3, [r3, #8]
 c005362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005366:	2b00      	cmp	r3, #0
 c005368:	d005      	beq.n	c005376 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 c00536a:	4b4d      	ldr	r3, [pc, #308]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00536c:	689b      	ldr	r3, [r3, #8]
 c00536e:	0f1b      	lsrs	r3, r3, #28
 c005370:	f003 030f 	and.w	r3, r3, #15
 c005374:	e006      	b.n	c005384 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 c005376:	4b4a      	ldr	r3, [pc, #296]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00537c:	041b      	lsls	r3, r3, #16
 c00537e:	0f1b      	lsrs	r3, r3, #28
 c005380:	f003 030f 	and.w	r3, r3, #15
 c005384:	4a49      	ldr	r2, [pc, #292]	@ (c0054ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c005386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00538a:	ee07 3a90 	vmov	s15, r3
 c00538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005392:	693b      	ldr	r3, [r7, #16]
 c005394:	ee07 3a90 	vmov	s15, r3
 c005398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00539c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c0053a0:	69bb      	ldr	r3, [r7, #24]
 c0053a2:	ee07 3a90 	vmov	s15, r3
 c0053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 c0053ae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c0054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c0053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c0053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c0053ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c0053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0053c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0053ca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 c0053cc:	4b34      	ldr	r3, [pc, #208]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0053d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c0053d4:	2b00      	cmp	r3, #0
 c0053d6:	d017      	beq.n	c005408 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c0053d8:	4b31      	ldr	r3, [pc, #196]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0053dc:	0a5b      	lsrs	r3, r3, #9
 c0053de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0053e2:	ee07 3a90 	vmov	s15, r3
 c0053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 c0053ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0053ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c0053f2:	edd7 6a07 	vldr	s13, [r7, #28]
 c0053f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0053fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0053fe:	ee17 2a90 	vmov	r2, s15
 c005402:	687b      	ldr	r3, [r7, #4]
 c005404:	601a      	str	r2, [r3, #0]
 c005406:	e002      	b.n	c00540e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 c005408:	687b      	ldr	r3, [r7, #4]
 c00540a:	2200      	movs	r2, #0
 c00540c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 c00540e:	4b24      	ldr	r3, [pc, #144]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c005412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c005416:	2b00      	cmp	r3, #0
 c005418:	d017      	beq.n	c00544a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00541a:	4b21      	ldr	r3, [pc, #132]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00541c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00541e:	0c1b      	lsrs	r3, r3, #16
 c005420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c005424:	ee07 3a90 	vmov	s15, r3
 c005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 c00542c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c005430:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c005434:	edd7 6a07 	vldr	s13, [r7, #28]
 c005438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00543c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c005440:	ee17 2a90 	vmov	r2, s15
 c005444:	687b      	ldr	r3, [r7, #4]
 c005446:	605a      	str	r2, [r3, #4]
 c005448:	e002      	b.n	c005450 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 c00544a:	687b      	ldr	r3, [r7, #4]
 c00544c:	2200      	movs	r2, #0
 c00544e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 c005450:	4b13      	ldr	r3, [pc, #76]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c005454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c005458:	2b00      	cmp	r3, #0
 c00545a:	d017      	beq.n	c00548c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00545c:	4b10      	ldr	r3, [pc, #64]	@ (c0054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00545e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c005460:	0e1b      	lsrs	r3, r3, #24
 c005462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c005466:	ee07 3a90 	vmov	s15, r3
 c00546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 c00546e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c005472:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c005476:	edd7 6a07 	vldr	s13, [r7, #28]
 c00547a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00547e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c005482:	ee17 2a90 	vmov	r2, s15
 c005486:	687b      	ldr	r3, [r7, #4]
 c005488:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 c00548a:	e002      	b.n	c005492 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 c00548c:	687b      	ldr	r3, [r7, #4]
 c00548e:	2200      	movs	r2, #0
 c005490:	609a      	str	r2, [r3, #8]
}
 c005492:	bf00      	nop
 c005494:	3724      	adds	r7, #36	@ 0x24
 c005496:	46bd      	mov	sp, r7
 c005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00549c:	4770      	bx	lr
 c00549e:	bf00      	nop
 c0054a0:	56020c00 	.word	0x56020c00
 c0054a4:	4b742400 	.word	0x4b742400
 c0054a8:	46000000 	.word	0x46000000
 c0054ac:	0c008384 	.word	0x0c008384

0c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 c0054b0:	b480      	push	{r7}
 c0054b2:	b089      	sub	sp, #36	@ 0x24
 c0054b4:	af00      	add	r7, sp, #0
 c0054b6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 c0054b8:	4ba6      	ldr	r3, [pc, #664]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0054c0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 c0054c2:	4ba4      	ldr	r3, [pc, #656]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0054c6:	f003 0303 	and.w	r3, r3, #3
 c0054ca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 c0054cc:	4ba1      	ldr	r3, [pc, #644]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0054d0:	0a1b      	lsrs	r3, r3, #8
 c0054d2:	f003 030f 	and.w	r3, r3, #15
 c0054d6:	3301      	adds	r3, #1
 c0054d8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 c0054da:	4b9e      	ldr	r3, [pc, #632]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0054de:	091b      	lsrs	r3, r3, #4
 c0054e0:	f003 0301 	and.w	r3, r3, #1
 c0054e4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 c0054e6:	4b9b      	ldr	r3, [pc, #620]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c0054ea:	08db      	lsrs	r3, r3, #3
 c0054ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0054f0:	68fa      	ldr	r2, [r7, #12]
 c0054f2:	fb02 f303 	mul.w	r3, r2, r3
 c0054f6:	ee07 3a90 	vmov	s15, r3
 c0054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0054fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 c005502:	697b      	ldr	r3, [r7, #20]
 c005504:	2b03      	cmp	r3, #3
 c005506:	d062      	beq.n	c0055ce <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 c005508:	697b      	ldr	r3, [r7, #20]
 c00550a:	2b03      	cmp	r3, #3
 c00550c:	f200 8081 	bhi.w	c005612 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 c005510:	697b      	ldr	r3, [r7, #20]
 c005512:	2b01      	cmp	r3, #1
 c005514:	d024      	beq.n	c005560 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 c005516:	697b      	ldr	r3, [r7, #20]
 c005518:	2b02      	cmp	r3, #2
 c00551a:	d17a      	bne.n	c005612 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00551c:	693b      	ldr	r3, [r7, #16]
 c00551e:	ee07 3a90 	vmov	s15, r3
 c005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005526:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c005758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c00552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00552e:	4b89      	ldr	r3, [pc, #548]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c005536:	ee07 3a90 	vmov	s15, r3
 c00553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00553e:	ed97 6a02 	vldr	s12, [r7, #8]
 c005542:	eddf 5a86 	vldr	s11, [pc, #536]	@ c00575c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00555a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00555e:	e08f      	b.n	c005680 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c005560:	4b7c      	ldr	r3, [pc, #496]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005562:	689b      	ldr	r3, [r3, #8]
 c005564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005568:	2b00      	cmp	r3, #0
 c00556a:	d005      	beq.n	c005578 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 c00556c:	4b79      	ldr	r3, [pc, #484]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00556e:	689b      	ldr	r3, [r3, #8]
 c005570:	0f1b      	lsrs	r3, r3, #28
 c005572:	f003 030f 	and.w	r3, r3, #15
 c005576:	e006      	b.n	c005586 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 c005578:	4b76      	ldr	r3, [pc, #472]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00557a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00557e:	041b      	lsls	r3, r3, #16
 c005580:	0f1b      	lsrs	r3, r3, #28
 c005582:	f003 030f 	and.w	r3, r3, #15
 c005586:	4a76      	ldr	r2, [pc, #472]	@ (c005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c005588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00558c:	ee07 3a90 	vmov	s15, r3
 c005590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005594:	693b      	ldr	r3, [r7, #16]
 c005596:	ee07 3a90 	vmov	s15, r3
 c00559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c0055a2:	69bb      	ldr	r3, [r7, #24]
 c0055a4:	ee07 3a90 	vmov	s15, r3
 c0055a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0055ac:	ed97 6a02 	vldr	s12, [r7, #8]
 c0055b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c00575c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c0055b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c0055b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c0055bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0055c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c0055c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0055c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0055cc:	e058      	b.n	c005680 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c0055ce:	693b      	ldr	r3, [r7, #16]
 c0055d0:	ee07 3a90 	vmov	s15, r3
 c0055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0055d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c005758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c0055dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0055e0:	4b5c      	ldr	r3, [pc, #368]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0055e8:	ee07 3a90 	vmov	s15, r3
 c0055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c0055f0:	ed97 6a02 	vldr	s12, [r7, #8]
 c0055f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ c00575c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c0055f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c0055fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c005600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005604:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00560c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c005610:	e036      	b.n	c005680 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c005612:	4b50      	ldr	r3, [pc, #320]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005614:	689b      	ldr	r3, [r3, #8]
 c005616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00561a:	2b00      	cmp	r3, #0
 c00561c:	d005      	beq.n	c00562a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 c00561e:	4b4d      	ldr	r3, [pc, #308]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005620:	689b      	ldr	r3, [r3, #8]
 c005622:	0f1b      	lsrs	r3, r3, #28
 c005624:	f003 030f 	and.w	r3, r3, #15
 c005628:	e006      	b.n	c005638 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 c00562a:	4b4a      	ldr	r3, [pc, #296]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00562c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005630:	041b      	lsls	r3, r3, #16
 c005632:	0f1b      	lsrs	r3, r3, #28
 c005634:	f003 030f 	and.w	r3, r3, #15
 c005638:	4a49      	ldr	r2, [pc, #292]	@ (c005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c00563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00563e:	ee07 3a90 	vmov	s15, r3
 c005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005646:	693b      	ldr	r3, [r7, #16]
 c005648:	ee07 3a90 	vmov	s15, r3
 c00564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c005654:	69bb      	ldr	r3, [r7, #24]
 c005656:	ee07 3a90 	vmov	s15, r3
 c00565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00565e:	ed97 6a02 	vldr	s12, [r7, #8]
 c005662:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c00575c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00566e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00567a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00567e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 c005680:	4b34      	ldr	r3, [pc, #208]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c005684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c005688:	2b00      	cmp	r3, #0
 c00568a:	d017      	beq.n	c0056bc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00568c:	4b31      	ldr	r3, [pc, #196]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00568e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c005690:	0a5b      	lsrs	r3, r3, #9
 c005692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c005696:	ee07 3a90 	vmov	s15, r3
 c00569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 c00569e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0056a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0056a6:	edd7 6a07 	vldr	s13, [r7, #28]
 c0056aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0056ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0056b2:	ee17 2a90 	vmov	r2, s15
 c0056b6:	687b      	ldr	r3, [r7, #4]
 c0056b8:	601a      	str	r2, [r3, #0]
 c0056ba:	e002      	b.n	c0056c2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 c0056bc:	687b      	ldr	r3, [r7, #4]
 c0056be:	2200      	movs	r2, #0
 c0056c0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 c0056c2:	4b24      	ldr	r3, [pc, #144]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0056ca:	2b00      	cmp	r3, #0
 c0056cc:	d017      	beq.n	c0056fe <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0056ce:	4b21      	ldr	r3, [pc, #132]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0056d2:	0c1b      	lsrs	r3, r3, #16
 c0056d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0056d8:	ee07 3a90 	vmov	s15, r3
 c0056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 c0056e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0056e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0056e8:	edd7 6a07 	vldr	s13, [r7, #28]
 c0056ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0056f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0056f4:	ee17 2a90 	vmov	r2, s15
 c0056f8:	687b      	ldr	r3, [r7, #4]
 c0056fa:	605a      	str	r2, [r3, #4]
 c0056fc:	e002      	b.n	c005704 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 c0056fe:	687b      	ldr	r3, [r7, #4]
 c005700:	2200      	movs	r2, #0
 c005702:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 c005704:	4b13      	ldr	r3, [pc, #76]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c005708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c00570c:	2b00      	cmp	r3, #0
 c00570e:	d017      	beq.n	c005740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c005710:	4b10      	ldr	r3, [pc, #64]	@ (c005754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c005714:	0e1b      	lsrs	r3, r3, #24
 c005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00571a:	ee07 3a90 	vmov	s15, r3
 c00571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 c005722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c005726:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00572a:	edd7 6a07 	vldr	s13, [r7, #28]
 c00572e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c005732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c005736:	ee17 2a90 	vmov	r2, s15
 c00573a:	687b      	ldr	r3, [r7, #4]
 c00573c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 c00573e:	e002      	b.n	c005746 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 c005740:	687b      	ldr	r3, [r7, #4]
 c005742:	2200      	movs	r2, #0
 c005744:	609a      	str	r2, [r3, #8]
}
 c005746:	bf00      	nop
 c005748:	3724      	adds	r7, #36	@ 0x24
 c00574a:	46bd      	mov	sp, r7
 c00574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005750:	4770      	bx	lr
 c005752:	bf00      	nop
 c005754:	56020c00 	.word	0x56020c00
 c005758:	4b742400 	.word	0x4b742400
 c00575c:	46000000 	.word	0x46000000
 c005760:	0c008384 	.word	0x0c008384

0c005764 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 c005764:	b480      	push	{r7}
 c005766:	b089      	sub	sp, #36	@ 0x24
 c005768:	af00      	add	r7, sp, #0
 c00576a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 c00576c:	4ba6      	ldr	r3, [pc, #664]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00576e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c005774:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 c005776:	4ba4      	ldr	r3, [pc, #656]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00577a:	f003 0303 	and.w	r3, r3, #3
 c00577e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 c005780:	4ba1      	ldr	r3, [pc, #644]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c005784:	0a1b      	lsrs	r3, r3, #8
 c005786:	f003 030f 	and.w	r3, r3, #15
 c00578a:	3301      	adds	r3, #1
 c00578c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 c00578e:	4b9e      	ldr	r3, [pc, #632]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c005792:	091b      	lsrs	r3, r3, #4
 c005794:	f003 0301 	and.w	r3, r3, #1
 c005798:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 c00579a:	4b9b      	ldr	r3, [pc, #620]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00579c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c00579e:	08db      	lsrs	r3, r3, #3
 c0057a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0057a4:	68fa      	ldr	r2, [r7, #12]
 c0057a6:	fb02 f303 	mul.w	r3, r2, r3
 c0057aa:	ee07 3a90 	vmov	s15, r3
 c0057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0057b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 c0057b6:	697b      	ldr	r3, [r7, #20]
 c0057b8:	2b03      	cmp	r3, #3
 c0057ba:	d062      	beq.n	c005882 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 c0057bc:	697b      	ldr	r3, [r7, #20]
 c0057be:	2b03      	cmp	r3, #3
 c0057c0:	f200 8081 	bhi.w	c0058c6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 c0057c4:	697b      	ldr	r3, [r7, #20]
 c0057c6:	2b01      	cmp	r3, #1
 c0057c8:	d024      	beq.n	c005814 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 c0057ca:	697b      	ldr	r3, [r7, #20]
 c0057cc:	2b02      	cmp	r3, #2
 c0057ce:	d17a      	bne.n	c0058c6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c0057d0:	693b      	ldr	r3, [r7, #16]
 c0057d2:	ee07 3a90 	vmov	s15, r3
 c0057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0057da:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c0057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0057e2:	4b89      	ldr	r3, [pc, #548]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c0057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0057ea:	ee07 3a90 	vmov	s15, r3
 c0057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c0057f2:	ed97 6a02 	vldr	s12, [r7, #8]
 c0057f6:	eddf 5a86 	vldr	s11, [pc, #536]	@ c005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c0057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c0057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c005802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00580e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 c005812:	e08f      	b.n	c005934 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c005814:	4b7c      	ldr	r3, [pc, #496]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005816:	689b      	ldr	r3, [r3, #8]
 c005818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00581c:	2b00      	cmp	r3, #0
 c00581e:	d005      	beq.n	c00582c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 c005820:	4b79      	ldr	r3, [pc, #484]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005822:	689b      	ldr	r3, [r3, #8]
 c005824:	0f1b      	lsrs	r3, r3, #28
 c005826:	f003 030f 	and.w	r3, r3, #15
 c00582a:	e006      	b.n	c00583a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 c00582c:	4b76      	ldr	r3, [pc, #472]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00582e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005832:	041b      	lsls	r3, r3, #16
 c005834:	0f1b      	lsrs	r3, r3, #28
 c005836:	f003 030f 	and.w	r3, r3, #15
 c00583a:	4a76      	ldr	r2, [pc, #472]	@ (c005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c00583c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005840:	ee07 3a90 	vmov	s15, r3
 c005844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005848:	693b      	ldr	r3, [r7, #16]
 c00584a:	ee07 3a90 	vmov	s15, r3
 c00584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c005856:	69bb      	ldr	r3, [r7, #24]
 c005858:	ee07 3a90 	vmov	s15, r3
 c00585c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005860:	ed97 6a02 	vldr	s12, [r7, #8]
 c005864:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c005868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00586c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c005870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005874:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c005878:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00587c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c005880:	e058      	b.n	c005934 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c005882:	693b      	ldr	r3, [r7, #16]
 c005884:	ee07 3a90 	vmov	s15, r3
 c005888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00588c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c005890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c005894:	4b5c      	ldr	r3, [pc, #368]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00589c:	ee07 3a90 	vmov	s15, r3
 c0058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c0058a4:	ed97 6a02 	vldr	s12, [r7, #8]
 c0058a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ c005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c0058ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c0058b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c0058b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0058b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c0058bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0058c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0058c4:	e036      	b.n	c005934 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c0058c6:	4b50      	ldr	r3, [pc, #320]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0058c8:	689b      	ldr	r3, [r3, #8]
 c0058ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0058ce:	2b00      	cmp	r3, #0
 c0058d0:	d005      	beq.n	c0058de <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 c0058d2:	4b4d      	ldr	r3, [pc, #308]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0058d4:	689b      	ldr	r3, [r3, #8]
 c0058d6:	0f1b      	lsrs	r3, r3, #28
 c0058d8:	f003 030f 	and.w	r3, r3, #15
 c0058dc:	e006      	b.n	c0058ec <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 c0058de:	4b4a      	ldr	r3, [pc, #296]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0058e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0058e4:	041b      	lsls	r3, r3, #16
 c0058e6:	0f1b      	lsrs	r3, r3, #28
 c0058e8:	f003 030f 	and.w	r3, r3, #15
 c0058ec:	4a49      	ldr	r2, [pc, #292]	@ (c005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c0058ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0058f2:	ee07 3a90 	vmov	s15, r3
 c0058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0058fa:	693b      	ldr	r3, [r7, #16]
 c0058fc:	ee07 3a90 	vmov	s15, r3
 c005900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c005904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c005908:	69bb      	ldr	r3, [r7, #24]
 c00590a:	ee07 3a90 	vmov	s15, r3
 c00590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c005912:	ed97 6a02 	vldr	s12, [r7, #8]
 c005916:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c00591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c005922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c00592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00592e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c005932:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 c005934:	4b34      	ldr	r3, [pc, #208]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c005938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c00593c:	2b00      	cmp	r3, #0
 c00593e:	d017      	beq.n	c005970 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c005940:	4b31      	ldr	r3, [pc, #196]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c005944:	0a5b      	lsrs	r3, r3, #9
 c005946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00594a:	ee07 3a90 	vmov	s15, r3
 c00594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 c005952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c005956:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00595a:	edd7 6a07 	vldr	s13, [r7, #28]
 c00595e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c005962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c005966:	ee17 2a90 	vmov	r2, s15
 c00596a:	687b      	ldr	r3, [r7, #4]
 c00596c:	601a      	str	r2, [r3, #0]
 c00596e:	e002      	b.n	c005976 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 c005970:	687b      	ldr	r3, [r7, #4]
 c005972:	2200      	movs	r2, #0
 c005974:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 c005976:	4b24      	ldr	r3, [pc, #144]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00597a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00597e:	2b00      	cmp	r3, #0
 c005980:	d017      	beq.n	c0059b2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c005982:	4b21      	ldr	r3, [pc, #132]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c005986:	0c1b      	lsrs	r3, r3, #16
 c005988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00598c:	ee07 3a90 	vmov	s15, r3
 c005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 c005994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c005998:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00599c:	edd7 6a07 	vldr	s13, [r7, #28]
 c0059a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0059a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0059a8:	ee17 2a90 	vmov	r2, s15
 c0059ac:	687b      	ldr	r3, [r7, #4]
 c0059ae:	605a      	str	r2, [r3, #4]
 c0059b0:	e002      	b.n	c0059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 c0059b2:	687b      	ldr	r3, [r7, #4]
 c0059b4:	2200      	movs	r2, #0
 c0059b6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 c0059b8:	4b13      	ldr	r3, [pc, #76]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0059ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0059bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c0059c0:	2b00      	cmp	r3, #0
 c0059c2:	d017      	beq.n	c0059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c0059c4:	4b10      	ldr	r3, [pc, #64]	@ (c005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c0059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c0059c8:	0e1b      	lsrs	r3, r3, #24
 c0059ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0059ce:	ee07 3a90 	vmov	s15, r3
 c0059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 c0059d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0059da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c0059de:	edd7 6a07 	vldr	s13, [r7, #28]
 c0059e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0059e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0059ea:	ee17 2a90 	vmov	r2, s15
 c0059ee:	687b      	ldr	r3, [r7, #4]
 c0059f0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 c0059f2:	e002      	b.n	c0059fa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 c0059f4:	687b      	ldr	r3, [r7, #4]
 c0059f6:	2200      	movs	r2, #0
 c0059f8:	609a      	str	r2, [r3, #8]
}
 c0059fa:	bf00      	nop
 c0059fc:	3724      	adds	r7, #36	@ 0x24
 c0059fe:	46bd      	mov	sp, r7
 c005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a04:	4770      	bx	lr
 c005a06:	bf00      	nop
 c005a08:	56020c00 	.word	0x56020c00
 c005a0c:	4b742400 	.word	0x4b742400
 c005a10:	46000000 	.word	0x46000000
 c005a14:	0c008384 	.word	0x0c008384

0c005a18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 c005a18:	b580      	push	{r7, lr}
 c005a1a:	b08e      	sub	sp, #56	@ 0x38
 c005a1c:	af00      	add	r7, sp, #0
 c005a1e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 c005a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005a26:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 c005a2a:	430b      	orrs	r3, r1
 c005a2c:	d145      	bne.n	c005aba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 c005a2e:	4baa      	ldr	r3, [pc, #680]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c005a38:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 c005a3a:	4ba7      	ldr	r3, [pc, #668]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a40:	f003 0302 	and.w	r3, r3, #2
 c005a44:	2b02      	cmp	r3, #2
 c005a46:	d108      	bne.n	c005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 c005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c005a4e:	d104      	bne.n	c005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 c005a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005a54:	637b      	str	r3, [r7, #52]	@ 0x34
 c005a56:	f001 b987 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 c005a5a:	4b9f      	ldr	r3, [pc, #636]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c005a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005a68:	d114      	bne.n	c005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 c005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c005a70:	d110      	bne.n	c005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005a72:	4b99      	ldr	r3, [pc, #612]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c005a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c005a80:	d103      	bne.n	c005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 c005a82:	23fa      	movs	r3, #250	@ 0xfa
 c005a84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005a86:	f001 b96f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 c005a8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005a90:	f001 b96a 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 c005a94:	4b90      	ldr	r3, [pc, #576]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005a96:	681b      	ldr	r3, [r3, #0]
 c005a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c005a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c005aa0:	d107      	bne.n	c005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 c005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c005aa8:	d103      	bne.n	c005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 c005aaa:	4b8c      	ldr	r3, [pc, #560]	@ (c005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 c005aac:	637b      	str	r3, [r7, #52]	@ 0x34
 c005aae:	f001 b95b 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 c005ab2:	2300      	movs	r3, #0
 c005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 c005ab6:	f001 b957 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 c005aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005abe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 c005ac2:	430b      	orrs	r3, r1
 c005ac4:	d151      	bne.n	c005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 c005ac6:	4b84      	ldr	r3, [pc, #528]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c005acc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 c005ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ad4:	2b80      	cmp	r3, #128	@ 0x80
 c005ad6:	d035      	beq.n	c005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 c005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ada:	2b80      	cmp	r3, #128	@ 0x80
 c005adc:	d841      	bhi.n	c005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ae0:	2b60      	cmp	r3, #96	@ 0x60
 c005ae2:	d02a      	beq.n	c005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 c005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ae6:	2b60      	cmp	r3, #96	@ 0x60
 c005ae8:	d83b      	bhi.n	c005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005aec:	2b40      	cmp	r3, #64	@ 0x40
 c005aee:	d009      	beq.n	c005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 c005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005af2:	2b40      	cmp	r3, #64	@ 0x40
 c005af4:	d835      	bhi.n	c005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005af8:	2b00      	cmp	r3, #0
 c005afa:	d00c      	beq.n	c005b16 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 c005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005afe:	2b20      	cmp	r3, #32
 c005b00:	d012      	beq.n	c005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 c005b02:	e02e      	b.n	c005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005b08:	4618      	mov	r0, r3
 c005b0a:	f7ff fb77 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c005b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b12:	f001 b929 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005b16:	f107 0318 	add.w	r3, r7, #24
 c005b1a:	4618      	mov	r0, r3
 c005b1c:	f7ff fcc8 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c005b20:	69bb      	ldr	r3, [r7, #24]
 c005b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b24:	f001 b920 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c005b28:	f107 030c 	add.w	r3, r7, #12
 c005b2c:	4618      	mov	r0, r3
 c005b2e:	f7ff fe19 	bl	c005764 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c005b32:	68fb      	ldr	r3, [r7, #12]
 c005b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b36:	f001 b917 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c005b3a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b40:	f001 b912 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005b44:	4b64      	ldr	r3, [pc, #400]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005b46:	681b      	ldr	r3, [r3, #0]
 c005b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005b50:	d103      	bne.n	c005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 c005b52:	4b63      	ldr	r3, [pc, #396]	@ (c005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 c005b54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005b56:	f001 b907 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c005b5a:	2300      	movs	r3, #0
 c005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b5e:	f001 b903 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 c005b62:	2300      	movs	r3, #0
 c005b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005b66:	f001 b8ff 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 c005b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005b6e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 c005b72:	430b      	orrs	r3, r1
 c005b74:	d158      	bne.n	c005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 c005b76:	4b58      	ldr	r3, [pc, #352]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c005b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 c005b80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005b88:	d03b      	beq.n	c005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 c005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005b90:	d846      	bhi.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c005b98:	d02e      	beq.n	c005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 c005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c005ba0:	d83e      	bhi.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c005ba8:	d00b      	beq.n	c005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 c005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c005bb0:	d836      	bhi.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bb4:	2b00      	cmp	r3, #0
 c005bb6:	d00d      	beq.n	c005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 c005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c005bbe:	d012      	beq.n	c005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 c005bc0:	e02e      	b.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005bc6:	4618      	mov	r0, r3
 c005bc8:	f7ff fb18 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c005bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005bd0:	f001 b8ca 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005bd4:	f107 0318 	add.w	r3, r7, #24
 c005bd8:	4618      	mov	r0, r3
 c005bda:	f7ff fc69 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c005bde:	69bb      	ldr	r3, [r7, #24]
 c005be0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005be2:	f001 b8c1 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c005be6:	f107 030c 	add.w	r3, r7, #12
 c005bea:	4618      	mov	r0, r3
 c005bec:	f7ff fdba 	bl	c005764 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c005bf0:	68fb      	ldr	r3, [r7, #12]
 c005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005bf4:	f001 b8b8 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c005bf8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005bfe:	f001 b8b3 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005c02:	4b35      	ldr	r3, [pc, #212]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005c04:	681b      	ldr	r3, [r3, #0]
 c005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005c0e:	d103      	bne.n	c005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 c005c10:	4b33      	ldr	r3, [pc, #204]	@ (c005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 c005c12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005c14:	f001 b8a8 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c005c18:	2300      	movs	r3, #0
 c005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005c1c:	f001 b8a4 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 c005c20:	2300      	movs	r3, #0
 c005c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005c24:	f001 b8a0 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 c005c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005c2c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 c005c30:	430b      	orrs	r3, r1
 c005c32:	d16e      	bne.n	c005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c005c34:	4b28      	ldr	r3, [pc, #160]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005c3a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c005c3e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c005c46:	d034      	beq.n	c005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 c005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c005c4e:	d85c      	bhi.n	c005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 c005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005c56:	d00b      	beq.n	c005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 c005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005c5e:	d854      	bhi.n	c005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 c005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c62:	2b00      	cmp	r3, #0
 c005c64:	d016      	beq.n	c005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 c005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c005c6c:	d009      	beq.n	c005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 c005c6e:	e04c      	b.n	c005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005c74:	4618      	mov	r0, r3
 c005c76:	f7ff fac1 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c005c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005c7e:	f001 b873 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005c82:	f107 0318 	add.w	r3, r7, #24
 c005c86:	4618      	mov	r0, r3
 c005c88:	f7ff fc12 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c005c8c:	69fb      	ldr	r3, [r7, #28]
 c005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005c90:	f001 b86a 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c005c94:	4b10      	ldr	r3, [pc, #64]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005c96:	681b      	ldr	r3, [r3, #0]
 c005c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c005c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c005ca0:	d103      	bne.n	c005caa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 c005ca2:	4b10      	ldr	r3, [pc, #64]	@ (c005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 c005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005ca6:	f001 b85f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c005caa:	2300      	movs	r3, #0
 c005cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005cae:	f001 b85b 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005cb2:	4b09      	ldr	r3, [pc, #36]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005cb4:	681b      	ldr	r3, [r3, #0]
 c005cb6:	f003 0320 	and.w	r3, r3, #32
 c005cba:	2b20      	cmp	r3, #32
 c005cbc:	d121      	bne.n	c005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005cbe:	4b06      	ldr	r3, [pc, #24]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005cc0:	689b      	ldr	r3, [r3, #8]
 c005cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005cc6:	2b00      	cmp	r3, #0
 c005cc8:	d00e      	beq.n	c005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 c005cca:	4b03      	ldr	r3, [pc, #12]	@ (c005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c005ccc:	689b      	ldr	r3, [r3, #8]
 c005cce:	0e1b      	lsrs	r3, r3, #24
 c005cd0:	f003 030f 	and.w	r3, r3, #15
 c005cd4:	e00f      	b.n	c005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 c005cd6:	bf00      	nop
 c005cd8:	56020c00 	.word	0x56020c00
 c005cdc:	0007a120 	.word	0x0007a120
 c005ce0:	00f42400 	.word	0x00f42400
 c005ce4:	02dc6c00 	.word	0x02dc6c00
 c005ce8:	4ba7      	ldr	r3, [pc, #668]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005cee:	041b      	lsls	r3, r3, #16
 c005cf0:	0e1b      	lsrs	r3, r3, #24
 c005cf2:	f003 030f 	and.w	r3, r3, #15
 c005cf6:	4aa5      	ldr	r2, [pc, #660]	@ (c005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 c005cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005cfe:	f001 b833 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c005d02:	2300      	movs	r3, #0
 c005d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005d06:	f001 b82f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 c005d0a:	2300      	movs	r3, #0
 c005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005d0e:	f001 b82b 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 c005d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005d16:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 c005d1a:	430b      	orrs	r3, r1
 c005d1c:	d17f      	bne.n	c005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 c005d1e:	4b9a      	ldr	r3, [pc, #616]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c005d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c005d28:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 c005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d2c:	2b00      	cmp	r3, #0
 c005d2e:	d165      	bne.n	c005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c005d30:	4b95      	ldr	r3, [pc, #596]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005d36:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c005d3a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 c005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c005d42:	d034      	beq.n	c005dae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 c005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c005d4a:	d853      	bhi.n	c005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 c005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005d52:	d00b      	beq.n	c005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 c005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005d5a:	d84b      	bhi.n	c005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 c005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d5e:	2b00      	cmp	r3, #0
 c005d60:	d016      	beq.n	c005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 c005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c005d68:	d009      	beq.n	c005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 c005d6a:	e043      	b.n	c005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005d70:	4618      	mov	r0, r3
 c005d72:	f7ff fa43 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 c005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005d78:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005d7a:	f000 bff5 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005d7e:	f107 0318 	add.w	r3, r7, #24
 c005d82:	4618      	mov	r0, r3
 c005d84:	f7ff fb94 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 c005d88:	69fb      	ldr	r3, [r7, #28]
 c005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005d8c:	f000 bfec 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c005d90:	4b7d      	ldr	r3, [pc, #500]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005d92:	681b      	ldr	r3, [r3, #0]
 c005d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c005d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c005d9c:	d103      	bne.n	c005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 c005d9e:	4b7c      	ldr	r3, [pc, #496]	@ (c005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 c005da0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c005da2:	f000 bfe1 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 c005da6:	2300      	movs	r3, #0
 c005da8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005daa:	f000 bfdd 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005dae:	4b76      	ldr	r3, [pc, #472]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005db0:	681b      	ldr	r3, [r3, #0]
 c005db2:	f003 0320 	and.w	r3, r3, #32
 c005db6:	2b20      	cmp	r3, #32
 c005db8:	d118      	bne.n	c005dec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005dba:	4b73      	ldr	r3, [pc, #460]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005dbc:	689b      	ldr	r3, [r3, #8]
 c005dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005dc2:	2b00      	cmp	r3, #0
 c005dc4:	d005      	beq.n	c005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 c005dc6:	4b70      	ldr	r3, [pc, #448]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005dc8:	689b      	ldr	r3, [r3, #8]
 c005dca:	0e1b      	lsrs	r3, r3, #24
 c005dcc:	f003 030f 	and.w	r3, r3, #15
 c005dd0:	e006      	b.n	c005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 c005dd2:	4b6d      	ldr	r3, [pc, #436]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005dd8:	041b      	lsls	r3, r3, #16
 c005dda:	0e1b      	lsrs	r3, r3, #24
 c005ddc:	f003 030f 	and.w	r3, r3, #15
 c005de0:	4a6a      	ldr	r2, [pc, #424]	@ (c005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 c005de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005de6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c005de8:	f000 bfbe 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 c005dec:	2300      	movs	r3, #0
 c005dee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005df0:	f000 bfba 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 c005df4:	2300      	movs	r3, #0
 c005df6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005df8:	f000 bfb6 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 c005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c005e02:	d108      	bne.n	c005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005e08:	4618      	mov	r0, r3
 c005e0a:	f7ff f9f7 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 c005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c005e10:	637b      	str	r3, [r7, #52]	@ 0x34
 c005e12:	f000 bfa9 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 c005e16:	2300      	movs	r3, #0
 c005e18:	637b      	str	r3, [r7, #52]	@ 0x34
 c005e1a:	f000 bfa5 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 c005e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005e22:	1e51      	subs	r1, r2, #1
 c005e24:	430b      	orrs	r3, r1
 c005e26:	d136      	bne.n	c005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 c005e28:	4b57      	ldr	r3, [pc, #348]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005e2e:	f003 0303 	and.w	r3, r3, #3
 c005e32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 c005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005e36:	2b00      	cmp	r3, #0
 c005e38:	d104      	bne.n	c005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 c005e3a:	f7fe fb8d 	bl	c004558 <HAL_RCC_GetPCLK2Freq>
 c005e3e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005e40:	f000 bf92 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 c005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005e46:	2b01      	cmp	r3, #1
 c005e48:	d104      	bne.n	c005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005e4a:	f7fe fa55 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c005e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005e50:	f000 bf8a 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 c005e54:	4b4c      	ldr	r3, [pc, #304]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005e56:	681b      	ldr	r3, [r3, #0]
 c005e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005e60:	d106      	bne.n	c005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 c005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005e64:	2b02      	cmp	r3, #2
 c005e66:	d103      	bne.n	c005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 c005e68:	4b4a      	ldr	r3, [pc, #296]	@ (c005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 c005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 c005e6c:	f000 bf7c 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 c005e70:	4b45      	ldr	r3, [pc, #276]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005e76:	f003 0302 	and.w	r3, r3, #2
 c005e7a:	2b02      	cmp	r3, #2
 c005e7c:	d107      	bne.n	c005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 c005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005e80:	2b03      	cmp	r3, #3
 c005e82:	d104      	bne.n	c005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 c005e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005e88:	637b      	str	r3, [r7, #52]	@ 0x34
 c005e8a:	f000 bf6d 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 c005e8e:	2300      	movs	r3, #0
 c005e90:	637b      	str	r3, [r7, #52]	@ 0x34
 c005e92:	f000 bf69 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 c005e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005e9a:	1e91      	subs	r1, r2, #2
 c005e9c:	430b      	orrs	r3, r1
 c005e9e:	d136      	bne.n	c005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 c005ea0:	4b39      	ldr	r3, [pc, #228]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005ea6:	f003 030c 	and.w	r3, r3, #12
 c005eaa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 c005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005eae:	2b00      	cmp	r3, #0
 c005eb0:	d104      	bne.n	c005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005eb2:	f7fe fb3d 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c005eb6:	6378      	str	r0, [r7, #52]	@ 0x34
 c005eb8:	f000 bf56 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 c005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ebe:	2b04      	cmp	r3, #4
 c005ec0:	d104      	bne.n	c005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005ec2:	f7fe fa19 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c005ec6:	6378      	str	r0, [r7, #52]	@ 0x34
 c005ec8:	f000 bf4e 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 c005ecc:	4b2e      	ldr	r3, [pc, #184]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005ece:	681b      	ldr	r3, [r3, #0]
 c005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005ed8:	d106      	bne.n	c005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 c005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005edc:	2b08      	cmp	r3, #8
 c005ede:	d103      	bne.n	c005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 c005ee0:	4b2c      	ldr	r3, [pc, #176]	@ (c005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 c005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 c005ee4:	f000 bf40 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 c005ee8:	4b27      	ldr	r3, [pc, #156]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005eee:	f003 0302 	and.w	r3, r3, #2
 c005ef2:	2b02      	cmp	r3, #2
 c005ef4:	d107      	bne.n	c005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 c005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ef8:	2b0c      	cmp	r3, #12
 c005efa:	d104      	bne.n	c005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 c005efc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005f00:	637b      	str	r3, [r7, #52]	@ 0x34
 c005f02:	f000 bf31 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 c005f06:	2300      	movs	r3, #0
 c005f08:	637b      	str	r3, [r7, #52]	@ 0x34
 c005f0a:	f000 bf2d 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 c005f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005f12:	1f11      	subs	r1, r2, #4
 c005f14:	430b      	orrs	r3, r1
 c005f16:	d13f      	bne.n	c005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 c005f18:	4b1b      	ldr	r3, [pc, #108]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005f1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 c005f22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 c005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f26:	2b00      	cmp	r3, #0
 c005f28:	d104      	bne.n	c005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005f2a:	f7fe fb01 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c005f2e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005f30:	f000 bf1a 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 c005f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f36:	2b10      	cmp	r3, #16
 c005f38:	d104      	bne.n	c005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005f3a:	f7fe f9dd 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c005f3e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005f40:	f000 bf12 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 c005f44:	4b10      	ldr	r3, [pc, #64]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005f46:	681b      	ldr	r3, [r3, #0]
 c005f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005f50:	d106      	bne.n	c005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 c005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f54:	2b20      	cmp	r3, #32
 c005f56:	d103      	bne.n	c005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 c005f58:	4b0e      	ldr	r3, [pc, #56]	@ (c005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 c005f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 c005f5c:	f000 bf04 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 c005f60:	4b09      	ldr	r3, [pc, #36]	@ (c005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 c005f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005f66:	f003 0302 	and.w	r3, r3, #2
 c005f6a:	2b02      	cmp	r3, #2
 c005f6c:	d107      	bne.n	c005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 c005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f70:	2b30      	cmp	r3, #48	@ 0x30
 c005f72:	d104      	bne.n	c005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 c005f74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005f78:	637b      	str	r3, [r7, #52]	@ 0x34
 c005f7a:	f000 bef5 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 c005f7e:	2300      	movs	r3, #0
 c005f80:	637b      	str	r3, [r7, #52]	@ 0x34
 c005f82:	f000 bef1 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 c005f86:	bf00      	nop
 c005f88:	56020c00 	.word	0x56020c00
 c005f8c:	0c008384 	.word	0x0c008384
 c005f90:	02dc6c00 	.word	0x02dc6c00
 c005f94:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 c005f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005f9c:	f1a2 0108 	sub.w	r1, r2, #8
 c005fa0:	430b      	orrs	r3, r1
 c005fa2:	d136      	bne.n	c006012 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 c005fa4:	4ba4      	ldr	r3, [pc, #656]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c005fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005faa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c005fae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 c005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005fb2:	2b00      	cmp	r3, #0
 c005fb4:	d104      	bne.n	c005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005fb6:	f7fe fabb 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c005fba:	6378      	str	r0, [r7, #52]	@ 0x34
 c005fbc:	f000 bed4 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 c005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005fc2:	2b40      	cmp	r3, #64	@ 0x40
 c005fc4:	d104      	bne.n	c005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005fc6:	f7fe f997 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c005fca:	6378      	str	r0, [r7, #52]	@ 0x34
 c005fcc:	f000 becc 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 c005fd0:	4b99      	ldr	r3, [pc, #612]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c005fd2:	681b      	ldr	r3, [r3, #0]
 c005fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005fdc:	d106      	bne.n	c005fec <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 c005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005fe0:	2b80      	cmp	r3, #128	@ 0x80
 c005fe2:	d103      	bne.n	c005fec <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 c005fe4:	4b95      	ldr	r3, [pc, #596]	@ (c00623c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 c005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 c005fe8:	f000 bebe 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 c005fec:	4b92      	ldr	r3, [pc, #584]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c005fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005ff2:	f003 0302 	and.w	r3, r3, #2
 c005ff6:	2b02      	cmp	r3, #2
 c005ff8:	d107      	bne.n	c00600a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 c005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ffc:	2bc0      	cmp	r3, #192	@ 0xc0
 c005ffe:	d104      	bne.n	c00600a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 c006000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c006004:	637b      	str	r3, [r7, #52]	@ 0x34
 c006006:	f000 beaf 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 c00600a:	2300      	movs	r3, #0
 c00600c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00600e:	f000 beab 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 c006012:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006016:	f1a2 0110 	sub.w	r1, r2, #16
 c00601a:	430b      	orrs	r3, r1
 c00601c:	d139      	bne.n	c006092 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 c00601e:	4b86      	ldr	r3, [pc, #536]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c006028:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 c00602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00602c:	2b00      	cmp	r3, #0
 c00602e:	d104      	bne.n	c00603a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c006030:	f7fe fa7e 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c006034:	6378      	str	r0, [r7, #52]	@ 0x34
 c006036:	f000 be97 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 c00603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00603c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c006040:	d104      	bne.n	c00604c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c006042:	f7fe f959 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006046:	6378      	str	r0, [r7, #52]	@ 0x34
 c006048:	f000 be8e 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 c00604c:	4b7a      	ldr	r3, [pc, #488]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c00604e:	681b      	ldr	r3, [r3, #0]
 c006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006058:	d107      	bne.n	c00606a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 c00605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00605c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c006060:	d103      	bne.n	c00606a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 c006062:	4b76      	ldr	r3, [pc, #472]	@ (c00623c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 c006064:	637b      	str	r3, [r7, #52]	@ 0x34
 c006066:	f000 be7f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 c00606a:	4b73      	ldr	r3, [pc, #460]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c00606c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006070:	f003 0302 	and.w	r3, r3, #2
 c006074:	2b02      	cmp	r3, #2
 c006076:	d108      	bne.n	c00608a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 c006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00607a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00607e:	d104      	bne.n	c00608a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 c006080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c006084:	637b      	str	r3, [r7, #52]	@ 0x34
 c006086:	f000 be6f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 c00608a:	2300      	movs	r3, #0
 c00608c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00608e:	f000 be6b 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 c006092:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006096:	f1a2 0120 	sub.w	r1, r2, #32
 c00609a:	430b      	orrs	r3, r1
 c00609c:	d158      	bne.n	c006150 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 c00609e:	4b66      	ldr	r3, [pc, #408]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0060a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0060a4:	f003 0307 	and.w	r3, r3, #7
 c0060a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 c0060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060ac:	2b00      	cmp	r3, #0
 c0060ae:	d104      	bne.n	c0060ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 c0060b0:	f7fe fa66 	bl	c004580 <HAL_RCC_GetPCLK3Freq>
 c0060b4:	6378      	str	r0, [r7, #52]	@ 0x34
 c0060b6:	f000 be57 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 c0060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060bc:	2b01      	cmp	r3, #1
 c0060be:	d104      	bne.n	c0060ca <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0060c0:	f7fe f91a 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c0060c4:	6378      	str	r0, [r7, #52]	@ 0x34
 c0060c6:	f000 be4f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 c0060ca:	4b5b      	ldr	r3, [pc, #364]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0060cc:	681b      	ldr	r3, [r3, #0]
 c0060ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0060d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0060d6:	d106      	bne.n	c0060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 c0060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060da:	2b02      	cmp	r3, #2
 c0060dc:	d103      	bne.n	c0060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 c0060de:	4b57      	ldr	r3, [pc, #348]	@ (c00623c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 c0060e0:	637b      	str	r3, [r7, #52]	@ 0x34
 c0060e2:	f000 be41 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 c0060e6:	4b54      	ldr	r3, [pc, #336]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0060e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0060ec:	f003 0302 	and.w	r3, r3, #2
 c0060f0:	2b02      	cmp	r3, #2
 c0060f2:	d107      	bne.n	c006104 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 c0060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060f6:	2b03      	cmp	r3, #3
 c0060f8:	d104      	bne.n	c006104 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 c0060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c0060fe:	637b      	str	r3, [r7, #52]	@ 0x34
 c006100:	f000 be32 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 c006104:	4b4c      	ldr	r3, [pc, #304]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006106:	681b      	ldr	r3, [r3, #0]
 c006108:	f003 0320 	and.w	r3, r3, #32
 c00610c:	2b20      	cmp	r3, #32
 c00610e:	d11b      	bne.n	c006148 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 c006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006112:	2b04      	cmp	r3, #4
 c006114:	d118      	bne.n	c006148 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c006116:	4b48      	ldr	r3, [pc, #288]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006118:	689b      	ldr	r3, [r3, #8]
 c00611a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00611e:	2b00      	cmp	r3, #0
 c006120:	d005      	beq.n	c00612e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 c006122:	4b45      	ldr	r3, [pc, #276]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006124:	689b      	ldr	r3, [r3, #8]
 c006126:	0e1b      	lsrs	r3, r3, #24
 c006128:	f003 030f 	and.w	r3, r3, #15
 c00612c:	e006      	b.n	c00613c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 c00612e:	4b42      	ldr	r3, [pc, #264]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c006134:	041b      	lsls	r3, r3, #16
 c006136:	0e1b      	lsrs	r3, r3, #24
 c006138:	f003 030f 	and.w	r3, r3, #15
 c00613c:	4a40      	ldr	r2, [pc, #256]	@ (c006240 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 c00613e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006142:	637b      	str	r3, [r7, #52]	@ 0x34
 c006144:	f000 be10 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 c006148:	2300      	movs	r3, #0
 c00614a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00614c:	f000 be0c 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 c006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006154:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 c006158:	430b      	orrs	r3, r1
 c00615a:	d173      	bne.n	c006244 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 c00615c:	4b36      	ldr	r3, [pc, #216]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c00615e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006162:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 c006166:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 c006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00616a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00616e:	d104      	bne.n	c00617a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c006170:	f7fe f8c2 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006174:	6378      	str	r0, [r7, #52]	@ 0x34
 c006176:	f000 bdf7 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 c00617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00617c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c006180:	d108      	bne.n	c006194 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c006182:	f107 0318 	add.w	r3, r7, #24
 c006186:	4618      	mov	r0, r3
 c006188:	f7ff f992 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 c00618c:	6a3b      	ldr	r3, [r7, #32]
 c00618e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006190:	f000 bdea 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 c006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006196:	2b00      	cmp	r3, #0
 c006198:	d104      	bne.n	c0061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 c00619a:	f7fe f9af 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c00619e:	6378      	str	r0, [r7, #52]	@ 0x34
 c0061a0:	f000 bde2 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 c0061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0061a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c0061aa:	d122      	bne.n	c0061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c0061ac:	4b22      	ldr	r3, [pc, #136]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0061ae:	681b      	ldr	r3, [r3, #0]
 c0061b0:	f003 0320 	and.w	r3, r3, #32
 c0061b4:	2b20      	cmp	r3, #32
 c0061b6:	d118      	bne.n	c0061ea <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0061b8:	4b1f      	ldr	r3, [pc, #124]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0061ba:	689b      	ldr	r3, [r3, #8]
 c0061bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0061c0:	2b00      	cmp	r3, #0
 c0061c2:	d005      	beq.n	c0061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 c0061c4:	4b1c      	ldr	r3, [pc, #112]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0061c6:	689b      	ldr	r3, [r3, #8]
 c0061c8:	0e1b      	lsrs	r3, r3, #24
 c0061ca:	f003 030f 	and.w	r3, r3, #15
 c0061ce:	e006      	b.n	c0061de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 c0061d0:	4b19      	ldr	r3, [pc, #100]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0061d6:	041b      	lsls	r3, r3, #16
 c0061d8:	0e1b      	lsrs	r3, r3, #24
 c0061da:	f003 030f 	and.w	r3, r3, #15
 c0061de:	4a18      	ldr	r2, [pc, #96]	@ (c006240 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 c0061e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0061e4:	637b      	str	r3, [r7, #52]	@ 0x34
 c0061e6:	f000 bdbf 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 c0061ea:	2300      	movs	r3, #0
 c0061ec:	637b      	str	r3, [r7, #52]	@ 0x34
 c0061ee:	f000 bdbb 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 c0061f2:	4b11      	ldr	r3, [pc, #68]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c0061f4:	681b      	ldr	r3, [r3, #0]
 c0061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0061fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0061fe:	d107      	bne.n	c006210 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 c006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006202:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c006206:	d103      	bne.n	c006210 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 c006208:	4b0c      	ldr	r3, [pc, #48]	@ (c00623c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 c00620a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00620c:	f000 bdac 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 c006210:	4b09      	ldr	r3, [pc, #36]	@ (c006238 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 c006212:	681b      	ldr	r3, [r3, #0]
 c006214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00621c:	d107      	bne.n	c00622e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 c00621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c006224:	d103      	bne.n	c00622e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 c006226:	4b05      	ldr	r3, [pc, #20]	@ (c00623c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 c006228:	637b      	str	r3, [r7, #52]	@ 0x34
 c00622a:	f000 bd9d 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 c00622e:	2300      	movs	r3, #0
 c006230:	637b      	str	r3, [r7, #52]	@ 0x34
 c006232:	f000 bd99 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 c006236:	bf00      	nop
 c006238:	56020c00 	.word	0x56020c00
 c00623c:	00f42400 	.word	0x00f42400
 c006240:	0c008384 	.word	0x0c008384
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 c006244:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006248:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 c00624c:	430b      	orrs	r3, r1
 c00624e:	d158      	bne.n	c006302 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 c006250:	4bad      	ldr	r3, [pc, #692]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006252:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c006256:	f003 0307 	and.w	r3, r3, #7
 c00625a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00625e:	2b04      	cmp	r3, #4
 c006260:	d84b      	bhi.n	c0062fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 c006262:	a201      	add	r2, pc, #4	@ (adr r2, c006268 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 c006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006268:	0c0062a1 	.word	0x0c0062a1
 c00626c:	0c00627d 	.word	0x0c00627d
 c006270:	0c00628f 	.word	0x0c00628f
 c006274:	0c0062ab 	.word	0x0c0062ab
 c006278:	0c0062b5 	.word	0x0c0062b5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00627c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c006280:	4618      	mov	r0, r3
 c006282:	f7fe ffbb 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c006288:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00628a:	f000 bd6d 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00628e:	f107 030c 	add.w	r3, r7, #12
 c006292:	4618      	mov	r0, r3
 c006294:	f7ff fa66 	bl	c005764 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c006298:	693b      	ldr	r3, [r7, #16]
 c00629a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00629c:	f000 bd64 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c0062a0:	f7fe f92c 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c0062a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c0062a6:	f000 bd5f 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c0062aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c0062ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0062b0:	f000 bd5a 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c0062b4:	4b94      	ldr	r3, [pc, #592]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0062b6:	681b      	ldr	r3, [r3, #0]
 c0062b8:	f003 0320 	and.w	r3, r3, #32
 c0062bc:	2b20      	cmp	r3, #32
 c0062be:	d118      	bne.n	c0062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0062c0:	4b91      	ldr	r3, [pc, #580]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0062c2:	689b      	ldr	r3, [r3, #8]
 c0062c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0062c8:	2b00      	cmp	r3, #0
 c0062ca:	d005      	beq.n	c0062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 c0062cc:	4b8e      	ldr	r3, [pc, #568]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0062ce:	689b      	ldr	r3, [r3, #8]
 c0062d0:	0e1b      	lsrs	r3, r3, #24
 c0062d2:	f003 030f 	and.w	r3, r3, #15
 c0062d6:	e006      	b.n	c0062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 c0062d8:	4b8b      	ldr	r3, [pc, #556]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0062da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0062de:	041b      	lsls	r3, r3, #16
 c0062e0:	0e1b      	lsrs	r3, r3, #24
 c0062e2:	f003 030f 	and.w	r3, r3, #15
 c0062e6:	4a89      	ldr	r2, [pc, #548]	@ (c00650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 c0062e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0062ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c0062ee:	f000 bd3b 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c0062f2:	2300      	movs	r3, #0
 c0062f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0062f6:	f000 bd37 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c0062fa:	2300      	movs	r3, #0
 c0062fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0062fe:	f000 bd33 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 c006302:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006306:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 c00630a:	430b      	orrs	r3, r1
 c00630c:	d167      	bne.n	c0063de <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 c00630e:	4b7e      	ldr	r3, [pc, #504]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006314:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 c006318:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00631c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c006320:	d036      	beq.n	c006390 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 c006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c006328:	d855      	bhi.n	c0063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 c00632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00632c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c006330:	d029      	beq.n	c006386 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 c006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c006338:	d84d      	bhi.n	c0063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 c00633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00633c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c006340:	d013      	beq.n	c00636a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 c006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c006348:	d845      	bhi.n	c0063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 c00634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00634c:	2b00      	cmp	r3, #0
 c00634e:	d015      	beq.n	c00637c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 c006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c006356:	d13e      	bne.n	c0063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c006358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00635c:	4618      	mov	r0, r3
 c00635e:	f7fe ff4d 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c006364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006366:	f000 bcff 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00636a:	f107 030c 	add.w	r3, r7, #12
 c00636e:	4618      	mov	r0, r3
 c006370:	f7ff f9f8 	bl	c005764 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c006374:	693b      	ldr	r3, [r7, #16]
 c006376:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006378:	f000 bcf6 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c00637c:	f7fe f8be 	bl	c0044fc <HAL_RCC_GetHCLKFreq>
 c006380:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006382:	f000 bcf1 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c006386:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c00638a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00638c:	f000 bcec 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c006390:	4b5d      	ldr	r3, [pc, #372]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006392:	681b      	ldr	r3, [r3, #0]
 c006394:	f003 0320 	and.w	r3, r3, #32
 c006398:	2b20      	cmp	r3, #32
 c00639a:	d118      	bne.n	c0063ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00639c:	4b5a      	ldr	r3, [pc, #360]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c00639e:	689b      	ldr	r3, [r3, #8]
 c0063a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0063a4:	2b00      	cmp	r3, #0
 c0063a6:	d005      	beq.n	c0063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 c0063a8:	4b57      	ldr	r3, [pc, #348]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0063aa:	689b      	ldr	r3, [r3, #8]
 c0063ac:	0e1b      	lsrs	r3, r3, #24
 c0063ae:	f003 030f 	and.w	r3, r3, #15
 c0063b2:	e006      	b.n	c0063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 c0063b4:	4b54      	ldr	r3, [pc, #336]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0063b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0063ba:	041b      	lsls	r3, r3, #16
 c0063bc:	0e1b      	lsrs	r3, r3, #24
 c0063be:	f003 030f 	and.w	r3, r3, #15
 c0063c2:	4a52      	ldr	r2, [pc, #328]	@ (c00650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 c0063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0063c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c0063ca:	f000 bccd 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c0063ce:	2300      	movs	r3, #0
 c0063d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0063d2:	f000 bcc9 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c0063d6:	2300      	movs	r3, #0
 c0063d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0063da:	f000 bcc5 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 c0063de:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0063e2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 c0063e6:	430b      	orrs	r3, r1
 c0063e8:	d14c      	bne.n	c006484 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 c0063ea:	4b47      	ldr	r3, [pc, #284]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0063ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0063f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c0063f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 c0063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0063f8:	2b00      	cmp	r3, #0
 c0063fa:	d104      	bne.n	c006406 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c0063fc:	f7fe f898 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c006400:	6378      	str	r0, [r7, #52]	@ 0x34
 c006402:	f000 bcb1 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 c006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00640c:	d104      	bne.n	c006418 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00640e:	f7fd ff73 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006412:	6378      	str	r0, [r7, #52]	@ 0x34
 c006414:	f000 bca8 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 c006418:	4b3b      	ldr	r3, [pc, #236]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c00641a:	681b      	ldr	r3, [r3, #0]
 c00641c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006424:	d107      	bne.n	c006436 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 c006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00642c:	d103      	bne.n	c006436 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 c00642e:	4b38      	ldr	r3, [pc, #224]	@ (c006510 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 c006430:	637b      	str	r3, [r7, #52]	@ 0x34
 c006432:	f000 bc99 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 c006436:	4b34      	ldr	r3, [pc, #208]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006438:	681b      	ldr	r3, [r3, #0]
 c00643a:	f003 0320 	and.w	r3, r3, #32
 c00643e:	2b20      	cmp	r3, #32
 c006440:	d11c      	bne.n	c00647c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 c006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c006448:	d118      	bne.n	c00647c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00644a:	4b2f      	ldr	r3, [pc, #188]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c00644c:	689b      	ldr	r3, [r3, #8]
 c00644e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c006452:	2b00      	cmp	r3, #0
 c006454:	d005      	beq.n	c006462 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 c006456:	4b2c      	ldr	r3, [pc, #176]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006458:	689b      	ldr	r3, [r3, #8]
 c00645a:	0e1b      	lsrs	r3, r3, #24
 c00645c:	f003 030f 	and.w	r3, r3, #15
 c006460:	e006      	b.n	c006470 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 c006462:	4b29      	ldr	r3, [pc, #164]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c006468:	041b      	lsls	r3, r3, #16
 c00646a:	0e1b      	lsrs	r3, r3, #24
 c00646c:	f003 030f 	and.w	r3, r3, #15
 c006470:	4a26      	ldr	r2, [pc, #152]	@ (c00650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 c006472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006476:	637b      	str	r3, [r7, #52]	@ 0x34
 c006478:	f000 bc76 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 c00647c:	2300      	movs	r3, #0
 c00647e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006480:	f000 bc72 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 c006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006488:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 c00648c:	430b      	orrs	r3, r1
 c00648e:	d152      	bne.n	c006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 c006490:	4b1d      	ldr	r3, [pc, #116]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c006492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006496:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c00649a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 c00649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00649e:	2b00      	cmp	r3, #0
 c0064a0:	d104      	bne.n	c0064ac <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c0064a2:	f7fe f845 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c0064a6:	6378      	str	r0, [r7, #52]	@ 0x34
 c0064a8:	f000 bc5e 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 c0064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0064ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c0064b2:	d104      	bne.n	c0064be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0064b4:	f7fd ff20 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c0064b8:	6378      	str	r0, [r7, #52]	@ 0x34
 c0064ba:	f000 bc55 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 c0064be:	4b12      	ldr	r3, [pc, #72]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0064c0:	681b      	ldr	r3, [r3, #0]
 c0064c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0064c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0064ca:	d107      	bne.n	c0064dc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 c0064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0064ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c0064d2:	d103      	bne.n	c0064dc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 c0064d4:	4b0e      	ldr	r3, [pc, #56]	@ (c006510 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 c0064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 c0064d8:	f000 bc46 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 c0064dc:	4b0a      	ldr	r3, [pc, #40]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0064de:	681b      	ldr	r3, [r3, #0]
 c0064e0:	f003 0320 	and.w	r3, r3, #32
 c0064e4:	2b20      	cmp	r3, #32
 c0064e6:	d122      	bne.n	c00652e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 c0064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0064ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c0064ee:	d11e      	bne.n	c00652e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0064f0:	4b05      	ldr	r3, [pc, #20]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0064f2:	689b      	ldr	r3, [r3, #8]
 c0064f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0064f8:	2b00      	cmp	r3, #0
 c0064fa:	d00b      	beq.n	c006514 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 c0064fc:	4b02      	ldr	r3, [pc, #8]	@ (c006508 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 c0064fe:	689b      	ldr	r3, [r3, #8]
 c006500:	0e1b      	lsrs	r3, r3, #24
 c006502:	f003 030f 	and.w	r3, r3, #15
 c006506:	e00c      	b.n	c006522 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 c006508:	56020c00 	.word	0x56020c00
 c00650c:	0c008384 	.word	0x0c008384
 c006510:	00f42400 	.word	0x00f42400
 c006514:	4ba1      	ldr	r3, [pc, #644]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00651a:	041b      	lsls	r3, r3, #16
 c00651c:	0e1b      	lsrs	r3, r3, #24
 c00651e:	f003 030f 	and.w	r3, r3, #15
 c006522:	4a9f      	ldr	r2, [pc, #636]	@ (c0067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 c006524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006528:	637b      	str	r3, [r7, #52]	@ 0x34
 c00652a:	f000 bc1d 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 c00652e:	2300      	movs	r3, #0
 c006530:	637b      	str	r3, [r7, #52]	@ 0x34
 c006532:	f000 bc19 	b.w	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 c006536:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00653a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 c00653e:	430b      	orrs	r3, r1
 c006540:	d151      	bne.n	c0065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 c006542:	4b96      	ldr	r3, [pc, #600]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006548:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c00654c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006550:	2bc0      	cmp	r3, #192	@ 0xc0
 c006552:	d024      	beq.n	c00659e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 c006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006556:	2bc0      	cmp	r3, #192	@ 0xc0
 c006558:	d842      	bhi.n	c0065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 c00655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00655c:	2b80      	cmp	r3, #128	@ 0x80
 c00655e:	d00d      	beq.n	c00657c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 c006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006562:	2b80      	cmp	r3, #128	@ 0x80
 c006564:	d83c      	bhi.n	c0065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 c006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006568:	2b00      	cmp	r3, #0
 c00656a:	d003      	beq.n	c006574 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 c00656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00656e:	2b40      	cmp	r3, #64	@ 0x40
 c006570:	d011      	beq.n	c006596 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 c006572:	e035      	b.n	c0065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 c006574:	f7fe f804 	bl	c004580 <HAL_RCC_GetPCLK3Freq>
 c006578:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00657a:	e3f5      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00657c:	4b87      	ldr	r3, [pc, #540]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00657e:	681b      	ldr	r3, [r3, #0]
 c006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006588:	d102      	bne.n	c006590 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 c00658a:	4b86      	ldr	r3, [pc, #536]	@ (c0067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 c00658c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00658e:	e3eb      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006590:	2300      	movs	r3, #0
 c006592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006594:	e3e8      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 c006596:	f7fd feaf 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c00659a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00659c:	e3e4      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00659e:	4b7f      	ldr	r3, [pc, #508]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0065a0:	681b      	ldr	r3, [r3, #0]
 c0065a2:	f003 0320 	and.w	r3, r3, #32
 c0065a6:	2b20      	cmp	r3, #32
 c0065a8:	d117      	bne.n	c0065da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0065aa:	4b7c      	ldr	r3, [pc, #496]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0065ac:	689b      	ldr	r3, [r3, #8]
 c0065ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0065b2:	2b00      	cmp	r3, #0
 c0065b4:	d005      	beq.n	c0065c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 c0065b6:	4b79      	ldr	r3, [pc, #484]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0065b8:	689b      	ldr	r3, [r3, #8]
 c0065ba:	0e1b      	lsrs	r3, r3, #24
 c0065bc:	f003 030f 	and.w	r3, r3, #15
 c0065c0:	e006      	b.n	c0065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 c0065c2:	4b76      	ldr	r3, [pc, #472]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0065c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0065c8:	041b      	lsls	r3, r3, #16
 c0065ca:	0e1b      	lsrs	r3, r3, #24
 c0065cc:	f003 030f 	and.w	r3, r3, #15
 c0065d0:	4a73      	ldr	r2, [pc, #460]	@ (c0067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 c0065d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0065d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c0065d8:	e3c6      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c0065da:	2300      	movs	r3, #0
 c0065dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0065de:	e3c3      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 c0065e0:	2300      	movs	r3, #0
 c0065e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0065e4:	e3c0      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 c0065e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0065ea:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 c0065ee:	430b      	orrs	r3, r1
 c0065f0:	d147      	bne.n	c006682 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 c0065f2:	4b6a      	ldr	r3, [pc, #424]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0065f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0065f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 c0065fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 c0065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006600:	2b00      	cmp	r3, #0
 c006602:	d103      	bne.n	c00660c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c006604:	f7fd ff94 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c006608:	6378      	str	r0, [r7, #52]	@ 0x34
 c00660a:	e3ad      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 c00660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00660e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c006612:	d103      	bne.n	c00661c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c006614:	f7fd fe70 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006618:	6378      	str	r0, [r7, #52]	@ 0x34
 c00661a:	e3a5      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 c00661c:	4b5f      	ldr	r3, [pc, #380]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00661e:	681b      	ldr	r3, [r3, #0]
 c006620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006628:	d106      	bne.n	c006638 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 c00662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00662c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c006630:	d102      	bne.n	c006638 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 c006632:	4b5c      	ldr	r3, [pc, #368]	@ (c0067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 c006634:	637b      	str	r3, [r7, #52]	@ 0x34
 c006636:	e397      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 c006638:	4b58      	ldr	r3, [pc, #352]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00663a:	681b      	ldr	r3, [r3, #0]
 c00663c:	f003 0320 	and.w	r3, r3, #32
 c006640:	2b20      	cmp	r3, #32
 c006642:	d11b      	bne.n	c00667c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 c006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006646:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 c00664a:	d117      	bne.n	c00667c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00664c:	4b53      	ldr	r3, [pc, #332]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00664e:	689b      	ldr	r3, [r3, #8]
 c006650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c006654:	2b00      	cmp	r3, #0
 c006656:	d005      	beq.n	c006664 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 c006658:	4b50      	ldr	r3, [pc, #320]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00665a:	689b      	ldr	r3, [r3, #8]
 c00665c:	0e1b      	lsrs	r3, r3, #24
 c00665e:	f003 030f 	and.w	r3, r3, #15
 c006662:	e006      	b.n	c006672 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 c006664:	4b4d      	ldr	r3, [pc, #308]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00666a:	041b      	lsls	r3, r3, #16
 c00666c:	0e1b      	lsrs	r3, r3, #24
 c00666e:	f003 030f 	and.w	r3, r3, #15
 c006672:	4a4b      	ldr	r2, [pc, #300]	@ (c0067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 c006674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006678:	637b      	str	r3, [r7, #52]	@ 0x34
 c00667a:	e375      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 c00667c:	2300      	movs	r3, #0
 c00667e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006680:	e372      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 c006682:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006686:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 c00668a:	430b      	orrs	r3, r1
 c00668c:	d164      	bne.n	c006758 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 c00668e:	4b43      	ldr	r3, [pc, #268]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c006698:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 c00669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00669c:	2b00      	cmp	r3, #0
 c00669e:	d120      	bne.n	c0066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c0066a0:	4b3e      	ldr	r3, [pc, #248]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066a2:	681b      	ldr	r3, [r3, #0]
 c0066a4:	f003 0320 	and.w	r3, r3, #32
 c0066a8:	2b20      	cmp	r3, #32
 c0066aa:	d117      	bne.n	c0066dc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0066ac:	4b3b      	ldr	r3, [pc, #236]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066ae:	689b      	ldr	r3, [r3, #8]
 c0066b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0066b4:	2b00      	cmp	r3, #0
 c0066b6:	d005      	beq.n	c0066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 c0066b8:	4b38      	ldr	r3, [pc, #224]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066ba:	689b      	ldr	r3, [r3, #8]
 c0066bc:	0e1b      	lsrs	r3, r3, #24
 c0066be:	f003 030f 	and.w	r3, r3, #15
 c0066c2:	e006      	b.n	c0066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 c0066c4:	4b35      	ldr	r3, [pc, #212]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0066ca:	041b      	lsls	r3, r3, #16
 c0066cc:	0e1b      	lsrs	r3, r3, #24
 c0066ce:	f003 030f 	and.w	r3, r3, #15
 c0066d2:	4a33      	ldr	r2, [pc, #204]	@ (c0067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 c0066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 c0066da:	e345      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 c0066dc:	2300      	movs	r3, #0
 c0066de:	637b      	str	r3, [r7, #52]	@ 0x34
 c0066e0:	e342      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 c0066e2:	4b2e      	ldr	r3, [pc, #184]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0066e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c0066ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0066f0:	d112      	bne.n	c006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 c0066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0066f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c0066f8:	d10e      	bne.n	c006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c0066fa:	4b28      	ldr	r3, [pc, #160]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c0066fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c006708:	d102      	bne.n	c006710 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 c00670a:	23fa      	movs	r3, #250	@ 0xfa
 c00670c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00670e:	e32b      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 c006710:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c006714:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006716:	e327      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 c006718:	4b20      	ldr	r3, [pc, #128]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c00671a:	681b      	ldr	r3, [r3, #0]
 c00671c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006724:	d106      	bne.n	c006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 c006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00672c:	d102      	bne.n	c006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 c00672e:	4b1d      	ldr	r3, [pc, #116]	@ (c0067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 c006730:	637b      	str	r3, [r7, #52]	@ 0x34
 c006732:	e319      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 c006734:	4b19      	ldr	r3, [pc, #100]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00673a:	f003 0302 	and.w	r3, r3, #2
 c00673e:	2b02      	cmp	r3, #2
 c006740:	d107      	bne.n	c006752 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 c006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c006748:	d103      	bne.n	c006752 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 c00674a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00674e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006750:	e30a      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 c006752:	2300      	movs	r3, #0
 c006754:	637b      	str	r3, [r7, #52]	@ 0x34
 c006756:	e307      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 c006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00675c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 c006760:	430b      	orrs	r3, r1
 c006762:	d16b      	bne.n	c00683c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 c006764:	4b0d      	ldr	r3, [pc, #52]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00676a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c00676e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 c006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006772:	2b00      	cmp	r3, #0
 c006774:	d127      	bne.n	c0067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c006776:	4b09      	ldr	r3, [pc, #36]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006778:	681b      	ldr	r3, [r3, #0]
 c00677a:	f003 0320 	and.w	r3, r3, #32
 c00677e:	2b20      	cmp	r3, #32
 c006780:	d11e      	bne.n	c0067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c006782:	4b06      	ldr	r3, [pc, #24]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006784:	689b      	ldr	r3, [r3, #8]
 c006786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00678a:	2b00      	cmp	r3, #0
 c00678c:	d00c      	beq.n	c0067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 c00678e:	4b03      	ldr	r3, [pc, #12]	@ (c00679c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 c006790:	689b      	ldr	r3, [r3, #8]
 c006792:	0e1b      	lsrs	r3, r3, #24
 c006794:	f003 030f 	and.w	r3, r3, #15
 c006798:	e00d      	b.n	c0067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 c00679a:	bf00      	nop
 c00679c:	56020c00 	.word	0x56020c00
 c0067a0:	0c008384 	.word	0x0c008384
 c0067a4:	00f42400 	.word	0x00f42400
 c0067a8:	4b94      	ldr	r3, [pc, #592]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0067aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0067ae:	041b      	lsls	r3, r3, #16
 c0067b0:	0e1b      	lsrs	r3, r3, #24
 c0067b2:	f003 030f 	and.w	r3, r3, #15
 c0067b6:	4a92      	ldr	r2, [pc, #584]	@ (c006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 c0067b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0067bc:	637b      	str	r3, [r7, #52]	@ 0x34
 c0067be:	e2d3      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 c0067c0:	2300      	movs	r3, #0
 c0067c2:	637b      	str	r3, [r7, #52]	@ 0x34
 c0067c4:	e2d0      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 c0067c6:	4b8d      	ldr	r3, [pc, #564]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0067c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0067cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c0067d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0067d4:	d112      	bne.n	c0067fc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 c0067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0067d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0067dc:	d10e      	bne.n	c0067fc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c0067de:	4b87      	ldr	r3, [pc, #540]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0067e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0067e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0067e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c0067ec:	d102      	bne.n	c0067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 c0067ee:	23fa      	movs	r3, #250	@ 0xfa
 c0067f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c0067f2:	e2b9      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 c0067f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c0067f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c0067fa:	e2b5      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 c0067fc:	4b7f      	ldr	r3, [pc, #508]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0067fe:	681b      	ldr	r3, [r3, #0]
 c006800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006808:	d106      	bne.n	c006818 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 c00680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00680c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c006810:	d102      	bne.n	c006818 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 c006812:	4b7c      	ldr	r3, [pc, #496]	@ (c006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 c006814:	637b      	str	r3, [r7, #52]	@ 0x34
 c006816:	e2a7      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 c006818:	4b78      	ldr	r3, [pc, #480]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00681a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00681e:	f003 0302 	and.w	r3, r3, #2
 c006822:	2b02      	cmp	r3, #2
 c006824:	d107      	bne.n	c006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 c006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c00682c:	d103      	bne.n	c006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 c00682e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c006832:	637b      	str	r3, [r7, #52]	@ 0x34
 c006834:	e298      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 c006836:	2300      	movs	r3, #0
 c006838:	637b      	str	r3, [r7, #52]	@ 0x34
 c00683a:	e295      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 c00683c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006840:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 c006844:	430b      	orrs	r3, r1
 c006846:	d147      	bne.n	c0068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 c006848:	4b6c      	ldr	r3, [pc, #432]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00684a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00684e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 c006852:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 c006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006856:	2b00      	cmp	r3, #0
 c006858:	d103      	bne.n	c006862 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00685a:	f7fd fe69 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c00685e:	6378      	str	r0, [r7, #52]	@ 0x34
 c006860:	e282      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 c006862:	4b66      	ldr	r3, [pc, #408]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c006864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00686c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c006870:	d112      	bne.n	c006898 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 c006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c006878:	d10e      	bne.n	c006898 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00687a:	4b60      	ldr	r3, [pc, #384]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00687c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c006888:	d102      	bne.n	c006890 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 c00688a:	23fa      	movs	r3, #250	@ 0xfa
 c00688c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00688e:	e26b      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 c006890:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c006894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006896:	e267      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 c006898:	4b58      	ldr	r3, [pc, #352]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00689a:	681b      	ldr	r3, [r3, #0]
 c00689c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0068a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0068a4:	d106      	bne.n	c0068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 c0068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0068a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 c0068ac:	d102      	bne.n	c0068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 c0068ae:	4b55      	ldr	r3, [pc, #340]	@ (c006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 c0068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 c0068b2:	e259      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 c0068b4:	4b51      	ldr	r3, [pc, #324]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0068b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0068ba:	f003 0302 	and.w	r3, r3, #2
 c0068be:	2b02      	cmp	r3, #2
 c0068c0:	d107      	bne.n	c0068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 c0068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0068c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 c0068c8:	d103      	bne.n	c0068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 c0068ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c0068ce:	637b      	str	r3, [r7, #52]	@ 0x34
 c0068d0:	e24a      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 c0068d2:	2300      	movs	r3, #0
 c0068d4:	637b      	str	r3, [r7, #52]	@ 0x34
 c0068d6:	e247      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 c0068d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0068dc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 c0068e0:	430b      	orrs	r3, r1
 c0068e2:	d12d      	bne.n	c006940 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 c0068e4:	4b45      	ldr	r3, [pc, #276]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0068e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0068ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 c0068ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 c0068f0:	4b42      	ldr	r3, [pc, #264]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0068f2:	681b      	ldr	r3, [r3, #0]
 c0068f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0068f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0068fc:	d105      	bne.n	c00690a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 c0068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006900:	2b00      	cmp	r3, #0
 c006902:	d102      	bne.n	c00690a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 c006904:	4b3f      	ldr	r3, [pc, #252]	@ (c006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 c006906:	637b      	str	r3, [r7, #52]	@ 0x34
 c006908:	e22e      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 c00690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00690c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c006910:	d107      	bne.n	c006922 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c006912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c006916:	4618      	mov	r0, r3
 c006918:	f7fe fc70 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 c00691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00691e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006920:	e222      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 c006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c006928:	d107      	bne.n	c00693a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00692a:	f107 0318 	add.w	r3, r7, #24
 c00692e:	4618      	mov	r0, r3
 c006930:	f7fe fdbe 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 c006934:	69bb      	ldr	r3, [r7, #24]
 c006936:	637b      	str	r3, [r7, #52]	@ 0x34
 c006938:	e216      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 c00693a:	2300      	movs	r3, #0
 c00693c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00693e:	e213      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 c006940:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006944:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 c006948:	430b      	orrs	r3, r1
 c00694a:	d15d      	bne.n	c006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 c00694c:	4b2b      	ldr	r3, [pc, #172]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00694e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006952:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c006956:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00695a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00695e:	d028      	beq.n	c0069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 c006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c006966:	d845      	bhi.n	c0069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 c006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00696a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00696e:	d013      	beq.n	c006998 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 c006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c006976:	d83d      	bhi.n	c0069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 c006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00697a:	2b00      	cmp	r3, #0
 c00697c:	d004      	beq.n	c006988 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 c00697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c006984:	d004      	beq.n	c006990 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 c006986:	e035      	b.n	c0069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 c006988:	f7fd fde6 	bl	c004558 <HAL_RCC_GetPCLK2Freq>
 c00698c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00698e:	e1eb      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c006990:	f7fd fcb2 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006994:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006996:	e1e7      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c006998:	4b18      	ldr	r3, [pc, #96]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c00699a:	681b      	ldr	r3, [r3, #0]
 c00699c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0069a4:	d102      	bne.n	c0069ac <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 c0069a6:	4b17      	ldr	r3, [pc, #92]	@ (c006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 c0069a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c0069aa:	e1dd      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c0069ac:	2300      	movs	r3, #0
 c0069ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0069b0:	e1da      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c0069b2:	4b12      	ldr	r3, [pc, #72]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0069b4:	681b      	ldr	r3, [r3, #0]
 c0069b6:	f003 0320 	and.w	r3, r3, #32
 c0069ba:	2b20      	cmp	r3, #32
 c0069bc:	d117      	bne.n	c0069ee <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0069be:	4b0f      	ldr	r3, [pc, #60]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0069c0:	689b      	ldr	r3, [r3, #8]
 c0069c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0069c6:	2b00      	cmp	r3, #0
 c0069c8:	d005      	beq.n	c0069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 c0069ca:	4b0c      	ldr	r3, [pc, #48]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0069cc:	689b      	ldr	r3, [r3, #8]
 c0069ce:	0e1b      	lsrs	r3, r3, #24
 c0069d0:	f003 030f 	and.w	r3, r3, #15
 c0069d4:	e006      	b.n	c0069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 c0069d6:	4b09      	ldr	r3, [pc, #36]	@ (c0069fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 c0069d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0069dc:	041b      	lsls	r3, r3, #16
 c0069de:	0e1b      	lsrs	r3, r3, #24
 c0069e0:	f003 030f 	and.w	r3, r3, #15
 c0069e4:	4a06      	ldr	r2, [pc, #24]	@ (c006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 c0069e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0069ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c0069ec:	e1bc      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c0069ee:	2300      	movs	r3, #0
 c0069f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0069f2:	e1b9      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c0069f4:	2300      	movs	r3, #0
 c0069f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0069f8:	e1b6      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 c0069fa:	bf00      	nop
 c0069fc:	56020c00 	.word	0x56020c00
 c006a00:	0c008384 	.word	0x0c008384
 c006a04:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 c006a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006a0c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 c006a10:	430b      	orrs	r3, r1
 c006a12:	d156      	bne.n	c006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 c006a14:	4ba5      	ldr	r3, [pc, #660]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c006a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c006a26:	d028      	beq.n	c006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 c006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c006a2e:	d845      	bhi.n	c006abc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 c006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c006a36:	d013      	beq.n	c006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 c006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c006a3e:	d83d      	bhi.n	c006abc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 c006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a42:	2b00      	cmp	r3, #0
 c006a44:	d004      	beq.n	c006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 c006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c006a4c:	d004      	beq.n	c006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 c006a4e:	e035      	b.n	c006abc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 c006a50:	f7fd fd6e 	bl	c004530 <HAL_RCC_GetPCLK1Freq>
 c006a54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006a56:	e187      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c006a58:	f7fd fc4e 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006a5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006a5e:	e183      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c006a60:	4b92      	ldr	r3, [pc, #584]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006a62:	681b      	ldr	r3, [r3, #0]
 c006a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006a6c:	d102      	bne.n	c006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 c006a6e:	4b90      	ldr	r3, [pc, #576]	@ (c006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 c006a70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c006a72:	e179      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006a74:	2300      	movs	r3, #0
 c006a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006a78:	e176      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c006a7a:	4b8c      	ldr	r3, [pc, #560]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006a7c:	681b      	ldr	r3, [r3, #0]
 c006a7e:	f003 0320 	and.w	r3, r3, #32
 c006a82:	2b20      	cmp	r3, #32
 c006a84:	d117      	bne.n	c006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c006a86:	4b89      	ldr	r3, [pc, #548]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006a88:	689b      	ldr	r3, [r3, #8]
 c006a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c006a8e:	2b00      	cmp	r3, #0
 c006a90:	d005      	beq.n	c006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 c006a92:	4b86      	ldr	r3, [pc, #536]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006a94:	689b      	ldr	r3, [r3, #8]
 c006a96:	0e1b      	lsrs	r3, r3, #24
 c006a98:	f003 030f 	and.w	r3, r3, #15
 c006a9c:	e006      	b.n	c006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 c006a9e:	4b83      	ldr	r3, [pc, #524]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c006aa4:	041b      	lsls	r3, r3, #16
 c006aa6:	0e1b      	lsrs	r3, r3, #24
 c006aa8:	f003 030f 	and.w	r3, r3, #15
 c006aac:	4a81      	ldr	r2, [pc, #516]	@ (c006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 c006aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c006ab4:	e158      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006ab6:	2300      	movs	r3, #0
 c006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006aba:	e155      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c006abc:	2300      	movs	r3, #0
 c006abe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006ac0:	e152      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 c006ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006ac6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 c006aca:	430b      	orrs	r3, r1
 c006acc:	d177      	bne.n	c006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 c006ace:	4b77      	ldr	r3, [pc, #476]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006ad4:	f003 0318 	and.w	r3, r3, #24
 c006ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006adc:	2b18      	cmp	r3, #24
 c006ade:	d86b      	bhi.n	c006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 c006ae0:	a201      	add	r2, pc, #4	@ (adr r2, c006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 c006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006ae6:	bf00      	nop
 c006ae8:	0c006b4d 	.word	0x0c006b4d
 c006aec:	0c006bb9 	.word	0x0c006bb9
 c006af0:	0c006bb9 	.word	0x0c006bb9
 c006af4:	0c006bb9 	.word	0x0c006bb9
 c006af8:	0c006bb9 	.word	0x0c006bb9
 c006afc:	0c006bb9 	.word	0x0c006bb9
 c006b00:	0c006bb9 	.word	0x0c006bb9
 c006b04:	0c006bb9 	.word	0x0c006bb9
 c006b08:	0c006b55 	.word	0x0c006b55
 c006b0c:	0c006bb9 	.word	0x0c006bb9
 c006b10:	0c006bb9 	.word	0x0c006bb9
 c006b14:	0c006bb9 	.word	0x0c006bb9
 c006b18:	0c006bb9 	.word	0x0c006bb9
 c006b1c:	0c006bb9 	.word	0x0c006bb9
 c006b20:	0c006bb9 	.word	0x0c006bb9
 c006b24:	0c006bb9 	.word	0x0c006bb9
 c006b28:	0c006b5d 	.word	0x0c006b5d
 c006b2c:	0c006bb9 	.word	0x0c006bb9
 c006b30:	0c006bb9 	.word	0x0c006bb9
 c006b34:	0c006bb9 	.word	0x0c006bb9
 c006b38:	0c006bb9 	.word	0x0c006bb9
 c006b3c:	0c006bb9 	.word	0x0c006bb9
 c006b40:	0c006bb9 	.word	0x0c006bb9
 c006b44:	0c006bb9 	.word	0x0c006bb9
 c006b48:	0c006b77 	.word	0x0c006b77
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 c006b4c:	f7fd fd18 	bl	c004580 <HAL_RCC_GetPCLK3Freq>
 c006b50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006b52:	e109      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c006b54:	f7fd fbd0 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006b58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006b5a:	e105      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c006b5c:	4b53      	ldr	r3, [pc, #332]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006b5e:	681b      	ldr	r3, [r3, #0]
 c006b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006b68:	d102      	bne.n	c006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 c006b6a:	4b51      	ldr	r3, [pc, #324]	@ (c006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 c006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c006b6e:	e0fb      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006b70:	2300      	movs	r3, #0
 c006b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006b74:	e0f8      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c006b76:	4b4d      	ldr	r3, [pc, #308]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006b78:	681b      	ldr	r3, [r3, #0]
 c006b7a:	f003 0320 	and.w	r3, r3, #32
 c006b7e:	2b20      	cmp	r3, #32
 c006b80:	d117      	bne.n	c006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c006b82:	4b4a      	ldr	r3, [pc, #296]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006b84:	689b      	ldr	r3, [r3, #8]
 c006b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c006b8a:	2b00      	cmp	r3, #0
 c006b8c:	d005      	beq.n	c006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 c006b8e:	4b47      	ldr	r3, [pc, #284]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006b90:	689b      	ldr	r3, [r3, #8]
 c006b92:	0e1b      	lsrs	r3, r3, #24
 c006b94:	f003 030f 	and.w	r3, r3, #15
 c006b98:	e006      	b.n	c006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 c006b9a:	4b44      	ldr	r3, [pc, #272]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c006ba0:	041b      	lsls	r3, r3, #16
 c006ba2:	0e1b      	lsrs	r3, r3, #24
 c006ba4:	f003 030f 	and.w	r3, r3, #15
 c006ba8:	4a42      	ldr	r2, [pc, #264]	@ (c006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 c006baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006bae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c006bb0:	e0da      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006bb2:	2300      	movs	r3, #0
 c006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006bb6:	e0d7      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c006bb8:	2300      	movs	r3, #0
 c006bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006bbc:	e0d4      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 c006bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006bc2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 c006bc6:	430b      	orrs	r3, r1
 c006bc8:	d155      	bne.n	c006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 c006bca:	4b38      	ldr	r3, [pc, #224]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c006bd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c006bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006bd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c006bdc:	d013      	beq.n	c006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 c006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006be0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c006be4:	d844      	bhi.n	c006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 c006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c006bec:	d013      	beq.n	c006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 c006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c006bf4:	d83c      	bhi.n	c006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 c006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006bf8:	2b00      	cmp	r3, #0
 c006bfa:	d014      	beq.n	c006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 c006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c006c02:	d014      	beq.n	c006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 c006c04:	e034      	b.n	c006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c006c06:	f107 0318 	add.w	r3, r7, #24
 c006c0a:	4618      	mov	r0, r3
 c006c0c:	f7fe fc50 	bl	c0054b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c006c10:	69fb      	ldr	r3, [r7, #28]
 c006c12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006c14:	e0a8      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c006c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c006c1a:	4618      	mov	r0, r3
 c006c1c:	f7fe faee 	bl	c0051fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c006c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006c24:	e0a0      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c006c26:	f7fd fb67 	bl	c0042f8 <HAL_RCC_GetSysClockFreq>
 c006c2a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c006c2c:	e09c      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c006c2e:	4b1f      	ldr	r3, [pc, #124]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c30:	681b      	ldr	r3, [r3, #0]
 c006c32:	f003 0320 	and.w	r3, r3, #32
 c006c36:	2b20      	cmp	r3, #32
 c006c38:	d117      	bne.n	c006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c006c3a:	4b1c      	ldr	r3, [pc, #112]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c3c:	689b      	ldr	r3, [r3, #8]
 c006c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c006c42:	2b00      	cmp	r3, #0
 c006c44:	d005      	beq.n	c006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 c006c46:	4b19      	ldr	r3, [pc, #100]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c48:	689b      	ldr	r3, [r3, #8]
 c006c4a:	0e1b      	lsrs	r3, r3, #24
 c006c4c:	f003 030f 	and.w	r3, r3, #15
 c006c50:	e006      	b.n	c006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 c006c52:	4b16      	ldr	r3, [pc, #88]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c006c58:	041b      	lsls	r3, r3, #16
 c006c5a:	0e1b      	lsrs	r3, r3, #24
 c006c5c:	f003 030f 	and.w	r3, r3, #15
 c006c60:	4a14      	ldr	r2, [pc, #80]	@ (c006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 c006c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006c66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c006c68:	e07e      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 c006c6a:	2300      	movs	r3, #0
 c006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006c6e:	e07b      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 c006c70:	2300      	movs	r3, #0
 c006c72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c006c74:	e078      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 c006c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006c7a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 c006c7e:	430b      	orrs	r3, r1
 c006c80:	d138      	bne.n	c006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 c006c82:	4b0a      	ldr	r3, [pc, #40]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c006c8c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 c006c8e:	4b07      	ldr	r3, [pc, #28]	@ (c006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 c006c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006c94:	f003 0302 	and.w	r3, r3, #2
 c006c98:	2b02      	cmp	r3, #2
 c006c9a:	d10d      	bne.n	c006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 c006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006c9e:	2b00      	cmp	r3, #0
 c006ca0:	d10a      	bne.n	c006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 c006ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 c006ca8:	e05e      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 c006caa:	bf00      	nop
 c006cac:	56020c00 	.word	0x56020c00
 c006cb0:	00f42400 	.word	0x00f42400
 c006cb4:	0c008384 	.word	0x0c008384
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 c006cb8:	4b2e      	ldr	r3, [pc, #184]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c006cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c006cc6:	d112      	bne.n	c006cee <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 c006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c006cce:	d10e      	bne.n	c006cee <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006cd0:	4b28      	ldr	r3, [pc, #160]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c006cde:	d102      	bne.n	c006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 c006ce0:	23fa      	movs	r3, #250	@ 0xfa
 c006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006ce4:	e040      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 c006ce6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c006cea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006cec:	e03c      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 c006cee:	2300      	movs	r3, #0
 c006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 c006cf2:	e039      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 c006cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006cf8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 c006cfc:	430b      	orrs	r3, r1
 c006cfe:	d131      	bne.n	c006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 c006d00:	4b1c      	ldr	r3, [pc, #112]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c006d06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c006d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 c006d0c:	4b19      	ldr	r3, [pc, #100]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006d0e:	681b      	ldr	r3, [r3, #0]
 c006d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c006d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c006d18:	d105      	bne.n	c006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 c006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006d1c:	2b00      	cmp	r3, #0
 c006d1e:	d102      	bne.n	c006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 c006d20:	4b15      	ldr	r3, [pc, #84]	@ (c006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 c006d22:	637b      	str	r3, [r7, #52]	@ 0x34
 c006d24:	e020      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 c006d26:	4b13      	ldr	r3, [pc, #76]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006d28:	681b      	ldr	r3, [r3, #0]
 c006d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c006d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c006d32:	d106      	bne.n	c006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 c006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c006d3a:	d102      	bne.n	c006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 c006d3c:	4b0f      	ldr	r3, [pc, #60]	@ (c006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 c006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006d40:	e012      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 c006d42:	4b0c      	ldr	r3, [pc, #48]	@ (c006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 c006d44:	681b      	ldr	r3, [r3, #0]
 c006d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006d4e:	d106      	bne.n	c006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 c006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c006d56:	d102      	bne.n	c006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 c006d58:	4b09      	ldr	r3, [pc, #36]	@ (c006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 c006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 c006d5c:	e004      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 c006d5e:	2300      	movs	r3, #0
 c006d60:	637b      	str	r3, [r7, #52]	@ 0x34
 c006d62:	e001      	b.n	c006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 c006d64:	2300      	movs	r3, #0
 c006d66:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 c006d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 c006d6a:	4618      	mov	r0, r3
 c006d6c:	3738      	adds	r7, #56	@ 0x38
 c006d6e:	46bd      	mov	sp, r7
 c006d70:	bd80      	pop	{r7, pc}
 c006d72:	bf00      	nop
 c006d74:	56020c00 	.word	0x56020c00
 c006d78:	02dc6c00 	.word	0x02dc6c00
 c006d7c:	016e3600 	.word	0x016e3600
 c006d80:	00f42400 	.word	0x00f42400

0c006d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c006d84:	b580      	push	{r7, lr}
 c006d86:	b084      	sub	sp, #16
 c006d88:	af00      	add	r7, sp, #0
 c006d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 c006d8c:	4b47      	ldr	r3, [pc, #284]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006d8e:	681b      	ldr	r3, [r3, #0]
 c006d90:	4a46      	ldr	r2, [pc, #280]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006d92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c006d96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006d98:	f7fa fd7a 	bl	c001890 <HAL_GetTick>
 c006d9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c006d9e:	e008      	b.n	c006db2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c006da0:	f7fa fd76 	bl	c001890 <HAL_GetTick>
 c006da4:	4602      	mov	r2, r0
 c006da6:	68fb      	ldr	r3, [r7, #12]
 c006da8:	1ad3      	subs	r3, r2, r3
 c006daa:	2b02      	cmp	r3, #2
 c006dac:	d901      	bls.n	c006db2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c006dae:	2303      	movs	r3, #3
 c006db0:	e077      	b.n	c006ea2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c006db2:	4b3e      	ldr	r3, [pc, #248]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006db4:	681b      	ldr	r3, [r3, #0]
 c006db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c006dba:	2b00      	cmp	r3, #0
 c006dbc:	d1f0      	bne.n	c006da0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c006dbe:	4b3b      	ldr	r3, [pc, #236]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006dc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c006dc6:	f023 0303 	bic.w	r3, r3, #3
 c006dca:	687a      	ldr	r2, [r7, #4]
 c006dcc:	6811      	ldr	r1, [r2, #0]
 c006dce:	687a      	ldr	r2, [r7, #4]
 c006dd0:	6852      	ldr	r2, [r2, #4]
 c006dd2:	3a01      	subs	r2, #1
 c006dd4:	0212      	lsls	r2, r2, #8
 c006dd6:	430a      	orrs	r2, r1
 c006dd8:	4934      	ldr	r1, [pc, #208]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006dda:	4313      	orrs	r3, r2
 c006ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 c006dde:	4b33      	ldr	r3, [pc, #204]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c006de2:	4b33      	ldr	r3, [pc, #204]	@ (c006eb0 <RCCEx_PLL2_Config+0x12c>)
 c006de4:	4013      	ands	r3, r2
 c006de6:	687a      	ldr	r2, [r7, #4]
 c006de8:	6892      	ldr	r2, [r2, #8]
 c006dea:	3a01      	subs	r2, #1
 c006dec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c006df0:	687a      	ldr	r2, [r7, #4]
 c006df2:	68d2      	ldr	r2, [r2, #12]
 c006df4:	3a01      	subs	r2, #1
 c006df6:	0252      	lsls	r2, r2, #9
 c006df8:	b292      	uxth	r2, r2
 c006dfa:	4311      	orrs	r1, r2
 c006dfc:	687a      	ldr	r2, [r7, #4]
 c006dfe:	6912      	ldr	r2, [r2, #16]
 c006e00:	3a01      	subs	r2, #1
 c006e02:	0412      	lsls	r2, r2, #16
 c006e04:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c006e08:	4311      	orrs	r1, r2
 c006e0a:	687a      	ldr	r2, [r7, #4]
 c006e0c:	6952      	ldr	r2, [r2, #20]
 c006e0e:	3a01      	subs	r2, #1
 c006e10:	0612      	lsls	r2, r2, #24
 c006e12:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c006e16:	430a      	orrs	r2, r1
 c006e18:	4924      	ldr	r1, [pc, #144]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e1a:	4313      	orrs	r3, r2
 c006e1c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c006e1e:	4b23      	ldr	r3, [pc, #140]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006e22:	f023 020c 	bic.w	r2, r3, #12
 c006e26:	687b      	ldr	r3, [r7, #4]
 c006e28:	699b      	ldr	r3, [r3, #24]
 c006e2a:	4920      	ldr	r1, [pc, #128]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e2c:	4313      	orrs	r3, r2
 c006e2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c006e30:	4b1e      	ldr	r3, [pc, #120]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c006e34:	687b      	ldr	r3, [r7, #4]
 c006e36:	6a1b      	ldr	r3, [r3, #32]
 c006e38:	491c      	ldr	r1, [pc, #112]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e3a:	4313      	orrs	r3, r2
 c006e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 c006e3e:	4b1b      	ldr	r3, [pc, #108]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006e42:	4a1a      	ldr	r2, [pc, #104]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e44:	f023 0310 	bic.w	r3, r3, #16
 c006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 c006e4a:	4b18      	ldr	r3, [pc, #96]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c006e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c006e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c006e56:	687a      	ldr	r2, [r7, #4]
 c006e58:	69d2      	ldr	r2, [r2, #28]
 c006e5a:	00d2      	lsls	r2, r2, #3
 c006e5c:	4913      	ldr	r1, [pc, #76]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e5e:	4313      	orrs	r3, r2
 c006e60:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 c006e62:	4b12      	ldr	r3, [pc, #72]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006e66:	4a11      	ldr	r2, [pc, #68]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e68:	f043 0310 	orr.w	r3, r3, #16
 c006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 c006e6e:	4b0f      	ldr	r3, [pc, #60]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e70:	681b      	ldr	r3, [r3, #0]
 c006e72:	4a0e      	ldr	r2, [pc, #56]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c006e78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006e7a:	f7fa fd09 	bl	c001890 <HAL_GetTick>
 c006e7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c006e80:	e008      	b.n	c006e94 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c006e82:	f7fa fd05 	bl	c001890 <HAL_GetTick>
 c006e86:	4602      	mov	r2, r0
 c006e88:	68fb      	ldr	r3, [r7, #12]
 c006e8a:	1ad3      	subs	r3, r2, r3
 c006e8c:	2b02      	cmp	r3, #2
 c006e8e:	d901      	bls.n	c006e94 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 c006e90:	2303      	movs	r3, #3
 c006e92:	e006      	b.n	c006ea2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c006e94:	4b05      	ldr	r3, [pc, #20]	@ (c006eac <RCCEx_PLL2_Config+0x128>)
 c006e96:	681b      	ldr	r3, [r3, #0]
 c006e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c006e9c:	2b00      	cmp	r3, #0
 c006e9e:	d0f0      	beq.n	c006e82 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 c006ea0:	2300      	movs	r3, #0

}
 c006ea2:	4618      	mov	r0, r3
 c006ea4:	3710      	adds	r7, #16
 c006ea6:	46bd      	mov	sp, r7
 c006ea8:	bd80      	pop	{r7, pc}
 c006eaa:	bf00      	nop
 c006eac:	56020c00 	.word	0x56020c00
 c006eb0:	80800000 	.word	0x80800000

0c006eb4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c006eb4:	b580      	push	{r7, lr}
 c006eb6:	b084      	sub	sp, #16
 c006eb8:	af00      	add	r7, sp, #0
 c006eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 c006ebc:	4b47      	ldr	r3, [pc, #284]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006ebe:	681b      	ldr	r3, [r3, #0]
 c006ec0:	4a46      	ldr	r2, [pc, #280]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c006ec6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006ec8:	f7fa fce2 	bl	c001890 <HAL_GetTick>
 c006ecc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c006ece:	e008      	b.n	c006ee2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c006ed0:	f7fa fcde 	bl	c001890 <HAL_GetTick>
 c006ed4:	4602      	mov	r2, r0
 c006ed6:	68fb      	ldr	r3, [r7, #12]
 c006ed8:	1ad3      	subs	r3, r2, r3
 c006eda:	2b02      	cmp	r3, #2
 c006edc:	d901      	bls.n	c006ee2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c006ede:	2303      	movs	r3, #3
 c006ee0:	e077      	b.n	c006fd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c006ee2:	4b3e      	ldr	r3, [pc, #248]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006ee4:	681b      	ldr	r3, [r3, #0]
 c006ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c006eea:	2b00      	cmp	r3, #0
 c006eec:	d1f0      	bne.n	c006ed0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c006eee:	4b3b      	ldr	r3, [pc, #236]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c006ef2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c006ef6:	f023 0303 	bic.w	r3, r3, #3
 c006efa:	687a      	ldr	r2, [r7, #4]
 c006efc:	6811      	ldr	r1, [r2, #0]
 c006efe:	687a      	ldr	r2, [r7, #4]
 c006f00:	6852      	ldr	r2, [r2, #4]
 c006f02:	3a01      	subs	r2, #1
 c006f04:	0212      	lsls	r2, r2, #8
 c006f06:	430a      	orrs	r2, r1
 c006f08:	4934      	ldr	r1, [pc, #208]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f0a:	4313      	orrs	r3, r2
 c006f0c:	630b      	str	r3, [r1, #48]	@ 0x30
 c006f0e:	4b33      	ldr	r3, [pc, #204]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c006f12:	4b33      	ldr	r3, [pc, #204]	@ (c006fe0 <RCCEx_PLL3_Config+0x12c>)
 c006f14:	4013      	ands	r3, r2
 c006f16:	687a      	ldr	r2, [r7, #4]
 c006f18:	6892      	ldr	r2, [r2, #8]
 c006f1a:	3a01      	subs	r2, #1
 c006f1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c006f20:	687a      	ldr	r2, [r7, #4]
 c006f22:	68d2      	ldr	r2, [r2, #12]
 c006f24:	3a01      	subs	r2, #1
 c006f26:	0252      	lsls	r2, r2, #9
 c006f28:	b292      	uxth	r2, r2
 c006f2a:	4311      	orrs	r1, r2
 c006f2c:	687a      	ldr	r2, [r7, #4]
 c006f2e:	6912      	ldr	r2, [r2, #16]
 c006f30:	3a01      	subs	r2, #1
 c006f32:	0412      	lsls	r2, r2, #16
 c006f34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c006f38:	4311      	orrs	r1, r2
 c006f3a:	687a      	ldr	r2, [r7, #4]
 c006f3c:	6952      	ldr	r2, [r2, #20]
 c006f3e:	3a01      	subs	r2, #1
 c006f40:	0612      	lsls	r2, r2, #24
 c006f42:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c006f46:	430a      	orrs	r2, r1
 c006f48:	4924      	ldr	r1, [pc, #144]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f4a:	4313      	orrs	r3, r2
 c006f4c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 c006f4e:	4b23      	ldr	r3, [pc, #140]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c006f52:	f023 020c 	bic.w	r2, r3, #12
 c006f56:	687b      	ldr	r3, [r7, #4]
 c006f58:	699b      	ldr	r3, [r3, #24]
 c006f5a:	4920      	ldr	r1, [pc, #128]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f5c:	4313      	orrs	r3, r2
 c006f5e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c006f60:	4b1e      	ldr	r3, [pc, #120]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c006f64:	687b      	ldr	r3, [r7, #4]
 c006f66:	6a1b      	ldr	r3, [r3, #32]
 c006f68:	491c      	ldr	r1, [pc, #112]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f6a:	4313      	orrs	r3, r2
 c006f6c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 c006f6e:	4b1b      	ldr	r3, [pc, #108]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c006f72:	4a1a      	ldr	r2, [pc, #104]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f74:	f023 0310 	bic.w	r3, r3, #16
 c006f78:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 c006f7a:	4b18      	ldr	r3, [pc, #96]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c006f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c006f82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c006f86:	687a      	ldr	r2, [r7, #4]
 c006f88:	69d2      	ldr	r2, [r2, #28]
 c006f8a:	00d2      	lsls	r2, r2, #3
 c006f8c:	4913      	ldr	r1, [pc, #76]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f8e:	4313      	orrs	r3, r2
 c006f90:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 c006f92:	4b12      	ldr	r3, [pc, #72]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c006f96:	4a11      	ldr	r2, [pc, #68]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006f98:	f043 0310 	orr.w	r3, r3, #16
 c006f9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 c006f9e:	4b0f      	ldr	r3, [pc, #60]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006fa0:	681b      	ldr	r3, [r3, #0]
 c006fa2:	4a0e      	ldr	r2, [pc, #56]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c006fa8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006faa:	f7fa fc71 	bl	c001890 <HAL_GetTick>
 c006fae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c006fb0:	e008      	b.n	c006fc4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c006fb2:	f7fa fc6d 	bl	c001890 <HAL_GetTick>
 c006fb6:	4602      	mov	r2, r0
 c006fb8:	68fb      	ldr	r3, [r7, #12]
 c006fba:	1ad3      	subs	r3, r2, r3
 c006fbc:	2b02      	cmp	r3, #2
 c006fbe:	d901      	bls.n	c006fc4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 c006fc0:	2303      	movs	r3, #3
 c006fc2:	e006      	b.n	c006fd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c006fc4:	4b05      	ldr	r3, [pc, #20]	@ (c006fdc <RCCEx_PLL3_Config+0x128>)
 c006fc6:	681b      	ldr	r3, [r3, #0]
 c006fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c006fcc:	2b00      	cmp	r3, #0
 c006fce:	d0f0      	beq.n	c006fb2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 c006fd0:	2300      	movs	r3, #0
}
 c006fd2:	4618      	mov	r0, r3
 c006fd4:	3710      	adds	r7, #16
 c006fd6:	46bd      	mov	sp, r7
 c006fd8:	bd80      	pop	{r7, pc}
 c006fda:	bf00      	nop
 c006fdc:	56020c00 	.word	0x56020c00
 c006fe0:	80800000 	.word	0x80800000

0c006fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c006fe4:	b580      	push	{r7, lr}
 c006fe6:	b082      	sub	sp, #8
 c006fe8:	af00      	add	r7, sp, #0
 c006fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c006fec:	687b      	ldr	r3, [r7, #4]
 c006fee:	2b00      	cmp	r3, #0
 c006ff0:	d101      	bne.n	c006ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c006ff2:	2301      	movs	r3, #1
 c006ff4:	e042      	b.n	c00707c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c006ff6:	687b      	ldr	r3, [r7, #4]
 c006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c006ffc:	2b00      	cmp	r3, #0
 c006ffe:	d106      	bne.n	c00700e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c007000:	687b      	ldr	r3, [r7, #4]
 c007002:	2200      	movs	r2, #0
 c007004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c007008:	6878      	ldr	r0, [r7, #4]
 c00700a:	f7fa f88b 	bl	c001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00700e:	687b      	ldr	r3, [r7, #4]
 c007010:	2224      	movs	r2, #36	@ 0x24
 c007012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 c007016:	687b      	ldr	r3, [r7, #4]
 c007018:	681b      	ldr	r3, [r3, #0]
 c00701a:	681a      	ldr	r2, [r3, #0]
 c00701c:	687b      	ldr	r3, [r7, #4]
 c00701e:	681b      	ldr	r3, [r3, #0]
 c007020:	f022 0201 	bic.w	r2, r2, #1
 c007024:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c007026:	687b      	ldr	r3, [r7, #4]
 c007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00702a:	2b00      	cmp	r3, #0
 c00702c:	d002      	beq.n	c007034 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 c00702e:	6878      	ldr	r0, [r7, #4]
 c007030:	f000 f9c8 	bl	c0073c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c007034:	6878      	ldr	r0, [r7, #4]
 c007036:	f000 f825 	bl	c007084 <UART_SetConfig>
 c00703a:	4603      	mov	r3, r0
 c00703c:	2b01      	cmp	r3, #1
 c00703e:	d101      	bne.n	c007044 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 c007040:	2301      	movs	r3, #1
 c007042:	e01b      	b.n	c00707c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c007044:	687b      	ldr	r3, [r7, #4]
 c007046:	681b      	ldr	r3, [r3, #0]
 c007048:	685a      	ldr	r2, [r3, #4]
 c00704a:	687b      	ldr	r3, [r7, #4]
 c00704c:	681b      	ldr	r3, [r3, #0]
 c00704e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 c007052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c007054:	687b      	ldr	r3, [r7, #4]
 c007056:	681b      	ldr	r3, [r3, #0]
 c007058:	689a      	ldr	r2, [r3, #8]
 c00705a:	687b      	ldr	r3, [r7, #4]
 c00705c:	681b      	ldr	r3, [r3, #0]
 c00705e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 c007062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c007064:	687b      	ldr	r3, [r7, #4]
 c007066:	681b      	ldr	r3, [r3, #0]
 c007068:	681a      	ldr	r2, [r3, #0]
 c00706a:	687b      	ldr	r3, [r7, #4]
 c00706c:	681b      	ldr	r3, [r3, #0]
 c00706e:	f042 0201 	orr.w	r2, r2, #1
 c007072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c007074:	6878      	ldr	r0, [r7, #4]
 c007076:	f000 fa47 	bl	c007508 <UART_CheckIdleState>
 c00707a:	4603      	mov	r3, r0
}
 c00707c:	4618      	mov	r0, r3
 c00707e:	3708      	adds	r7, #8
 c007080:	46bd      	mov	sp, r7
 c007082:	bd80      	pop	{r7, pc}

0c007084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c007088:	b094      	sub	sp, #80	@ 0x50
 c00708a:	af00      	add	r7, sp, #0
 c00708c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00708e:	2300      	movs	r3, #0
 c007090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 c007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007096:	681a      	ldr	r2, [r3, #0]
 c007098:	4b7e      	ldr	r3, [pc, #504]	@ (c007294 <UART_SetConfig+0x210>)
 c00709a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c00709c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00709e:	689a      	ldr	r2, [r3, #8]
 c0070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070a2:	691b      	ldr	r3, [r3, #16]
 c0070a4:	431a      	orrs	r2, r3
 c0070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070a8:	695b      	ldr	r3, [r3, #20]
 c0070aa:	431a      	orrs	r2, r3
 c0070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070ae:	69db      	ldr	r3, [r3, #28]
 c0070b0:	4313      	orrs	r3, r2
 c0070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070b6:	681b      	ldr	r3, [r3, #0]
 c0070b8:	681b      	ldr	r3, [r3, #0]
 c0070ba:	4977      	ldr	r1, [pc, #476]	@ (c007298 <UART_SetConfig+0x214>)
 c0070bc:	4019      	ands	r1, r3
 c0070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070c0:	681a      	ldr	r2, [r3, #0]
 c0070c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0070c4:	430b      	orrs	r3, r1
 c0070c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c0070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070ca:	681b      	ldr	r3, [r3, #0]
 c0070cc:	685b      	ldr	r3, [r3, #4]
 c0070ce:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 c0070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070d4:	68d9      	ldr	r1, [r3, #12]
 c0070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070d8:	681a      	ldr	r2, [r3, #0]
 c0070da:	ea40 0301 	orr.w	r3, r0, r1
 c0070de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c0070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070e2:	699b      	ldr	r3, [r3, #24]
 c0070e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070e8:	681a      	ldr	r2, [r3, #0]
 c0070ea:	4b6a      	ldr	r3, [pc, #424]	@ (c007294 <UART_SetConfig+0x210>)
 c0070ec:	429a      	cmp	r2, r3
 c0070ee:	d009      	beq.n	c007104 <UART_SetConfig+0x80>
 c0070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070f2:	681a      	ldr	r2, [r3, #0]
 c0070f4:	4b69      	ldr	r3, [pc, #420]	@ (c00729c <UART_SetConfig+0x218>)
 c0070f6:	429a      	cmp	r2, r3
 c0070f8:	d004      	beq.n	c007104 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c0070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0070fc:	6a1a      	ldr	r2, [r3, #32]
 c0070fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c007100:	4313      	orrs	r3, r2
 c007102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007106:	681b      	ldr	r3, [r3, #0]
 c007108:	689b      	ldr	r3, [r3, #8]
 c00710a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 c00710e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 c007112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007114:	681a      	ldr	r2, [r3, #0]
 c007116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c007118:	430b      	orrs	r3, r1
 c00711a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c00711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00711e:	681b      	ldr	r3, [r3, #0]
 c007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c007122:	f023 000f 	bic.w	r0, r3, #15
 c007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007128:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 c00712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00712c:	681a      	ldr	r2, [r3, #0]
 c00712e:	ea40 0301 	orr.w	r3, r0, r1
 c007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007136:	681a      	ldr	r2, [r3, #0]
 c007138:	4b59      	ldr	r3, [pc, #356]	@ (c0072a0 <UART_SetConfig+0x21c>)
 c00713a:	429a      	cmp	r2, r3
 c00713c:	d102      	bne.n	c007144 <UART_SetConfig+0xc0>
 c00713e:	2301      	movs	r3, #1
 c007140:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007142:	e029      	b.n	c007198 <UART_SetConfig+0x114>
 c007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007146:	681a      	ldr	r2, [r3, #0]
 c007148:	4b56      	ldr	r3, [pc, #344]	@ (c0072a4 <UART_SetConfig+0x220>)
 c00714a:	429a      	cmp	r2, r3
 c00714c:	d102      	bne.n	c007154 <UART_SetConfig+0xd0>
 c00714e:	2302      	movs	r3, #2
 c007150:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007152:	e021      	b.n	c007198 <UART_SetConfig+0x114>
 c007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007156:	681a      	ldr	r2, [r3, #0]
 c007158:	4b53      	ldr	r3, [pc, #332]	@ (c0072a8 <UART_SetConfig+0x224>)
 c00715a:	429a      	cmp	r2, r3
 c00715c:	d102      	bne.n	c007164 <UART_SetConfig+0xe0>
 c00715e:	2304      	movs	r3, #4
 c007160:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007162:	e019      	b.n	c007198 <UART_SetConfig+0x114>
 c007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007166:	681a      	ldr	r2, [r3, #0]
 c007168:	4b50      	ldr	r3, [pc, #320]	@ (c0072ac <UART_SetConfig+0x228>)
 c00716a:	429a      	cmp	r2, r3
 c00716c:	d102      	bne.n	c007174 <UART_SetConfig+0xf0>
 c00716e:	2308      	movs	r3, #8
 c007170:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007172:	e011      	b.n	c007198 <UART_SetConfig+0x114>
 c007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007176:	681b      	ldr	r3, [r3, #0]
 c007178:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 c00717c:	d102      	bne.n	c007184 <UART_SetConfig+0x100>
 c00717e:	2310      	movs	r3, #16
 c007180:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007182:	e009      	b.n	c007198 <UART_SetConfig+0x114>
 c007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007186:	681a      	ldr	r2, [r3, #0]
 c007188:	4b44      	ldr	r3, [pc, #272]	@ (c00729c <UART_SetConfig+0x218>)
 c00718a:	429a      	cmp	r2, r3
 c00718c:	d102      	bne.n	c007194 <UART_SetConfig+0x110>
 c00718e:	2320      	movs	r3, #32
 c007190:	64bb      	str	r3, [r7, #72]	@ 0x48
 c007192:	e001      	b.n	c007198 <UART_SetConfig+0x114>
 c007194:	2300      	movs	r3, #0
 c007196:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00719a:	681a      	ldr	r2, [r3, #0]
 c00719c:	4b3d      	ldr	r3, [pc, #244]	@ (c007294 <UART_SetConfig+0x210>)
 c00719e:	429a      	cmp	r2, r3
 c0071a0:	d005      	beq.n	c0071ae <UART_SetConfig+0x12a>
 c0071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0071a4:	681a      	ldr	r2, [r3, #0]
 c0071a6:	4b3d      	ldr	r3, [pc, #244]	@ (c00729c <UART_SetConfig+0x218>)
 c0071a8:	429a      	cmp	r2, r3
 c0071aa:	f040 8083 	bne.w	c0072b4 <UART_SetConfig+0x230>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c0071ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0071b0:	2200      	movs	r2, #0
 c0071b2:	623b      	str	r3, [r7, #32]
 c0071b4:	627a      	str	r2, [r7, #36]	@ 0x24
 c0071b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 c0071ba:	f7fe fc2d 	bl	c005a18 <HAL_RCCEx_GetPeriphCLKFreq>
 c0071be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 c0071c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0071c2:	2b00      	cmp	r3, #0
 c0071c4:	f000 80e6 	beq.w	c007394 <UART_SetConfig+0x310>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0071c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0071cc:	4a38      	ldr	r2, [pc, #224]	@ (c0072b0 <UART_SetConfig+0x22c>)
 c0071ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0071d2:	461a      	mov	r2, r3
 c0071d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0071d6:	fbb3 f3f2 	udiv	r3, r3, r2
 c0071da:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0071de:	685a      	ldr	r2, [r3, #4]
 c0071e0:	4613      	mov	r3, r2
 c0071e2:	005b      	lsls	r3, r3, #1
 c0071e4:	4413      	add	r3, r2
 c0071e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c0071e8:	429a      	cmp	r2, r3
 c0071ea:	d305      	bcc.n	c0071f8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c0071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0071ee:	685b      	ldr	r3, [r3, #4]
 c0071f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0071f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c0071f4:	429a      	cmp	r2, r3
 c0071f6:	d903      	bls.n	c007200 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 c0071f8:	2301      	movs	r3, #1
 c0071fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c0071fe:	e048      	b.n	c007292 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c007202:	2200      	movs	r2, #0
 c007204:	61bb      	str	r3, [r7, #24]
 c007206:	61fa      	str	r2, [r7, #28]
 c007208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00720a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00720c:	4a28      	ldr	r2, [pc, #160]	@ (c0072b0 <UART_SetConfig+0x22c>)
 c00720e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007212:	b29b      	uxth	r3, r3
 c007214:	2200      	movs	r2, #0
 c007216:	613b      	str	r3, [r7, #16]
 c007218:	617a      	str	r2, [r7, #20]
 c00721a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 c00721e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 c007222:	f7f9 f857 	bl	c0002d4 <__aeabi_uldivmod>
 c007226:	4602      	mov	r2, r0
 c007228:	460b      	mov	r3, r1
 c00722a:	4610      	mov	r0, r2
 c00722c:	4619      	mov	r1, r3
 c00722e:	f04f 0200 	mov.w	r2, #0
 c007232:	f04f 0300 	mov.w	r3, #0
 c007236:	020b      	lsls	r3, r1, #8
 c007238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c00723c:	0202      	lsls	r2, r0, #8
 c00723e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c007240:	6849      	ldr	r1, [r1, #4]
 c007242:	0849      	lsrs	r1, r1, #1
 c007244:	2000      	movs	r0, #0
 c007246:	460c      	mov	r4, r1
 c007248:	4605      	mov	r5, r0
 c00724a:	eb12 0804 	adds.w	r8, r2, r4
 c00724e:	eb43 0905 	adc.w	r9, r3, r5
 c007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007254:	685b      	ldr	r3, [r3, #4]
 c007256:	2200      	movs	r2, #0
 c007258:	60bb      	str	r3, [r7, #8]
 c00725a:	60fa      	str	r2, [r7, #12]
 c00725c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 c007260:	4640      	mov	r0, r8
 c007262:	4649      	mov	r1, r9
 c007264:	f7f9 f836 	bl	c0002d4 <__aeabi_uldivmod>
 c007268:	4602      	mov	r2, r0
 c00726a:	460b      	mov	r3, r1
 c00726c:	4613      	mov	r3, r2
 c00726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c007270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c007276:	d308      	bcc.n	c00728a <UART_SetConfig+0x206>
 c007278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00727a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00727e:	d204      	bcs.n	c00728a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 c007280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007282:	681b      	ldr	r3, [r3, #0]
 c007284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 c007286:	60da      	str	r2, [r3, #12]
 c007288:	e003      	b.n	c007292 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 c00728a:	2301      	movs	r3, #1
 c00728c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 c007290:	e080      	b.n	c007394 <UART_SetConfig+0x310>
 c007292:	e07f      	b.n	c007394 <UART_SetConfig+0x310>
 c007294:	46002400 	.word	0x46002400
 c007298:	cfff69f3 	.word	0xcfff69f3
 c00729c:	56002400 	.word	0x56002400
 c0072a0:	50013800 	.word	0x50013800
 c0072a4:	50004400 	.word	0x50004400
 c0072a8:	50004800 	.word	0x50004800
 c0072ac:	50004c00 	.word	0x50004c00
 c0072b0:	0c008444 	.word	0x0c008444
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c0072b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0072b6:	69db      	ldr	r3, [r3, #28]
 c0072b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c0072bc:	d13c      	bne.n	c007338 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c0072be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0072c0:	2200      	movs	r2, #0
 c0072c2:	603b      	str	r3, [r7, #0]
 c0072c4:	607a      	str	r2, [r7, #4]
 c0072c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 c0072ca:	f7fe fba5 	bl	c005a18 <HAL_RCCEx_GetPeriphCLKFreq>
 c0072ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c0072d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0072d2:	2b00      	cmp	r3, #0
 c0072d4:	d05e      	beq.n	c007394 <UART_SetConfig+0x310>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0072da:	4a39      	ldr	r2, [pc, #228]	@ (c0073c0 <UART_SetConfig+0x33c>)
 c0072dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0072e0:	461a      	mov	r2, r3
 c0072e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0072e4:	fbb3 f3f2 	udiv	r3, r3, r2
 c0072e8:	005a      	lsls	r2, r3, #1
 c0072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0072ec:	685b      	ldr	r3, [r3, #4]
 c0072ee:	085b      	lsrs	r3, r3, #1
 c0072f0:	441a      	add	r2, r3
 c0072f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0072f4:	685b      	ldr	r3, [r3, #4]
 c0072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0072fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0072fe:	2b0f      	cmp	r3, #15
 c007300:	d916      	bls.n	c007330 <UART_SetConfig+0x2ac>
 c007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c007308:	d212      	bcs.n	c007330 <UART_SetConfig+0x2ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00730a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00730c:	b29b      	uxth	r3, r3
 c00730e:	f023 030f 	bic.w	r3, r3, #15
 c007312:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c007314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007316:	085b      	lsrs	r3, r3, #1
 c007318:	b29b      	uxth	r3, r3
 c00731a:	f003 0307 	and.w	r3, r3, #7
 c00731e:	b29a      	uxth	r2, r3
 c007320:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 c007322:	4313      	orrs	r3, r2
 c007324:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 c007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007328:	681b      	ldr	r3, [r3, #0]
 c00732a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 c00732c:	60da      	str	r2, [r3, #12]
 c00732e:	e031      	b.n	c007394 <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c007330:	2301      	movs	r3, #1
 c007332:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c007336:	e02d      	b.n	c007394 <UART_SetConfig+0x310>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c007338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00733a:	2200      	movs	r2, #0
 c00733c:	469a      	mov	sl, r3
 c00733e:	4693      	mov	fp, r2
 c007340:	4650      	mov	r0, sl
 c007342:	4659      	mov	r1, fp
 c007344:	f7fe fb68 	bl	c005a18 <HAL_RCCEx_GetPeriphCLKFreq>
 c007348:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 c00734a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00734c:	2b00      	cmp	r3, #0
 c00734e:	d021      	beq.n	c007394 <UART_SetConfig+0x310>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c007354:	4a1a      	ldr	r2, [pc, #104]	@ (c0073c0 <UART_SetConfig+0x33c>)
 c007356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00735a:	461a      	mov	r2, r3
 c00735c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00735e:	fbb3 f2f2 	udiv	r2, r3, r2
 c007362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007364:	685b      	ldr	r3, [r3, #4]
 c007366:	085b      	lsrs	r3, r3, #1
 c007368:	441a      	add	r2, r3
 c00736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00736c:	685b      	ldr	r3, [r3, #4]
 c00736e:	fbb2 f3f3 	udiv	r3, r2, r3
 c007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c007374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007376:	2b0f      	cmp	r3, #15
 c007378:	d909      	bls.n	c00738e <UART_SetConfig+0x30a>
 c00737a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00737c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c007380:	d205      	bcs.n	c00738e <UART_SetConfig+0x30a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c007382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007384:	b29a      	uxth	r2, r3
 c007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007388:	681b      	ldr	r3, [r3, #0]
 c00738a:	60da      	str	r2, [r3, #12]
 c00738c:	e002      	b.n	c007394 <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c00738e:	2301      	movs	r3, #1
 c007390:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c007396:	2201      	movs	r2, #1
 c007398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 c00739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00739e:	2201      	movs	r2, #1
 c0073a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c0073a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0073a6:	2200      	movs	r2, #0
 c0073a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 c0073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0073ac:	2200      	movs	r2, #0
 c0073ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 c0073b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 c0073b4:	4618      	mov	r0, r3
 c0073b6:	3750      	adds	r7, #80	@ 0x50
 c0073b8:	46bd      	mov	sp, r7
 c0073ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c0073be:	bf00      	nop
 c0073c0:	0c008444 	.word	0x0c008444

0c0073c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c0073c4:	b480      	push	{r7}
 c0073c6:	b083      	sub	sp, #12
 c0073c8:	af00      	add	r7, sp, #0
 c0073ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c0073cc:	687b      	ldr	r3, [r7, #4]
 c0073ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0073d0:	f003 0308 	and.w	r3, r3, #8
 c0073d4:	2b00      	cmp	r3, #0
 c0073d6:	d00a      	beq.n	c0073ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0073d8:	687b      	ldr	r3, [r7, #4]
 c0073da:	681b      	ldr	r3, [r3, #0]
 c0073dc:	685b      	ldr	r3, [r3, #4]
 c0073de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 c0073e2:	687b      	ldr	r3, [r7, #4]
 c0073e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 c0073e6:	687b      	ldr	r3, [r7, #4]
 c0073e8:	681b      	ldr	r3, [r3, #0]
 c0073ea:	430a      	orrs	r2, r1
 c0073ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c0073ee:	687b      	ldr	r3, [r7, #4]
 c0073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0073f2:	f003 0301 	and.w	r3, r3, #1
 c0073f6:	2b00      	cmp	r3, #0
 c0073f8:	d00a      	beq.n	c007410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c0073fa:	687b      	ldr	r3, [r7, #4]
 c0073fc:	681b      	ldr	r3, [r3, #0]
 c0073fe:	685b      	ldr	r3, [r3, #4]
 c007400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 c007404:	687b      	ldr	r3, [r7, #4]
 c007406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c007408:	687b      	ldr	r3, [r7, #4]
 c00740a:	681b      	ldr	r3, [r3, #0]
 c00740c:	430a      	orrs	r2, r1
 c00740e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c007410:	687b      	ldr	r3, [r7, #4]
 c007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c007414:	f003 0302 	and.w	r3, r3, #2
 c007418:	2b00      	cmp	r3, #0
 c00741a:	d00a      	beq.n	c007432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c00741c:	687b      	ldr	r3, [r7, #4]
 c00741e:	681b      	ldr	r3, [r3, #0]
 c007420:	685b      	ldr	r3, [r3, #4]
 c007422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 c007426:	687b      	ldr	r3, [r7, #4]
 c007428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c00742a:	687b      	ldr	r3, [r7, #4]
 c00742c:	681b      	ldr	r3, [r3, #0]
 c00742e:	430a      	orrs	r2, r1
 c007430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c007432:	687b      	ldr	r3, [r7, #4]
 c007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c007436:	f003 0304 	and.w	r3, r3, #4
 c00743a:	2b00      	cmp	r3, #0
 c00743c:	d00a      	beq.n	c007454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c00743e:	687b      	ldr	r3, [r7, #4]
 c007440:	681b      	ldr	r3, [r3, #0]
 c007442:	685b      	ldr	r3, [r3, #4]
 c007444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 c007448:	687b      	ldr	r3, [r7, #4]
 c00744a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c00744c:	687b      	ldr	r3, [r7, #4]
 c00744e:	681b      	ldr	r3, [r3, #0]
 c007450:	430a      	orrs	r2, r1
 c007452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c007454:	687b      	ldr	r3, [r7, #4]
 c007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c007458:	f003 0310 	and.w	r3, r3, #16
 c00745c:	2b00      	cmp	r3, #0
 c00745e:	d00a      	beq.n	c007476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c007460:	687b      	ldr	r3, [r7, #4]
 c007462:	681b      	ldr	r3, [r3, #0]
 c007464:	689b      	ldr	r3, [r3, #8]
 c007466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 c00746a:	687b      	ldr	r3, [r7, #4]
 c00746c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c00746e:	687b      	ldr	r3, [r7, #4]
 c007470:	681b      	ldr	r3, [r3, #0]
 c007472:	430a      	orrs	r2, r1
 c007474:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c007476:	687b      	ldr	r3, [r7, #4]
 c007478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00747a:	f003 0320 	and.w	r3, r3, #32
 c00747e:	2b00      	cmp	r3, #0
 c007480:	d00a      	beq.n	c007498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c007482:	687b      	ldr	r3, [r7, #4]
 c007484:	681b      	ldr	r3, [r3, #0]
 c007486:	689b      	ldr	r3, [r3, #8]
 c007488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 c00748c:	687b      	ldr	r3, [r7, #4]
 c00748e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 c007490:	687b      	ldr	r3, [r7, #4]
 c007492:	681b      	ldr	r3, [r3, #0]
 c007494:	430a      	orrs	r2, r1
 c007496:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c007498:	687b      	ldr	r3, [r7, #4]
 c00749a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00749c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0074a0:	2b00      	cmp	r3, #0
 c0074a2:	d01a      	beq.n	c0074da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0074a4:	687b      	ldr	r3, [r7, #4]
 c0074a6:	681b      	ldr	r3, [r3, #0]
 c0074a8:	685b      	ldr	r3, [r3, #4]
 c0074aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 c0074ae:	687b      	ldr	r3, [r7, #4]
 c0074b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c0074b2:	687b      	ldr	r3, [r7, #4]
 c0074b4:	681b      	ldr	r3, [r3, #0]
 c0074b6:	430a      	orrs	r2, r1
 c0074b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0074ba:	687b      	ldr	r3, [r7, #4]
 c0074bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c0074be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c0074c2:	d10a      	bne.n	c0074da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0074c4:	687b      	ldr	r3, [r7, #4]
 c0074c6:	681b      	ldr	r3, [r3, #0]
 c0074c8:	685b      	ldr	r3, [r3, #4]
 c0074ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 c0074ce:	687b      	ldr	r3, [r7, #4]
 c0074d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 c0074d2:	687b      	ldr	r3, [r7, #4]
 c0074d4:	681b      	ldr	r3, [r3, #0]
 c0074d6:	430a      	orrs	r2, r1
 c0074d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c0074da:	687b      	ldr	r3, [r7, #4]
 c0074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0074de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0074e2:	2b00      	cmp	r3, #0
 c0074e4:	d00a      	beq.n	c0074fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c0074e6:	687b      	ldr	r3, [r7, #4]
 c0074e8:	681b      	ldr	r3, [r3, #0]
 c0074ea:	685b      	ldr	r3, [r3, #4]
 c0074ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 c0074f0:	687b      	ldr	r3, [r7, #4]
 c0074f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c0074f4:	687b      	ldr	r3, [r7, #4]
 c0074f6:	681b      	ldr	r3, [r3, #0]
 c0074f8:	430a      	orrs	r2, r1
 c0074fa:	605a      	str	r2, [r3, #4]
  }
}
 c0074fc:	bf00      	nop
 c0074fe:	370c      	adds	r7, #12
 c007500:	46bd      	mov	sp, r7
 c007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007506:	4770      	bx	lr

0c007508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c007508:	b580      	push	{r7, lr}
 c00750a:	b098      	sub	sp, #96	@ 0x60
 c00750c:	af02      	add	r7, sp, #8
 c00750e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c007510:	687b      	ldr	r3, [r7, #4]
 c007512:	2200      	movs	r2, #0
 c007514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c007518:	f7fa f9ba 	bl	c001890 <HAL_GetTick>
 c00751c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c00751e:	687b      	ldr	r3, [r7, #4]
 c007520:	681b      	ldr	r3, [r3, #0]
 c007522:	681b      	ldr	r3, [r3, #0]
 c007524:	f003 0308 	and.w	r3, r3, #8
 c007528:	2b08      	cmp	r3, #8
 c00752a:	d12f      	bne.n	c00758c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00752c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c007530:	9300      	str	r3, [sp, #0]
 c007532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c007534:	2200      	movs	r2, #0
 c007536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 c00753a:	6878      	ldr	r0, [r7, #4]
 c00753c:	f000 f88e 	bl	c00765c <UART_WaitOnFlagUntilTimeout>
 c007540:	4603      	mov	r3, r0
 c007542:	2b00      	cmp	r3, #0
 c007544:	d022      	beq.n	c00758c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c007546:	687b      	ldr	r3, [r7, #4]
 c007548:	681b      	ldr	r3, [r3, #0]
 c00754a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c00754e:	e853 3f00 	ldrex	r3, [r3]
 c007552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 c007554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c007556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c00755a:	653b      	str	r3, [r7, #80]	@ 0x50
 c00755c:	687b      	ldr	r3, [r7, #4]
 c00755e:	681b      	ldr	r3, [r3, #0]
 c007560:	461a      	mov	r2, r3
 c007562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c007564:	647b      	str	r3, [r7, #68]	@ 0x44
 c007566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c007568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 c00756a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 c00756c:	e841 2300 	strex	r3, r2, [r1]
 c007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 c007572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c007574:	2b00      	cmp	r3, #0
 c007576:	d1e6      	bne.n	c007546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c007578:	687b      	ldr	r3, [r7, #4]
 c00757a:	2220      	movs	r2, #32
 c00757c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 c007580:	687b      	ldr	r3, [r7, #4]
 c007582:	2200      	movs	r2, #0
 c007584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c007588:	2303      	movs	r3, #3
 c00758a:	e063      	b.n	c007654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c00758c:	687b      	ldr	r3, [r7, #4]
 c00758e:	681b      	ldr	r3, [r3, #0]
 c007590:	681b      	ldr	r3, [r3, #0]
 c007592:	f003 0304 	and.w	r3, r3, #4
 c007596:	2b04      	cmp	r3, #4
 c007598:	d149      	bne.n	c00762e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00759a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c00759e:	9300      	str	r3, [sp, #0]
 c0075a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c0075a2:	2200      	movs	r2, #0
 c0075a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 c0075a8:	6878      	ldr	r0, [r7, #4]
 c0075aa:	f000 f857 	bl	c00765c <UART_WaitOnFlagUntilTimeout>
 c0075ae:	4603      	mov	r3, r0
 c0075b0:	2b00      	cmp	r3, #0
 c0075b2:	d03c      	beq.n	c00762e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c0075b4:	687b      	ldr	r3, [r7, #4]
 c0075b6:	681b      	ldr	r3, [r3, #0]
 c0075b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0075bc:	e853 3f00 	ldrex	r3, [r3]
 c0075c0:	623b      	str	r3, [r7, #32]
   return(result);
 c0075c2:	6a3b      	ldr	r3, [r7, #32]
 c0075c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c0075c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c0075ca:	687b      	ldr	r3, [r7, #4]
 c0075cc:	681b      	ldr	r3, [r3, #0]
 c0075ce:	461a      	mov	r2, r3
 c0075d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0075d2:	633b      	str	r3, [r7, #48]	@ 0x30
 c0075d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0075d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c0075d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 c0075da:	e841 2300 	strex	r3, r2, [r1]
 c0075de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 c0075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0075e2:	2b00      	cmp	r3, #0
 c0075e4:	d1e6      	bne.n	c0075b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0075e6:	687b      	ldr	r3, [r7, #4]
 c0075e8:	681b      	ldr	r3, [r3, #0]
 c0075ea:	3308      	adds	r3, #8
 c0075ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0075ee:	693b      	ldr	r3, [r7, #16]
 c0075f0:	e853 3f00 	ldrex	r3, [r3]
 c0075f4:	60fb      	str	r3, [r7, #12]
   return(result);
 c0075f6:	68fb      	ldr	r3, [r7, #12]
 c0075f8:	f023 0301 	bic.w	r3, r3, #1
 c0075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 c0075fe:	687b      	ldr	r3, [r7, #4]
 c007600:	681b      	ldr	r3, [r3, #0]
 c007602:	3308      	adds	r3, #8
 c007604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007606:	61fa      	str	r2, [r7, #28]
 c007608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00760a:	69b9      	ldr	r1, [r7, #24]
 c00760c:	69fa      	ldr	r2, [r7, #28]
 c00760e:	e841 2300 	strex	r3, r2, [r1]
 c007612:	617b      	str	r3, [r7, #20]
   return(result);
 c007614:	697b      	ldr	r3, [r7, #20]
 c007616:	2b00      	cmp	r3, #0
 c007618:	d1e5      	bne.n	c0075e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c00761a:	687b      	ldr	r3, [r7, #4]
 c00761c:	2220      	movs	r2, #32
 c00761e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 c007622:	687b      	ldr	r3, [r7, #4]
 c007624:	2200      	movs	r2, #0
 c007626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00762a:	2303      	movs	r3, #3
 c00762c:	e012      	b.n	c007654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c00762e:	687b      	ldr	r3, [r7, #4]
 c007630:	2220      	movs	r2, #32
 c007632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c007636:	687b      	ldr	r3, [r7, #4]
 c007638:	2220      	movs	r2, #32
 c00763a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00763e:	687b      	ldr	r3, [r7, #4]
 c007640:	2200      	movs	r2, #0
 c007642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c007644:	687b      	ldr	r3, [r7, #4]
 c007646:	2200      	movs	r2, #0
 c007648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 c00764a:	687b      	ldr	r3, [r7, #4]
 c00764c:	2200      	movs	r2, #0
 c00764e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c007652:	2300      	movs	r3, #0
}
 c007654:	4618      	mov	r0, r3
 c007656:	3758      	adds	r7, #88	@ 0x58
 c007658:	46bd      	mov	sp, r7
 c00765a:	bd80      	pop	{r7, pc}

0c00765c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c00765c:	b580      	push	{r7, lr}
 c00765e:	b084      	sub	sp, #16
 c007660:	af00      	add	r7, sp, #0
 c007662:	60f8      	str	r0, [r7, #12]
 c007664:	60b9      	str	r1, [r7, #8]
 c007666:	603b      	str	r3, [r7, #0]
 c007668:	4613      	mov	r3, r2
 c00766a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00766c:	e04f      	b.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c00766e:	69bb      	ldr	r3, [r7, #24]
 c007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 c007674:	d04b      	beq.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c007676:	f7fa f90b 	bl	c001890 <HAL_GetTick>
 c00767a:	4602      	mov	r2, r0
 c00767c:	683b      	ldr	r3, [r7, #0]
 c00767e:	1ad3      	subs	r3, r2, r3
 c007680:	69ba      	ldr	r2, [r7, #24]
 c007682:	429a      	cmp	r2, r3
 c007684:	d302      	bcc.n	c00768c <UART_WaitOnFlagUntilTimeout+0x30>
 c007686:	69bb      	ldr	r3, [r7, #24]
 c007688:	2b00      	cmp	r3, #0
 c00768a:	d101      	bne.n	c007690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c00768c:	2303      	movs	r3, #3
 c00768e:	e04e      	b.n	c00772e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 c007690:	68fb      	ldr	r3, [r7, #12]
 c007692:	681b      	ldr	r3, [r3, #0]
 c007694:	681b      	ldr	r3, [r3, #0]
 c007696:	f003 0304 	and.w	r3, r3, #4
 c00769a:	2b00      	cmp	r3, #0
 c00769c:	d037      	beq.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
 c00769e:	68bb      	ldr	r3, [r7, #8]
 c0076a0:	2b80      	cmp	r3, #128	@ 0x80
 c0076a2:	d034      	beq.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
 c0076a4:	68bb      	ldr	r3, [r7, #8]
 c0076a6:	2b40      	cmp	r3, #64	@ 0x40
 c0076a8:	d031      	beq.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c0076aa:	68fb      	ldr	r3, [r7, #12]
 c0076ac:	681b      	ldr	r3, [r3, #0]
 c0076ae:	69db      	ldr	r3, [r3, #28]
 c0076b0:	f003 0308 	and.w	r3, r3, #8
 c0076b4:	2b08      	cmp	r3, #8
 c0076b6:	d110      	bne.n	c0076da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c0076b8:	68fb      	ldr	r3, [r7, #12]
 c0076ba:	681b      	ldr	r3, [r3, #0]
 c0076bc:	2208      	movs	r2, #8
 c0076be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c0076c0:	68f8      	ldr	r0, [r7, #12]
 c0076c2:	f000 f838 	bl	c007736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 c0076c6:	68fb      	ldr	r3, [r7, #12]
 c0076c8:	2208      	movs	r2, #8
 c0076ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0076ce:	68fb      	ldr	r3, [r7, #12]
 c0076d0:	2200      	movs	r2, #0
 c0076d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 c0076d6:	2301      	movs	r3, #1
 c0076d8:	e029      	b.n	c00772e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c0076da:	68fb      	ldr	r3, [r7, #12]
 c0076dc:	681b      	ldr	r3, [r3, #0]
 c0076de:	69db      	ldr	r3, [r3, #28]
 c0076e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c0076e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c0076e8:	d111      	bne.n	c00770e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c0076ea:	68fb      	ldr	r3, [r7, #12]
 c0076ec:	681b      	ldr	r3, [r3, #0]
 c0076ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 c0076f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c0076f4:	68f8      	ldr	r0, [r7, #12]
 c0076f6:	f000 f81e 	bl	c007736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0076fa:	68fb      	ldr	r3, [r7, #12]
 c0076fc:	2220      	movs	r2, #32
 c0076fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c007702:	68fb      	ldr	r3, [r7, #12]
 c007704:	2200      	movs	r2, #0
 c007706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 c00770a:	2303      	movs	r3, #3
 c00770c:	e00f      	b.n	c00772e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00770e:	68fb      	ldr	r3, [r7, #12]
 c007710:	681b      	ldr	r3, [r3, #0]
 c007712:	69da      	ldr	r2, [r3, #28]
 c007714:	68bb      	ldr	r3, [r7, #8]
 c007716:	4013      	ands	r3, r2
 c007718:	68ba      	ldr	r2, [r7, #8]
 c00771a:	429a      	cmp	r2, r3
 c00771c:	bf0c      	ite	eq
 c00771e:	2301      	moveq	r3, #1
 c007720:	2300      	movne	r3, #0
 c007722:	b2db      	uxtb	r3, r3
 c007724:	461a      	mov	r2, r3
 c007726:	79fb      	ldrb	r3, [r7, #7]
 c007728:	429a      	cmp	r2, r3
 c00772a:	d0a0      	beq.n	c00766e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c00772c:	2300      	movs	r3, #0
}
 c00772e:	4618      	mov	r0, r3
 c007730:	3710      	adds	r7, #16
 c007732:	46bd      	mov	sp, r7
 c007734:	bd80      	pop	{r7, pc}

0c007736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c007736:	b480      	push	{r7}
 c007738:	b095      	sub	sp, #84	@ 0x54
 c00773a:	af00      	add	r7, sp, #0
 c00773c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00773e:	687b      	ldr	r3, [r7, #4]
 c007740:	681b      	ldr	r3, [r3, #0]
 c007742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c007744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c007746:	e853 3f00 	ldrex	r3, [r3]
 c00774a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 c00774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00774e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c007752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c007754:	687b      	ldr	r3, [r7, #4]
 c007756:	681b      	ldr	r3, [r3, #0]
 c007758:	461a      	mov	r2, r3
 c00775a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00775c:	643b      	str	r3, [r7, #64]	@ 0x40
 c00775e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c007760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 c007762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 c007764:	e841 2300 	strex	r3, r2, [r1]
 c007768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 c00776a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c00776c:	2b00      	cmp	r3, #0
 c00776e:	d1e6      	bne.n	c00773e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c007770:	687b      	ldr	r3, [r7, #4]
 c007772:	681b      	ldr	r3, [r3, #0]
 c007774:	3308      	adds	r3, #8
 c007776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c007778:	6a3b      	ldr	r3, [r7, #32]
 c00777a:	e853 3f00 	ldrex	r3, [r3]
 c00777e:	61fb      	str	r3, [r7, #28]
   return(result);
 c007780:	69fb      	ldr	r3, [r7, #28]
 c007782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c007786:	f023 0301 	bic.w	r3, r3, #1
 c00778a:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00778c:	687b      	ldr	r3, [r7, #4]
 c00778e:	681b      	ldr	r3, [r3, #0]
 c007790:	3308      	adds	r3, #8
 c007792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 c007796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c007798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 c00779a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 c00779c:	e841 2300 	strex	r3, r2, [r1]
 c0077a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 c0077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0077a4:	2b00      	cmp	r3, #0
 c0077a6:	d1e3      	bne.n	c007770 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c0077a8:	687b      	ldr	r3, [r7, #4]
 c0077aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c0077ac:	2b01      	cmp	r3, #1
 c0077ae:	d118      	bne.n	c0077e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0077b0:	687b      	ldr	r3, [r7, #4]
 c0077b2:	681b      	ldr	r3, [r3, #0]
 c0077b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0077b6:	68fb      	ldr	r3, [r7, #12]
 c0077b8:	e853 3f00 	ldrex	r3, [r3]
 c0077bc:	60bb      	str	r3, [r7, #8]
   return(result);
 c0077be:	68bb      	ldr	r3, [r7, #8]
 c0077c0:	f023 0310 	bic.w	r3, r3, #16
 c0077c4:	647b      	str	r3, [r7, #68]	@ 0x44
 c0077c6:	687b      	ldr	r3, [r7, #4]
 c0077c8:	681b      	ldr	r3, [r3, #0]
 c0077ca:	461a      	mov	r2, r3
 c0077cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c0077ce:	61bb      	str	r3, [r7, #24]
 c0077d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0077d2:	6979      	ldr	r1, [r7, #20]
 c0077d4:	69ba      	ldr	r2, [r7, #24]
 c0077d6:	e841 2300 	strex	r3, r2, [r1]
 c0077da:	613b      	str	r3, [r7, #16]
   return(result);
 c0077dc:	693b      	ldr	r3, [r7, #16]
 c0077de:	2b00      	cmp	r3, #0
 c0077e0:	d1e6      	bne.n	c0077b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c0077e2:	687b      	ldr	r3, [r7, #4]
 c0077e4:	2220      	movs	r2, #32
 c0077e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0077ea:	687b      	ldr	r3, [r7, #4]
 c0077ec:	2200      	movs	r2, #0
 c0077ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c0077f0:	687b      	ldr	r3, [r7, #4]
 c0077f2:	2200      	movs	r2, #0
 c0077f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 c0077f6:	bf00      	nop
 c0077f8:	3754      	adds	r7, #84	@ 0x54
 c0077fa:	46bd      	mov	sp, r7
 c0077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007800:	4770      	bx	lr

0c007802 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c007802:	b480      	push	{r7}
 c007804:	b085      	sub	sp, #20
 c007806:	af00      	add	r7, sp, #0
 c007808:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00780a:	687b      	ldr	r3, [r7, #4]
 c00780c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c007810:	2b01      	cmp	r3, #1
 c007812:	d101      	bne.n	c007818 <HAL_UARTEx_DisableFifoMode+0x16>
 c007814:	2302      	movs	r3, #2
 c007816:	e027      	b.n	c007868 <HAL_UARTEx_DisableFifoMode+0x66>
 c007818:	687b      	ldr	r3, [r7, #4]
 c00781a:	2201      	movs	r2, #1
 c00781c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c007820:	687b      	ldr	r3, [r7, #4]
 c007822:	2224      	movs	r2, #36	@ 0x24
 c007824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007828:	687b      	ldr	r3, [r7, #4]
 c00782a:	681b      	ldr	r3, [r3, #0]
 c00782c:	681b      	ldr	r3, [r3, #0]
 c00782e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c007830:	687b      	ldr	r3, [r7, #4]
 c007832:	681b      	ldr	r3, [r3, #0]
 c007834:	681a      	ldr	r2, [r3, #0]
 c007836:	687b      	ldr	r3, [r7, #4]
 c007838:	681b      	ldr	r3, [r3, #0]
 c00783a:	f022 0201 	bic.w	r2, r2, #1
 c00783e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c007840:	68fb      	ldr	r3, [r7, #12]
 c007842:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 c007846:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c007848:	687b      	ldr	r3, [r7, #4]
 c00784a:	2200      	movs	r2, #0
 c00784c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00784e:	687b      	ldr	r3, [r7, #4]
 c007850:	681b      	ldr	r3, [r3, #0]
 c007852:	68fa      	ldr	r2, [r7, #12]
 c007854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007856:	687b      	ldr	r3, [r7, #4]
 c007858:	2220      	movs	r2, #32
 c00785a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00785e:	687b      	ldr	r3, [r7, #4]
 c007860:	2200      	movs	r2, #0
 c007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c007866:	2300      	movs	r3, #0
}
 c007868:	4618      	mov	r0, r3
 c00786a:	3714      	adds	r7, #20
 c00786c:	46bd      	mov	sp, r7
 c00786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007872:	4770      	bx	lr

0c007874 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c007874:	b580      	push	{r7, lr}
 c007876:	b084      	sub	sp, #16
 c007878:	af00      	add	r7, sp, #0
 c00787a:	6078      	str	r0, [r7, #4]
 c00787c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00787e:	687b      	ldr	r3, [r7, #4]
 c007880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c007884:	2b01      	cmp	r3, #1
 c007886:	d101      	bne.n	c00788c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c007888:	2302      	movs	r3, #2
 c00788a:	e02d      	b.n	c0078e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00788c:	687b      	ldr	r3, [r7, #4]
 c00788e:	2201      	movs	r2, #1
 c007890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c007894:	687b      	ldr	r3, [r7, #4]
 c007896:	2224      	movs	r2, #36	@ 0x24
 c007898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00789c:	687b      	ldr	r3, [r7, #4]
 c00789e:	681b      	ldr	r3, [r3, #0]
 c0078a0:	681b      	ldr	r3, [r3, #0]
 c0078a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0078a4:	687b      	ldr	r3, [r7, #4]
 c0078a6:	681b      	ldr	r3, [r3, #0]
 c0078a8:	681a      	ldr	r2, [r3, #0]
 c0078aa:	687b      	ldr	r3, [r7, #4]
 c0078ac:	681b      	ldr	r3, [r3, #0]
 c0078ae:	f022 0201 	bic.w	r2, r2, #1
 c0078b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0078b4:	687b      	ldr	r3, [r7, #4]
 c0078b6:	681b      	ldr	r3, [r3, #0]
 c0078b8:	689b      	ldr	r3, [r3, #8]
 c0078ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 c0078be:	687b      	ldr	r3, [r7, #4]
 c0078c0:	681b      	ldr	r3, [r3, #0]
 c0078c2:	683a      	ldr	r2, [r7, #0]
 c0078c4:	430a      	orrs	r2, r1
 c0078c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0078c8:	6878      	ldr	r0, [r7, #4]
 c0078ca:	f000 f84f 	bl	c00796c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0078ce:	687b      	ldr	r3, [r7, #4]
 c0078d0:	681b      	ldr	r3, [r3, #0]
 c0078d2:	68fa      	ldr	r2, [r7, #12]
 c0078d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0078d6:	687b      	ldr	r3, [r7, #4]
 c0078d8:	2220      	movs	r2, #32
 c0078da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0078de:	687b      	ldr	r3, [r7, #4]
 c0078e0:	2200      	movs	r2, #0
 c0078e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c0078e6:	2300      	movs	r3, #0
}
 c0078e8:	4618      	mov	r0, r3
 c0078ea:	3710      	adds	r7, #16
 c0078ec:	46bd      	mov	sp, r7
 c0078ee:	bd80      	pop	{r7, pc}

0c0078f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0078f0:	b580      	push	{r7, lr}
 c0078f2:	b084      	sub	sp, #16
 c0078f4:	af00      	add	r7, sp, #0
 c0078f6:	6078      	str	r0, [r7, #4]
 c0078f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0078fa:	687b      	ldr	r3, [r7, #4]
 c0078fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c007900:	2b01      	cmp	r3, #1
 c007902:	d101      	bne.n	c007908 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c007904:	2302      	movs	r3, #2
 c007906:	e02d      	b.n	c007964 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c007908:	687b      	ldr	r3, [r7, #4]
 c00790a:	2201      	movs	r2, #1
 c00790c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c007910:	687b      	ldr	r3, [r7, #4]
 c007912:	2224      	movs	r2, #36	@ 0x24
 c007914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007918:	687b      	ldr	r3, [r7, #4]
 c00791a:	681b      	ldr	r3, [r3, #0]
 c00791c:	681b      	ldr	r3, [r3, #0]
 c00791e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c007920:	687b      	ldr	r3, [r7, #4]
 c007922:	681b      	ldr	r3, [r3, #0]
 c007924:	681a      	ldr	r2, [r3, #0]
 c007926:	687b      	ldr	r3, [r7, #4]
 c007928:	681b      	ldr	r3, [r3, #0]
 c00792a:	f022 0201 	bic.w	r2, r2, #1
 c00792e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c007930:	687b      	ldr	r3, [r7, #4]
 c007932:	681b      	ldr	r3, [r3, #0]
 c007934:	689b      	ldr	r3, [r3, #8]
 c007936:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 c00793a:	687b      	ldr	r3, [r7, #4]
 c00793c:	681b      	ldr	r3, [r3, #0]
 c00793e:	683a      	ldr	r2, [r7, #0]
 c007940:	430a      	orrs	r2, r1
 c007942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c007944:	6878      	ldr	r0, [r7, #4]
 c007946:	f000 f811 	bl	c00796c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00794a:	687b      	ldr	r3, [r7, #4]
 c00794c:	681b      	ldr	r3, [r3, #0]
 c00794e:	68fa      	ldr	r2, [r7, #12]
 c007950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007952:	687b      	ldr	r3, [r7, #4]
 c007954:	2220      	movs	r2, #32
 c007956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00795a:	687b      	ldr	r3, [r7, #4]
 c00795c:	2200      	movs	r2, #0
 c00795e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c007962:	2300      	movs	r3, #0
}
 c007964:	4618      	mov	r0, r3
 c007966:	3710      	adds	r7, #16
 c007968:	46bd      	mov	sp, r7
 c00796a:	bd80      	pop	{r7, pc}

0c00796c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00796c:	b480      	push	{r7}
 c00796e:	b085      	sub	sp, #20
 c007970:	af00      	add	r7, sp, #0
 c007972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c007974:	687b      	ldr	r3, [r7, #4]
 c007976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c007978:	2b00      	cmp	r3, #0
 c00797a:	d108      	bne.n	c00798e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c00797c:	687b      	ldr	r3, [r7, #4]
 c00797e:	2201      	movs	r2, #1
 c007980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 c007984:	687b      	ldr	r3, [r7, #4]
 c007986:	2201      	movs	r2, #1
 c007988:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c00798c:	e031      	b.n	c0079f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00798e:	2308      	movs	r3, #8
 c007990:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c007992:	2308      	movs	r3, #8
 c007994:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c007996:	687b      	ldr	r3, [r7, #4]
 c007998:	681b      	ldr	r3, [r3, #0]
 c00799a:	689b      	ldr	r3, [r3, #8]
 c00799c:	0e5b      	lsrs	r3, r3, #25
 c00799e:	b2db      	uxtb	r3, r3
 c0079a0:	f003 0307 	and.w	r3, r3, #7
 c0079a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0079a6:	687b      	ldr	r3, [r7, #4]
 c0079a8:	681b      	ldr	r3, [r3, #0]
 c0079aa:	689b      	ldr	r3, [r3, #8]
 c0079ac:	0f5b      	lsrs	r3, r3, #29
 c0079ae:	b2db      	uxtb	r3, r3
 c0079b0:	f003 0307 	and.w	r3, r3, #7
 c0079b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c0079b6:	7bbb      	ldrb	r3, [r7, #14]
 c0079b8:	7b3a      	ldrb	r2, [r7, #12]
 c0079ba:	4911      	ldr	r1, [pc, #68]	@ (c007a00 <UARTEx_SetNbDataToProcess+0x94>)
 c0079bc:	5c8a      	ldrb	r2, [r1, r2]
 c0079be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c0079c2:	7b3a      	ldrb	r2, [r7, #12]
 c0079c4:	490f      	ldr	r1, [pc, #60]	@ (c007a04 <UARTEx_SetNbDataToProcess+0x98>)
 c0079c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c0079c8:	fb93 f3f2 	sdiv	r3, r3, r2
 c0079cc:	b29a      	uxth	r2, r3
 c0079ce:	687b      	ldr	r3, [r7, #4]
 c0079d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c0079d4:	7bfb      	ldrb	r3, [r7, #15]
 c0079d6:	7b7a      	ldrb	r2, [r7, #13]
 c0079d8:	4909      	ldr	r1, [pc, #36]	@ (c007a00 <UARTEx_SetNbDataToProcess+0x94>)
 c0079da:	5c8a      	ldrb	r2, [r1, r2]
 c0079dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c0079e0:	7b7a      	ldrb	r2, [r7, #13]
 c0079e2:	4908      	ldr	r1, [pc, #32]	@ (c007a04 <UARTEx_SetNbDataToProcess+0x98>)
 c0079e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c0079e6:	fb93 f3f2 	sdiv	r3, r3, r2
 c0079ea:	b29a      	uxth	r2, r3
 c0079ec:	687b      	ldr	r3, [r7, #4]
 c0079ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 c0079f2:	bf00      	nop
 c0079f4:	3714      	adds	r7, #20
 c0079f6:	46bd      	mov	sp, r7
 c0079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0079fc:	4770      	bx	lr
 c0079fe:	bf00      	nop
 c007a00:	0c00845c 	.word	0x0c00845c
 c007a04:	0c008464 	.word	0x0c008464

0c007a08 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 c007a08:	b480      	push	{r7}
 c007a0a:	b08b      	sub	sp, #44	@ 0x2c
 c007a0c:	af00      	add	r7, sp, #0
 c007a0e:	60f8      	str	r0, [r7, #12]
 c007a10:	60b9      	str	r1, [r7, #8]
 c007a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 c007a14:	68fb      	ldr	r3, [r7, #12]
 c007a16:	681a      	ldr	r2, [r3, #0]
 c007a18:	68bb      	ldr	r3, [r7, #8]
 c007a1a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007a1c:	697b      	ldr	r3, [r7, #20]
 c007a1e:	fa93 f3a3 	rbit	r3, r3
 c007a22:	613b      	str	r3, [r7, #16]
  return result;
 c007a24:	693b      	ldr	r3, [r7, #16]
 c007a26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c007a28:	69bb      	ldr	r3, [r7, #24]
 c007a2a:	2b00      	cmp	r3, #0
 c007a2c:	d101      	bne.n	c007a32 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 c007a2e:	2320      	movs	r3, #32
 c007a30:	e003      	b.n	c007a3a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 c007a32:	69bb      	ldr	r3, [r7, #24]
 c007a34:	fab3 f383 	clz	r3, r3
 c007a38:	b2db      	uxtb	r3, r3
 c007a3a:	005b      	lsls	r3, r3, #1
 c007a3c:	2103      	movs	r1, #3
 c007a3e:	fa01 f303 	lsl.w	r3, r1, r3
 c007a42:	43db      	mvns	r3, r3
 c007a44:	401a      	ands	r2, r3
 c007a46:	68bb      	ldr	r3, [r7, #8]
 c007a48:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007a4a:	6a3b      	ldr	r3, [r7, #32]
 c007a4c:	fa93 f3a3 	rbit	r3, r3
 c007a50:	61fb      	str	r3, [r7, #28]
  return result;
 c007a52:	69fb      	ldr	r3, [r7, #28]
 c007a54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007a58:	2b00      	cmp	r3, #0
 c007a5a:	d101      	bne.n	c007a60 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 c007a5c:	2320      	movs	r3, #32
 c007a5e:	e003      	b.n	c007a68 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 c007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007a62:	fab3 f383 	clz	r3, r3
 c007a66:	b2db      	uxtb	r3, r3
 c007a68:	005b      	lsls	r3, r3, #1
 c007a6a:	6879      	ldr	r1, [r7, #4]
 c007a6c:	fa01 f303 	lsl.w	r3, r1, r3
 c007a70:	431a      	orrs	r2, r3
 c007a72:	68fb      	ldr	r3, [r7, #12]
 c007a74:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 c007a76:	bf00      	nop
 c007a78:	372c      	adds	r7, #44	@ 0x2c
 c007a7a:	46bd      	mov	sp, r7
 c007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007a80:	4770      	bx	lr

0c007a82 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 c007a82:	b480      	push	{r7}
 c007a84:	b085      	sub	sp, #20
 c007a86:	af00      	add	r7, sp, #0
 c007a88:	60f8      	str	r0, [r7, #12]
 c007a8a:	60b9      	str	r1, [r7, #8]
 c007a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 c007a8e:	68fb      	ldr	r3, [r7, #12]
 c007a90:	685a      	ldr	r2, [r3, #4]
 c007a92:	68bb      	ldr	r3, [r7, #8]
 c007a94:	43db      	mvns	r3, r3
 c007a96:	401a      	ands	r2, r3
 c007a98:	68bb      	ldr	r3, [r7, #8]
 c007a9a:	6879      	ldr	r1, [r7, #4]
 c007a9c:	fb01 f303 	mul.w	r3, r1, r3
 c007aa0:	431a      	orrs	r2, r3
 c007aa2:	68fb      	ldr	r3, [r7, #12]
 c007aa4:	605a      	str	r2, [r3, #4]
}
 c007aa6:	bf00      	nop
 c007aa8:	3714      	adds	r7, #20
 c007aaa:	46bd      	mov	sp, r7
 c007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007ab0:	4770      	bx	lr

0c007ab2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 c007ab2:	b480      	push	{r7}
 c007ab4:	b08b      	sub	sp, #44	@ 0x2c
 c007ab6:	af00      	add	r7, sp, #0
 c007ab8:	60f8      	str	r0, [r7, #12]
 c007aba:	60b9      	str	r1, [r7, #8]
 c007abc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 c007abe:	68fb      	ldr	r3, [r7, #12]
 c007ac0:	689a      	ldr	r2, [r3, #8]
 c007ac2:	68bb      	ldr	r3, [r7, #8]
 c007ac4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007ac6:	697b      	ldr	r3, [r7, #20]
 c007ac8:	fa93 f3a3 	rbit	r3, r3
 c007acc:	613b      	str	r3, [r7, #16]
  return result;
 c007ace:	693b      	ldr	r3, [r7, #16]
 c007ad0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c007ad2:	69bb      	ldr	r3, [r7, #24]
 c007ad4:	2b00      	cmp	r3, #0
 c007ad6:	d101      	bne.n	c007adc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 c007ad8:	2320      	movs	r3, #32
 c007ada:	e003      	b.n	c007ae4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 c007adc:	69bb      	ldr	r3, [r7, #24]
 c007ade:	fab3 f383 	clz	r3, r3
 c007ae2:	b2db      	uxtb	r3, r3
 c007ae4:	005b      	lsls	r3, r3, #1
 c007ae6:	2103      	movs	r1, #3
 c007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 c007aec:	43db      	mvns	r3, r3
 c007aee:	401a      	ands	r2, r3
 c007af0:	68bb      	ldr	r3, [r7, #8]
 c007af2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007af4:	6a3b      	ldr	r3, [r7, #32]
 c007af6:	fa93 f3a3 	rbit	r3, r3
 c007afa:	61fb      	str	r3, [r7, #28]
  return result;
 c007afc:	69fb      	ldr	r3, [r7, #28]
 c007afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007b02:	2b00      	cmp	r3, #0
 c007b04:	d101      	bne.n	c007b0a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 c007b06:	2320      	movs	r3, #32
 c007b08:	e003      	b.n	c007b12 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 c007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007b0c:	fab3 f383 	clz	r3, r3
 c007b10:	b2db      	uxtb	r3, r3
 c007b12:	005b      	lsls	r3, r3, #1
 c007b14:	6879      	ldr	r1, [r7, #4]
 c007b16:	fa01 f303 	lsl.w	r3, r1, r3
 c007b1a:	431a      	orrs	r2, r3
 c007b1c:	68fb      	ldr	r3, [r7, #12]
 c007b1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 c007b20:	bf00      	nop
 c007b22:	372c      	adds	r7, #44	@ 0x2c
 c007b24:	46bd      	mov	sp, r7
 c007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007b2a:	4770      	bx	lr

0c007b2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 c007b2c:	b480      	push	{r7}
 c007b2e:	b08b      	sub	sp, #44	@ 0x2c
 c007b30:	af00      	add	r7, sp, #0
 c007b32:	60f8      	str	r0, [r7, #12]
 c007b34:	60b9      	str	r1, [r7, #8]
 c007b36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 c007b38:	68fb      	ldr	r3, [r7, #12]
 c007b3a:	68da      	ldr	r2, [r3, #12]
 c007b3c:	68bb      	ldr	r3, [r7, #8]
 c007b3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007b40:	697b      	ldr	r3, [r7, #20]
 c007b42:	fa93 f3a3 	rbit	r3, r3
 c007b46:	613b      	str	r3, [r7, #16]
  return result;
 c007b48:	693b      	ldr	r3, [r7, #16]
 c007b4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c007b4c:	69bb      	ldr	r3, [r7, #24]
 c007b4e:	2b00      	cmp	r3, #0
 c007b50:	d101      	bne.n	c007b56 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 c007b52:	2320      	movs	r3, #32
 c007b54:	e003      	b.n	c007b5e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 c007b56:	69bb      	ldr	r3, [r7, #24]
 c007b58:	fab3 f383 	clz	r3, r3
 c007b5c:	b2db      	uxtb	r3, r3
 c007b5e:	005b      	lsls	r3, r3, #1
 c007b60:	2103      	movs	r1, #3
 c007b62:	fa01 f303 	lsl.w	r3, r1, r3
 c007b66:	43db      	mvns	r3, r3
 c007b68:	401a      	ands	r2, r3
 c007b6a:	68bb      	ldr	r3, [r7, #8]
 c007b6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007b6e:	6a3b      	ldr	r3, [r7, #32]
 c007b70:	fa93 f3a3 	rbit	r3, r3
 c007b74:	61fb      	str	r3, [r7, #28]
  return result;
 c007b76:	69fb      	ldr	r3, [r7, #28]
 c007b78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007b7c:	2b00      	cmp	r3, #0
 c007b7e:	d101      	bne.n	c007b84 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 c007b80:	2320      	movs	r3, #32
 c007b82:	e003      	b.n	c007b8c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 c007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007b86:	fab3 f383 	clz	r3, r3
 c007b8a:	b2db      	uxtb	r3, r3
 c007b8c:	005b      	lsls	r3, r3, #1
 c007b8e:	6879      	ldr	r1, [r7, #4]
 c007b90:	fa01 f303 	lsl.w	r3, r1, r3
 c007b94:	431a      	orrs	r2, r3
 c007b96:	68fb      	ldr	r3, [r7, #12]
 c007b98:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 c007b9a:	bf00      	nop
 c007b9c:	372c      	adds	r7, #44	@ 0x2c
 c007b9e:	46bd      	mov	sp, r7
 c007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007ba4:	4770      	bx	lr

0c007ba6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 c007ba6:	b480      	push	{r7}
 c007ba8:	b08b      	sub	sp, #44	@ 0x2c
 c007baa:	af00      	add	r7, sp, #0
 c007bac:	60f8      	str	r0, [r7, #12]
 c007bae:	60b9      	str	r1, [r7, #8]
 c007bb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 c007bb2:	68fb      	ldr	r3, [r7, #12]
 c007bb4:	6a1a      	ldr	r2, [r3, #32]
 c007bb6:	68bb      	ldr	r3, [r7, #8]
 c007bb8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007bba:	697b      	ldr	r3, [r7, #20]
 c007bbc:	fa93 f3a3 	rbit	r3, r3
 c007bc0:	613b      	str	r3, [r7, #16]
  return result;
 c007bc2:	693b      	ldr	r3, [r7, #16]
 c007bc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c007bc6:	69bb      	ldr	r3, [r7, #24]
 c007bc8:	2b00      	cmp	r3, #0
 c007bca:	d101      	bne.n	c007bd0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 c007bcc:	2320      	movs	r3, #32
 c007bce:	e003      	b.n	c007bd8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 c007bd0:	69bb      	ldr	r3, [r7, #24]
 c007bd2:	fab3 f383 	clz	r3, r3
 c007bd6:	b2db      	uxtb	r3, r3
 c007bd8:	009b      	lsls	r3, r3, #2
 c007bda:	210f      	movs	r1, #15
 c007bdc:	fa01 f303 	lsl.w	r3, r1, r3
 c007be0:	43db      	mvns	r3, r3
 c007be2:	401a      	ands	r2, r3
 c007be4:	68bb      	ldr	r3, [r7, #8]
 c007be6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007be8:	6a3b      	ldr	r3, [r7, #32]
 c007bea:	fa93 f3a3 	rbit	r3, r3
 c007bee:	61fb      	str	r3, [r7, #28]
  return result;
 c007bf0:	69fb      	ldr	r3, [r7, #28]
 c007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007bf6:	2b00      	cmp	r3, #0
 c007bf8:	d101      	bne.n	c007bfe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 c007bfa:	2320      	movs	r3, #32
 c007bfc:	e003      	b.n	c007c06 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 c007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007c00:	fab3 f383 	clz	r3, r3
 c007c04:	b2db      	uxtb	r3, r3
 c007c06:	009b      	lsls	r3, r3, #2
 c007c08:	6879      	ldr	r1, [r7, #4]
 c007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 c007c0e:	431a      	orrs	r2, r3
 c007c10:	68fb      	ldr	r3, [r7, #12]
 c007c12:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 c007c14:	bf00      	nop
 c007c16:	372c      	adds	r7, #44	@ 0x2c
 c007c18:	46bd      	mov	sp, r7
 c007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007c1e:	4770      	bx	lr

0c007c20 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 c007c20:	b480      	push	{r7}
 c007c22:	b08b      	sub	sp, #44	@ 0x2c
 c007c24:	af00      	add	r7, sp, #0
 c007c26:	60f8      	str	r0, [r7, #12]
 c007c28:	60b9      	str	r1, [r7, #8]
 c007c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 c007c2c:	68fb      	ldr	r3, [r7, #12]
 c007c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c007c30:	68bb      	ldr	r3, [r7, #8]
 c007c32:	0a1b      	lsrs	r3, r3, #8
 c007c34:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007c36:	697b      	ldr	r3, [r7, #20]
 c007c38:	fa93 f3a3 	rbit	r3, r3
 c007c3c:	613b      	str	r3, [r7, #16]
  return result;
 c007c3e:	693b      	ldr	r3, [r7, #16]
 c007c40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c007c42:	69bb      	ldr	r3, [r7, #24]
 c007c44:	2b00      	cmp	r3, #0
 c007c46:	d101      	bne.n	c007c4c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 c007c48:	2320      	movs	r3, #32
 c007c4a:	e003      	b.n	c007c54 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 c007c4c:	69bb      	ldr	r3, [r7, #24]
 c007c4e:	fab3 f383 	clz	r3, r3
 c007c52:	b2db      	uxtb	r3, r3
 c007c54:	009b      	lsls	r3, r3, #2
 c007c56:	210f      	movs	r1, #15
 c007c58:	fa01 f303 	lsl.w	r3, r1, r3
 c007c5c:	43db      	mvns	r3, r3
 c007c5e:	401a      	ands	r2, r3
 c007c60:	68bb      	ldr	r3, [r7, #8]
 c007c62:	0a1b      	lsrs	r3, r3, #8
 c007c64:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007c66:	6a3b      	ldr	r3, [r7, #32]
 c007c68:	fa93 f3a3 	rbit	r3, r3
 c007c6c:	61fb      	str	r3, [r7, #28]
  return result;
 c007c6e:	69fb      	ldr	r3, [r7, #28]
 c007c70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007c74:	2b00      	cmp	r3, #0
 c007c76:	d101      	bne.n	c007c7c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 c007c78:	2320      	movs	r3, #32
 c007c7a:	e003      	b.n	c007c84 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 c007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007c7e:	fab3 f383 	clz	r3, r3
 c007c82:	b2db      	uxtb	r3, r3
 c007c84:	009b      	lsls	r3, r3, #2
 c007c86:	6879      	ldr	r1, [r7, #4]
 c007c88:	fa01 f303 	lsl.w	r3, r1, r3
 c007c8c:	431a      	orrs	r2, r3
 c007c8e:	68fb      	ldr	r3, [r7, #12]
 c007c90:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 c007c92:	bf00      	nop
 c007c94:	372c      	adds	r7, #44	@ 0x2c
 c007c96:	46bd      	mov	sp, r7
 c007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007c9c:	4770      	bx	lr

0c007c9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 c007c9e:	b580      	push	{r7, lr}
 c007ca0:	b08a      	sub	sp, #40	@ 0x28
 c007ca2:	af00      	add	r7, sp, #0
 c007ca4:	6078      	str	r0, [r7, #4]
 c007ca6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 c007ca8:	683b      	ldr	r3, [r7, #0]
 c007caa:	681b      	ldr	r3, [r3, #0]
 c007cac:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007cae:	69bb      	ldr	r3, [r7, #24]
 c007cb0:	fa93 f3a3 	rbit	r3, r3
 c007cb4:	617b      	str	r3, [r7, #20]
  return result;
 c007cb6:	697b      	ldr	r3, [r7, #20]
 c007cb8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 c007cba:	69fb      	ldr	r3, [r7, #28]
 c007cbc:	2b00      	cmp	r3, #0
 c007cbe:	d101      	bne.n	c007cc4 <LL_GPIO_Init+0x26>
    return 32U;
 c007cc0:	2320      	movs	r3, #32
 c007cc2:	e003      	b.n	c007ccc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 c007cc4:	69fb      	ldr	r3, [r7, #28]
 c007cc6:	fab3 f383 	clz	r3, r3
 c007cca:	b2db      	uxtb	r3, r3
 c007ccc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 c007cce:	e058      	b.n	c007d82 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 c007cd0:	683b      	ldr	r3, [r7, #0]
 c007cd2:	681a      	ldr	r2, [r3, #0]
 c007cd4:	2101      	movs	r1, #1
 c007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 c007cdc:	4013      	ands	r3, r2
 c007cde:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 c007ce0:	6a3b      	ldr	r3, [r7, #32]
 c007ce2:	2b00      	cmp	r3, #0
 c007ce4:	d04a      	beq.n	c007d7c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 c007ce6:	683b      	ldr	r3, [r7, #0]
 c007ce8:	685b      	ldr	r3, [r3, #4]
 c007cea:	2b01      	cmp	r3, #1
 c007cec:	d003      	beq.n	c007cf6 <LL_GPIO_Init+0x58>
 c007cee:	683b      	ldr	r3, [r7, #0]
 c007cf0:	685b      	ldr	r3, [r3, #4]
 c007cf2:	2b02      	cmp	r3, #2
 c007cf4:	d10e      	bne.n	c007d14 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 c007cf6:	683b      	ldr	r3, [r7, #0]
 c007cf8:	689b      	ldr	r3, [r3, #8]
 c007cfa:	461a      	mov	r2, r3
 c007cfc:	6a39      	ldr	r1, [r7, #32]
 c007cfe:	6878      	ldr	r0, [r7, #4]
 c007d00:	f7ff fed7 	bl	c007ab2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 c007d04:	683b      	ldr	r3, [r7, #0]
 c007d06:	6819      	ldr	r1, [r3, #0]
 c007d08:	683b      	ldr	r3, [r7, #0]
 c007d0a:	68db      	ldr	r3, [r3, #12]
 c007d0c:	461a      	mov	r2, r3
 c007d0e:	6878      	ldr	r0, [r7, #4]
 c007d10:	f7ff feb7 	bl	c007a82 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 c007d14:	683b      	ldr	r3, [r7, #0]
 c007d16:	691b      	ldr	r3, [r3, #16]
 c007d18:	461a      	mov	r2, r3
 c007d1a:	6a39      	ldr	r1, [r7, #32]
 c007d1c:	6878      	ldr	r0, [r7, #4]
 c007d1e:	f7ff ff05 	bl	c007b2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 c007d22:	683b      	ldr	r3, [r7, #0]
 c007d24:	685b      	ldr	r3, [r3, #4]
 c007d26:	2b02      	cmp	r3, #2
 c007d28:	d121      	bne.n	c007d6e <LL_GPIO_Init+0xd0>
 c007d2a:	6a3b      	ldr	r3, [r7, #32]
 c007d2c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c007d2e:	68fb      	ldr	r3, [r7, #12]
 c007d30:	fa93 f3a3 	rbit	r3, r3
 c007d34:	60bb      	str	r3, [r7, #8]
  return result;
 c007d36:	68bb      	ldr	r3, [r7, #8]
 c007d38:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 c007d3a:	693b      	ldr	r3, [r7, #16]
 c007d3c:	2b00      	cmp	r3, #0
 c007d3e:	d101      	bne.n	c007d44 <LL_GPIO_Init+0xa6>
    return 32U;
 c007d40:	2320      	movs	r3, #32
 c007d42:	e003      	b.n	c007d4c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 c007d44:	693b      	ldr	r3, [r7, #16]
 c007d46:	fab3 f383 	clz	r3, r3
 c007d4a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 c007d4c:	2b07      	cmp	r3, #7
 c007d4e:	d807      	bhi.n	c007d60 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 c007d50:	683b      	ldr	r3, [r7, #0]
 c007d52:	695b      	ldr	r3, [r3, #20]
 c007d54:	461a      	mov	r2, r3
 c007d56:	6a39      	ldr	r1, [r7, #32]
 c007d58:	6878      	ldr	r0, [r7, #4]
 c007d5a:	f7ff ff24 	bl	c007ba6 <LL_GPIO_SetAFPin_0_7>
 c007d5e:	e006      	b.n	c007d6e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 c007d60:	683b      	ldr	r3, [r7, #0]
 c007d62:	695b      	ldr	r3, [r3, #20]
 c007d64:	461a      	mov	r2, r3
 c007d66:	6a39      	ldr	r1, [r7, #32]
 c007d68:	6878      	ldr	r0, [r7, #4]
 c007d6a:	f7ff ff59 	bl	c007c20 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 c007d6e:	683b      	ldr	r3, [r7, #0]
 c007d70:	685b      	ldr	r3, [r3, #4]
 c007d72:	461a      	mov	r2, r3
 c007d74:	6a39      	ldr	r1, [r7, #32]
 c007d76:	6878      	ldr	r0, [r7, #4]
 c007d78:	f7ff fe46 	bl	c007a08 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 c007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007d7e:	3301      	adds	r3, #1
 c007d80:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 c007d82:	683b      	ldr	r3, [r7, #0]
 c007d84:	681a      	ldr	r2, [r3, #0]
 c007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c007d88:	fa22 f303 	lsr.w	r3, r2, r3
 c007d8c:	2b00      	cmp	r3, #0
 c007d8e:	d19f      	bne.n	c007cd0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 c007d90:	2300      	movs	r3, #0
}
 c007d92:	4618      	mov	r0, r3
 c007d94:	3728      	adds	r7, #40	@ 0x28
 c007d96:	46bd      	mov	sp, r7
 c007d98:	bd80      	pop	{r7, pc}

0c007d9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 c007d9a:	b084      	sub	sp, #16
 c007d9c:	b580      	push	{r7, lr}
 c007d9e:	b084      	sub	sp, #16
 c007da0:	af00      	add	r7, sp, #0
 c007da2:	6078      	str	r0, [r7, #4]
 c007da4:	f107 001c 	add.w	r0, r7, #28
 c007da8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 c007dac:	687b      	ldr	r3, [r7, #4]
 c007dae:	68db      	ldr	r3, [r3, #12]
 c007db0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 c007db4:	687b      	ldr	r3, [r7, #4]
 c007db6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 c007db8:	6878      	ldr	r0, [r7, #4]
 c007dba:	f000 fa6d 	bl	c008298 <USB_CoreReset>
 c007dbe:	4603      	mov	r3, r0
 c007dc0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 c007dc2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 c007dc6:	2b00      	cmp	r3, #0
 c007dc8:	d106      	bne.n	c007dd8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 c007dca:	687b      	ldr	r3, [r7, #4]
 c007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c007dce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 c007dd2:	687b      	ldr	r3, [r7, #4]
 c007dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 c007dd6:	e005      	b.n	c007de4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 c007dd8:	687b      	ldr	r3, [r7, #4]
 c007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c007ddc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 c007de0:	687b      	ldr	r3, [r7, #4]
 c007de2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 c007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 c007de6:	4618      	mov	r0, r3
 c007de8:	3710      	adds	r7, #16
 c007dea:	46bd      	mov	sp, r7
 c007dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c007df0:	b004      	add	sp, #16
 c007df2:	4770      	bx	lr

0c007df4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 c007df4:	b480      	push	{r7}
 c007df6:	b083      	sub	sp, #12
 c007df8:	af00      	add	r7, sp, #0
 c007dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 c007dfc:	687b      	ldr	r3, [r7, #4]
 c007dfe:	689b      	ldr	r3, [r3, #8]
 c007e00:	f023 0201 	bic.w	r2, r3, #1
 c007e04:	687b      	ldr	r3, [r7, #4]
 c007e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 c007e08:	2300      	movs	r3, #0
}
 c007e0a:	4618      	mov	r0, r3
 c007e0c:	370c      	adds	r7, #12
 c007e0e:	46bd      	mov	sp, r7
 c007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007e14:	4770      	bx	lr

0c007e16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 c007e16:	b580      	push	{r7, lr}
 c007e18:	b084      	sub	sp, #16
 c007e1a:	af00      	add	r7, sp, #0
 c007e1c:	6078      	str	r0, [r7, #4]
 c007e1e:	460b      	mov	r3, r1
 c007e20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 c007e22:	2300      	movs	r3, #0
 c007e24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 c007e26:	687b      	ldr	r3, [r7, #4]
 c007e28:	68db      	ldr	r3, [r3, #12]
 c007e2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 c007e2e:	687b      	ldr	r3, [r7, #4]
 c007e30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 c007e32:	78fb      	ldrb	r3, [r7, #3]
 c007e34:	2b01      	cmp	r3, #1
 c007e36:	d115      	bne.n	c007e64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 c007e38:	687b      	ldr	r3, [r7, #4]
 c007e3a:	68db      	ldr	r3, [r3, #12]
 c007e3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 c007e40:	687b      	ldr	r3, [r7, #4]
 c007e42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 c007e44:	200a      	movs	r0, #10
 c007e46:	f7f9 fd2f 	bl	c0018a8 <HAL_Delay>
      ms += 10U;
 c007e4a:	68fb      	ldr	r3, [r7, #12]
 c007e4c:	330a      	adds	r3, #10
 c007e4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 c007e50:	6878      	ldr	r0, [r7, #4]
 c007e52:	f000 fa13 	bl	c00827c <USB_GetMode>
 c007e56:	4603      	mov	r3, r0
 c007e58:	2b01      	cmp	r3, #1
 c007e5a:	d01e      	beq.n	c007e9a <USB_SetCurrentMode+0x84>
 c007e5c:	68fb      	ldr	r3, [r7, #12]
 c007e5e:	2bc7      	cmp	r3, #199	@ 0xc7
 c007e60:	d9f0      	bls.n	c007e44 <USB_SetCurrentMode+0x2e>
 c007e62:	e01a      	b.n	c007e9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 c007e64:	78fb      	ldrb	r3, [r7, #3]
 c007e66:	2b00      	cmp	r3, #0
 c007e68:	d115      	bne.n	c007e96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 c007e6a:	687b      	ldr	r3, [r7, #4]
 c007e6c:	68db      	ldr	r3, [r3, #12]
 c007e6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 c007e72:	687b      	ldr	r3, [r7, #4]
 c007e74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 c007e76:	200a      	movs	r0, #10
 c007e78:	f7f9 fd16 	bl	c0018a8 <HAL_Delay>
      ms += 10U;
 c007e7c:	68fb      	ldr	r3, [r7, #12]
 c007e7e:	330a      	adds	r3, #10
 c007e80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 c007e82:	6878      	ldr	r0, [r7, #4]
 c007e84:	f000 f9fa 	bl	c00827c <USB_GetMode>
 c007e88:	4603      	mov	r3, r0
 c007e8a:	2b00      	cmp	r3, #0
 c007e8c:	d005      	beq.n	c007e9a <USB_SetCurrentMode+0x84>
 c007e8e:	68fb      	ldr	r3, [r7, #12]
 c007e90:	2bc7      	cmp	r3, #199	@ 0xc7
 c007e92:	d9f0      	bls.n	c007e76 <USB_SetCurrentMode+0x60>
 c007e94:	e001      	b.n	c007e9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 c007e96:	2301      	movs	r3, #1
 c007e98:	e005      	b.n	c007ea6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 c007e9a:	68fb      	ldr	r3, [r7, #12]
 c007e9c:	2bc8      	cmp	r3, #200	@ 0xc8
 c007e9e:	d101      	bne.n	c007ea4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 c007ea0:	2301      	movs	r3, #1
 c007ea2:	e000      	b.n	c007ea6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 c007ea4:	2300      	movs	r3, #0
}
 c007ea6:	4618      	mov	r0, r3
 c007ea8:	3710      	adds	r7, #16
 c007eaa:	46bd      	mov	sp, r7
 c007eac:	bd80      	pop	{r7, pc}
	...

0c007eb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 c007eb0:	b084      	sub	sp, #16
 c007eb2:	b580      	push	{r7, lr}
 c007eb4:	b086      	sub	sp, #24
 c007eb6:	af00      	add	r7, sp, #0
 c007eb8:	6078      	str	r0, [r7, #4]
 c007eba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 c007ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 c007ec2:	2300      	movs	r3, #0
 c007ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c007ec6:	687b      	ldr	r3, [r7, #4]
 c007ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 c007eca:	2300      	movs	r3, #0
 c007ecc:	613b      	str	r3, [r7, #16]
 c007ece:	e009      	b.n	c007ee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 c007ed0:	687a      	ldr	r2, [r7, #4]
 c007ed2:	693b      	ldr	r3, [r7, #16]
 c007ed4:	3340      	adds	r3, #64	@ 0x40
 c007ed6:	009b      	lsls	r3, r3, #2
 c007ed8:	4413      	add	r3, r2
 c007eda:	2200      	movs	r2, #0
 c007edc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 c007ede:	693b      	ldr	r3, [r7, #16]
 c007ee0:	3301      	adds	r3, #1
 c007ee2:	613b      	str	r3, [r7, #16]
 c007ee4:	693b      	ldr	r3, [r7, #16]
 c007ee6:	2b0e      	cmp	r3, #14
 c007ee8:	d9f2      	bls.n	c007ed0 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 c007eea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 c007eee:	2b00      	cmp	r3, #0
 c007ef0:	d11c      	bne.n	c007f2c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 c007ef2:	68fb      	ldr	r3, [r7, #12]
 c007ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c007ef8:	685b      	ldr	r3, [r3, #4]
 c007efa:	68fa      	ldr	r2, [r7, #12]
 c007efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c007f00:	f043 0302 	orr.w	r3, r3, #2
 c007f04:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 c007f06:	687b      	ldr	r3, [r7, #4]
 c007f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c007f0a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 c007f0e:	687b      	ldr	r3, [r7, #4]
 c007f10:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 c007f12:	687b      	ldr	r3, [r7, #4]
 c007f14:	681b      	ldr	r3, [r3, #0]
 c007f16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 c007f1a:	687b      	ldr	r3, [r7, #4]
 c007f1c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 c007f1e:	687b      	ldr	r3, [r7, #4]
 c007f20:	681b      	ldr	r3, [r3, #0]
 c007f22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 c007f26:	687b      	ldr	r3, [r7, #4]
 c007f28:	601a      	str	r2, [r3, #0]
 c007f2a:	e005      	b.n	c007f38 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 c007f2c:	687b      	ldr	r3, [r7, #4]
 c007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c007f30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 c007f34:	687b      	ldr	r3, [r7, #4]
 c007f36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 c007f38:	68fb      	ldr	r3, [r7, #12]
 c007f3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 c007f3e:	461a      	mov	r2, r3
 c007f40:	2300      	movs	r3, #0
 c007f42:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 c007f44:	2103      	movs	r1, #3
 c007f46:	6878      	ldr	r0, [r7, #4]
 c007f48:	f000 f95e 	bl	c008208 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 c007f4c:	2110      	movs	r1, #16
 c007f4e:	6878      	ldr	r0, [r7, #4]
 c007f50:	f000 f8fa 	bl	c008148 <USB_FlushTxFifo>
 c007f54:	4603      	mov	r3, r0
 c007f56:	2b00      	cmp	r3, #0
 c007f58:	d001      	beq.n	c007f5e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 c007f5a:	2301      	movs	r3, #1
 c007f5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 c007f5e:	6878      	ldr	r0, [r7, #4]
 c007f60:	f000 f924 	bl	c0081ac <USB_FlushRxFifo>
 c007f64:	4603      	mov	r3, r0
 c007f66:	2b00      	cmp	r3, #0
 c007f68:	d001      	beq.n	c007f6e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 c007f6a:	2301      	movs	r3, #1
 c007f6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 c007f6e:	68fb      	ldr	r3, [r7, #12]
 c007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c007f74:	461a      	mov	r2, r3
 c007f76:	2300      	movs	r3, #0
 c007f78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 c007f7a:	68fb      	ldr	r3, [r7, #12]
 c007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c007f80:	461a      	mov	r2, r3
 c007f82:	2300      	movs	r3, #0
 c007f84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 c007f86:	68fb      	ldr	r3, [r7, #12]
 c007f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c007f8c:	461a      	mov	r2, r3
 c007f8e:	2300      	movs	r3, #0
 c007f90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 c007f92:	2300      	movs	r3, #0
 c007f94:	613b      	str	r3, [r7, #16]
 c007f96:	e043      	b.n	c008020 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 c007f98:	693b      	ldr	r3, [r7, #16]
 c007f9a:	015a      	lsls	r2, r3, #5
 c007f9c:	68fb      	ldr	r3, [r7, #12]
 c007f9e:	4413      	add	r3, r2
 c007fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c007fa4:	681b      	ldr	r3, [r3, #0]
 c007fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 c007faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c007fae:	d118      	bne.n	c007fe2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 c007fb0:	693b      	ldr	r3, [r7, #16]
 c007fb2:	2b00      	cmp	r3, #0
 c007fb4:	d10a      	bne.n	c007fcc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 c007fb6:	693b      	ldr	r3, [r7, #16]
 c007fb8:	015a      	lsls	r2, r3, #5
 c007fba:	68fb      	ldr	r3, [r7, #12]
 c007fbc:	4413      	add	r3, r2
 c007fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c007fc2:	461a      	mov	r2, r3
 c007fc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 c007fc8:	6013      	str	r3, [r2, #0]
 c007fca:	e013      	b.n	c007ff4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 c007fcc:	693b      	ldr	r3, [r7, #16]
 c007fce:	015a      	lsls	r2, r3, #5
 c007fd0:	68fb      	ldr	r3, [r7, #12]
 c007fd2:	4413      	add	r3, r2
 c007fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c007fd8:	461a      	mov	r2, r3
 c007fda:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 c007fde:	6013      	str	r3, [r2, #0]
 c007fe0:	e008      	b.n	c007ff4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 c007fe2:	693b      	ldr	r3, [r7, #16]
 c007fe4:	015a      	lsls	r2, r3, #5
 c007fe6:	68fb      	ldr	r3, [r7, #12]
 c007fe8:	4413      	add	r3, r2
 c007fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c007fee:	461a      	mov	r2, r3
 c007ff0:	2300      	movs	r3, #0
 c007ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 c007ff4:	693b      	ldr	r3, [r7, #16]
 c007ff6:	015a      	lsls	r2, r3, #5
 c007ff8:	68fb      	ldr	r3, [r7, #12]
 c007ffa:	4413      	add	r3, r2
 c007ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c008000:	461a      	mov	r2, r3
 c008002:	2300      	movs	r3, #0
 c008004:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 c008006:	693b      	ldr	r3, [r7, #16]
 c008008:	015a      	lsls	r2, r3, #5
 c00800a:	68fb      	ldr	r3, [r7, #12]
 c00800c:	4413      	add	r3, r2
 c00800e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c008012:	461a      	mov	r2, r3
 c008014:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 c008018:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00801a:	693b      	ldr	r3, [r7, #16]
 c00801c:	3301      	adds	r3, #1
 c00801e:	613b      	str	r3, [r7, #16]
 c008020:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 c008024:	461a      	mov	r2, r3
 c008026:	693b      	ldr	r3, [r7, #16]
 c008028:	4293      	cmp	r3, r2
 c00802a:	d3b5      	bcc.n	c007f98 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00802c:	2300      	movs	r3, #0
 c00802e:	613b      	str	r3, [r7, #16]
 c008030:	e043      	b.n	c0080ba <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 c008032:	693b      	ldr	r3, [r7, #16]
 c008034:	015a      	lsls	r2, r3, #5
 c008036:	68fb      	ldr	r3, [r7, #12]
 c008038:	4413      	add	r3, r2
 c00803a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00803e:	681b      	ldr	r3, [r3, #0]
 c008040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 c008044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c008048:	d118      	bne.n	c00807c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 c00804a:	693b      	ldr	r3, [r7, #16]
 c00804c:	2b00      	cmp	r3, #0
 c00804e:	d10a      	bne.n	c008066 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 c008050:	693b      	ldr	r3, [r7, #16]
 c008052:	015a      	lsls	r2, r3, #5
 c008054:	68fb      	ldr	r3, [r7, #12]
 c008056:	4413      	add	r3, r2
 c008058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00805c:	461a      	mov	r2, r3
 c00805e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 c008062:	6013      	str	r3, [r2, #0]
 c008064:	e013      	b.n	c00808e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 c008066:	693b      	ldr	r3, [r7, #16]
 c008068:	015a      	lsls	r2, r3, #5
 c00806a:	68fb      	ldr	r3, [r7, #12]
 c00806c:	4413      	add	r3, r2
 c00806e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c008072:	461a      	mov	r2, r3
 c008074:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 c008078:	6013      	str	r3, [r2, #0]
 c00807a:	e008      	b.n	c00808e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 c00807c:	693b      	ldr	r3, [r7, #16]
 c00807e:	015a      	lsls	r2, r3, #5
 c008080:	68fb      	ldr	r3, [r7, #12]
 c008082:	4413      	add	r3, r2
 c008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c008088:	461a      	mov	r2, r3
 c00808a:	2300      	movs	r3, #0
 c00808c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 c00808e:	693b      	ldr	r3, [r7, #16]
 c008090:	015a      	lsls	r2, r3, #5
 c008092:	68fb      	ldr	r3, [r7, #12]
 c008094:	4413      	add	r3, r2
 c008096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00809a:	461a      	mov	r2, r3
 c00809c:	2300      	movs	r3, #0
 c00809e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 c0080a0:	693b      	ldr	r3, [r7, #16]
 c0080a2:	015a      	lsls	r2, r3, #5
 c0080a4:	68fb      	ldr	r3, [r7, #12]
 c0080a6:	4413      	add	r3, r2
 c0080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c0080ac:	461a      	mov	r2, r3
 c0080ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 c0080b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 c0080b4:	693b      	ldr	r3, [r7, #16]
 c0080b6:	3301      	adds	r3, #1
 c0080b8:	613b      	str	r3, [r7, #16]
 c0080ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 c0080be:	461a      	mov	r2, r3
 c0080c0:	693b      	ldr	r3, [r7, #16]
 c0080c2:	4293      	cmp	r3, r2
 c0080c4:	d3b5      	bcc.n	c008032 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 c0080c6:	68fb      	ldr	r3, [r7, #12]
 c0080c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c0080cc:	691b      	ldr	r3, [r3, #16]
 c0080ce:	68fa      	ldr	r2, [r7, #12]
 c0080d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c0080d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c0080d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 c0080da:	687b      	ldr	r3, [r7, #4]
 c0080dc:	2200      	movs	r2, #0
 c0080de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 c0080e0:	687b      	ldr	r3, [r7, #4]
 c0080e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 c0080e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 c0080e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 c0080ec:	2b00      	cmp	r3, #0
 c0080ee:	d105      	bne.n	c0080fc <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 c0080f0:	687b      	ldr	r3, [r7, #4]
 c0080f2:	699b      	ldr	r3, [r3, #24]
 c0080f4:	f043 0210 	orr.w	r2, r3, #16
 c0080f8:	687b      	ldr	r3, [r7, #4]
 c0080fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 c0080fc:	687b      	ldr	r3, [r7, #4]
 c0080fe:	699a      	ldr	r2, [r3, #24]
 c008100:	4b10      	ldr	r3, [pc, #64]	@ (c008144 <USB_DevInit+0x294>)
 c008102:	4313      	orrs	r3, r2
 c008104:	687a      	ldr	r2, [r7, #4]
 c008106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 c008108:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 c00810c:	2b00      	cmp	r3, #0
 c00810e:	d005      	beq.n	c00811c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 c008110:	687b      	ldr	r3, [r7, #4]
 c008112:	699b      	ldr	r3, [r3, #24]
 c008114:	f043 0208 	orr.w	r2, r3, #8
 c008118:	687b      	ldr	r3, [r7, #4]
 c00811a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 c00811c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 c008120:	2b01      	cmp	r3, #1
 c008122:	d107      	bne.n	c008134 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 c008124:	687b      	ldr	r3, [r7, #4]
 c008126:	699b      	ldr	r3, [r3, #24]
 c008128:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 c00812c:	f043 0304 	orr.w	r3, r3, #4
 c008130:	687a      	ldr	r2, [r7, #4]
 c008132:	6193      	str	r3, [r2, #24]
  }

  return ret;
 c008134:	7dfb      	ldrb	r3, [r7, #23]
}
 c008136:	4618      	mov	r0, r3
 c008138:	3718      	adds	r7, #24
 c00813a:	46bd      	mov	sp, r7
 c00813c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c008140:	b004      	add	sp, #16
 c008142:	4770      	bx	lr
 c008144:	803c3800 	.word	0x803c3800

0c008148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 c008148:	b480      	push	{r7}
 c00814a:	b085      	sub	sp, #20
 c00814c:	af00      	add	r7, sp, #0
 c00814e:	6078      	str	r0, [r7, #4]
 c008150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 c008152:	2300      	movs	r3, #0
 c008154:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c008156:	68fb      	ldr	r3, [r7, #12]
 c008158:	3301      	adds	r3, #1
 c00815a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00815c:	68fb      	ldr	r3, [r7, #12]
 c00815e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c008162:	d901      	bls.n	c008168 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 c008164:	2303      	movs	r3, #3
 c008166:	e01b      	b.n	c0081a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c008168:	687b      	ldr	r3, [r7, #4]
 c00816a:	691b      	ldr	r3, [r3, #16]
 c00816c:	2b00      	cmp	r3, #0
 c00816e:	daf2      	bge.n	c008156 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 c008170:	2300      	movs	r3, #0
 c008172:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 c008174:	683b      	ldr	r3, [r7, #0]
 c008176:	019b      	lsls	r3, r3, #6
 c008178:	f043 0220 	orr.w	r2, r3, #32
 c00817c:	687b      	ldr	r3, [r7, #4]
 c00817e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c008180:	68fb      	ldr	r3, [r7, #12]
 c008182:	3301      	adds	r3, #1
 c008184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c008186:	68fb      	ldr	r3, [r7, #12]
 c008188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00818c:	d901      	bls.n	c008192 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 c00818e:	2303      	movs	r3, #3
 c008190:	e006      	b.n	c0081a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 c008192:	687b      	ldr	r3, [r7, #4]
 c008194:	691b      	ldr	r3, [r3, #16]
 c008196:	f003 0320 	and.w	r3, r3, #32
 c00819a:	2b20      	cmp	r3, #32
 c00819c:	d0f0      	beq.n	c008180 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 c00819e:	2300      	movs	r3, #0
}
 c0081a0:	4618      	mov	r0, r3
 c0081a2:	3714      	adds	r7, #20
 c0081a4:	46bd      	mov	sp, r7
 c0081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0081aa:	4770      	bx	lr

0c0081ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 c0081ac:	b480      	push	{r7}
 c0081ae:	b085      	sub	sp, #20
 c0081b0:	af00      	add	r7, sp, #0
 c0081b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 c0081b4:	2300      	movs	r3, #0
 c0081b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c0081b8:	68fb      	ldr	r3, [r7, #12]
 c0081ba:	3301      	adds	r3, #1
 c0081bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c0081be:	68fb      	ldr	r3, [r7, #12]
 c0081c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c0081c4:	d901      	bls.n	c0081ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 c0081c6:	2303      	movs	r3, #3
 c0081c8:	e018      	b.n	c0081fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c0081ca:	687b      	ldr	r3, [r7, #4]
 c0081cc:	691b      	ldr	r3, [r3, #16]
 c0081ce:	2b00      	cmp	r3, #0
 c0081d0:	daf2      	bge.n	c0081b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 c0081d2:	2300      	movs	r3, #0
 c0081d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 c0081d6:	687b      	ldr	r3, [r7, #4]
 c0081d8:	2210      	movs	r2, #16
 c0081da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c0081dc:	68fb      	ldr	r3, [r7, #12]
 c0081de:	3301      	adds	r3, #1
 c0081e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c0081e2:	68fb      	ldr	r3, [r7, #12]
 c0081e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c0081e8:	d901      	bls.n	c0081ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 c0081ea:	2303      	movs	r3, #3
 c0081ec:	e006      	b.n	c0081fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 c0081ee:	687b      	ldr	r3, [r7, #4]
 c0081f0:	691b      	ldr	r3, [r3, #16]
 c0081f2:	f003 0310 	and.w	r3, r3, #16
 c0081f6:	2b10      	cmp	r3, #16
 c0081f8:	d0f0      	beq.n	c0081dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 c0081fa:	2300      	movs	r3, #0
}
 c0081fc:	4618      	mov	r0, r3
 c0081fe:	3714      	adds	r7, #20
 c008200:	46bd      	mov	sp, r7
 c008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008206:	4770      	bx	lr

0c008208 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 c008208:	b480      	push	{r7}
 c00820a:	b085      	sub	sp, #20
 c00820c:	af00      	add	r7, sp, #0
 c00820e:	6078      	str	r0, [r7, #4]
 c008210:	460b      	mov	r3, r1
 c008212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c008214:	687b      	ldr	r3, [r7, #4]
 c008216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 c008218:	68fb      	ldr	r3, [r7, #12]
 c00821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00821e:	681a      	ldr	r2, [r3, #0]
 c008220:	78fb      	ldrb	r3, [r7, #3]
 c008222:	68f9      	ldr	r1, [r7, #12]
 c008224:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 c008228:	4313      	orrs	r3, r2
 c00822a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 c00822c:	2300      	movs	r3, #0
}
 c00822e:	4618      	mov	r0, r3
 c008230:	3714      	adds	r7, #20
 c008232:	46bd      	mov	sp, r7
 c008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008238:	4770      	bx	lr

0c00823a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 c00823a:	b480      	push	{r7}
 c00823c:	b085      	sub	sp, #20
 c00823e:	af00      	add	r7, sp, #0
 c008240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c008242:	687b      	ldr	r3, [r7, #4]
 c008244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 c008246:	68fb      	ldr	r3, [r7, #12]
 c008248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 c00824c:	681b      	ldr	r3, [r3, #0]
 c00824e:	68fa      	ldr	r2, [r7, #12]
 c008250:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 c008254:	f023 0303 	bic.w	r3, r3, #3
 c008258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 c00825a:	68fb      	ldr	r3, [r7, #12]
 c00825c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c008260:	685b      	ldr	r3, [r3, #4]
 c008262:	68fa      	ldr	r2, [r7, #12]
 c008264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c008268:	f043 0302 	orr.w	r3, r3, #2
 c00826c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 c00826e:	2300      	movs	r3, #0
}
 c008270:	4618      	mov	r0, r3
 c008272:	3714      	adds	r7, #20
 c008274:	46bd      	mov	sp, r7
 c008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00827a:	4770      	bx	lr

0c00827c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 c00827c:	b480      	push	{r7}
 c00827e:	b083      	sub	sp, #12
 c008280:	af00      	add	r7, sp, #0
 c008282:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 c008284:	687b      	ldr	r3, [r7, #4]
 c008286:	695b      	ldr	r3, [r3, #20]
 c008288:	f003 0301 	and.w	r3, r3, #1
}
 c00828c:	4618      	mov	r0, r3
 c00828e:	370c      	adds	r7, #12
 c008290:	46bd      	mov	sp, r7
 c008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008296:	4770      	bx	lr

0c008298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 c008298:	b480      	push	{r7}
 c00829a:	b085      	sub	sp, #20
 c00829c:	af00      	add	r7, sp, #0
 c00829e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 c0082a0:	2300      	movs	r3, #0
 c0082a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c0082a4:	68fb      	ldr	r3, [r7, #12]
 c0082a6:	3301      	adds	r3, #1
 c0082a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c0082aa:	68fb      	ldr	r3, [r7, #12]
 c0082ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c0082b0:	d901      	bls.n	c0082b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 c0082b2:	2303      	movs	r3, #3
 c0082b4:	e01b      	b.n	c0082ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c0082b6:	687b      	ldr	r3, [r7, #4]
 c0082b8:	691b      	ldr	r3, [r3, #16]
 c0082ba:	2b00      	cmp	r3, #0
 c0082bc:	daf2      	bge.n	c0082a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 c0082be:	2300      	movs	r3, #0
 c0082c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 c0082c2:	687b      	ldr	r3, [r7, #4]
 c0082c4:	691b      	ldr	r3, [r3, #16]
 c0082c6:	f043 0201 	orr.w	r2, r3, #1
 c0082ca:	687b      	ldr	r3, [r7, #4]
 c0082cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c0082ce:	68fb      	ldr	r3, [r7, #12]
 c0082d0:	3301      	adds	r3, #1
 c0082d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c0082d4:	68fb      	ldr	r3, [r7, #12]
 c0082d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c0082da:	d901      	bls.n	c0082e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 c0082dc:	2303      	movs	r3, #3
 c0082de:	e006      	b.n	c0082ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 c0082e0:	687b      	ldr	r3, [r7, #4]
 c0082e2:	691b      	ldr	r3, [r3, #16]
 c0082e4:	f003 0301 	and.w	r3, r3, #1
 c0082e8:	2b01      	cmp	r3, #1
 c0082ea:	d0f0      	beq.n	c0082ce <USB_CoreReset+0x36>

  return HAL_OK;
 c0082ec:	2300      	movs	r3, #0
}
 c0082ee:	4618      	mov	r0, r3
 c0082f0:	3714      	adds	r7, #20
 c0082f2:	46bd      	mov	sp, r7
 c0082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0082f8:	4770      	bx	lr

0c0082fa <memset>:
 c0082fa:	4402      	add	r2, r0
 c0082fc:	4603      	mov	r3, r0
 c0082fe:	4293      	cmp	r3, r2
 c008300:	d100      	bne.n	c008304 <memset+0xa>
 c008302:	4770      	bx	lr
 c008304:	f803 1b01 	strb.w	r1, [r3], #1
 c008308:	e7f9      	b.n	c0082fe <memset+0x4>
	...

0c00830c <__libc_init_array>:
 c00830c:	b570      	push	{r4, r5, r6, lr}
 c00830e:	4d0d      	ldr	r5, [pc, #52]	@ (c008344 <__libc_init_array+0x38>)
 c008310:	2600      	movs	r6, #0
 c008312:	4c0d      	ldr	r4, [pc, #52]	@ (c008348 <__libc_init_array+0x3c>)
 c008314:	1b64      	subs	r4, r4, r5
 c008316:	10a4      	asrs	r4, r4, #2
 c008318:	42a6      	cmp	r6, r4
 c00831a:	d109      	bne.n	c008330 <__libc_init_array+0x24>
 c00831c:	4d0b      	ldr	r5, [pc, #44]	@ (c00834c <__libc_init_array+0x40>)
 c00831e:	2600      	movs	r6, #0
 c008320:	4c0b      	ldr	r4, [pc, #44]	@ (c008350 <__libc_init_array+0x44>)
 c008322:	f000 f817 	bl	c008354 <_init>
 c008326:	1b64      	subs	r4, r4, r5
 c008328:	10a4      	asrs	r4, r4, #2
 c00832a:	42a6      	cmp	r6, r4
 c00832c:	d105      	bne.n	c00833a <__libc_init_array+0x2e>
 c00832e:	bd70      	pop	{r4, r5, r6, pc}
 c008330:	f855 3b04 	ldr.w	r3, [r5], #4
 c008334:	3601      	adds	r6, #1
 c008336:	4798      	blx	r3
 c008338:	e7ee      	b.n	c008318 <__libc_init_array+0xc>
 c00833a:	f855 3b04 	ldr.w	r3, [r5], #4
 c00833e:	3601      	adds	r6, #1
 c008340:	4798      	blx	r3
 c008342:	e7f2      	b.n	c00832a <__libc_init_array+0x1e>
 c008344:	0c008474 	.word	0x0c008474
 c008348:	0c008474 	.word	0x0c008474
 c00834c:	0c008474 	.word	0x0c008474
 c008350:	0c008478 	.word	0x0c008478

0c008354 <_init>:
 c008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c008356:	bf00      	nop
 c008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00835a:	bc08      	pop	{r3}
 c00835c:	469e      	mov	lr, r3
 c00835e:	4770      	bx	lr

0c008360 <_fini>:
 c008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c008362:	bf00      	nop
 c008364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c008366:	bc08      	pop	{r3}
 c008368:	469e      	mov	lr, r3
 c00836a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f703 bb20 	b.w	c001648 <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <SECURE_RegisterCallback>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f702 bf68 	b.w	c000ee0 <__acle_se_SECURE_RegisterCallback>

0c0fe010 <Toggle_Pin>:
 c0fe010:	e97f e97f 	sg
 c0fe014:	f702 bfb8 	b.w	c000f88 <__acle_se_Toggle_Pin>
	...
