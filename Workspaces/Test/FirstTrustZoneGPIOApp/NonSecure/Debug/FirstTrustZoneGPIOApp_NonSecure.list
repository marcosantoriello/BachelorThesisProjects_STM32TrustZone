
FirstTrustZoneGPIOApp_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb0  08100238  08100238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08100ee8  08100ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100fb8  08100fb8  00001fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100fbc  08100fbc  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20040000  08100fc0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2004000c  08100fc9  0000200c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2004002c  08100fc9  0000202c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005dae  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001152  00000000  00000000  00007ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000688  00000000  00000000  00008f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000004cd  00000000  00000000  000095c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002efe1  00000000  00000000  00009a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000073ff  00000000  00000000  00038a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00126c95  00000000  00000000  0003fe75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00166b0a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018d0  00000000  00000000  00166b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000090  00000000  00000000  00168420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100238 <__do_global_dtors_aux>:
 8100238:	b510      	push	{r4, lr}
 810023a:	4c05      	ldr	r4, [pc, #20]	@ (8100250 <__do_global_dtors_aux+0x18>)
 810023c:	7823      	ldrb	r3, [r4, #0]
 810023e:	b933      	cbnz	r3, 810024e <__do_global_dtors_aux+0x16>
 8100240:	4b04      	ldr	r3, [pc, #16]	@ (8100254 <__do_global_dtors_aux+0x1c>)
 8100242:	b113      	cbz	r3, 810024a <__do_global_dtors_aux+0x12>
 8100244:	4804      	ldr	r0, [pc, #16]	@ (8100258 <__do_global_dtors_aux+0x20>)
 8100246:	f3af 8000 	nop.w
 810024a:	2301      	movs	r3, #1
 810024c:	7023      	strb	r3, [r4, #0]
 810024e:	bd10      	pop	{r4, pc}
 8100250:	2004000c 	.word	0x2004000c
 8100254:	00000000 	.word	0x00000000
 8100258:	08100ec4 	.word	0x08100ec4

0810025c <frame_dummy>:
 810025c:	b508      	push	{r3, lr}
 810025e:	4b03      	ldr	r3, [pc, #12]	@ (810026c <frame_dummy+0x10>)
 8100260:	b11b      	cbz	r3, 810026a <frame_dummy+0xe>
 8100262:	4903      	ldr	r1, [pc, #12]	@ (8100270 <frame_dummy+0x14>)
 8100264:	4803      	ldr	r0, [pc, #12]	@ (8100274 <frame_dummy+0x18>)
 8100266:	f3af 8000 	nop.w
 810026a:	bd08      	pop	{r3, pc}
 810026c:	00000000 	.word	0x00000000
 8100270:	20040010 	.word	0x20040010
 8100274:	08100ec4 	.word	0x08100ec4

08100278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100278:	b580      	push	{r7, lr}
 810027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810027c:	f000 f8aa 	bl	81003d4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100280:	f000 f810 	bl	81002a4 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // if USER_BUTTON is pressed...
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 8100284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100288:	4805      	ldr	r0, [pc, #20]	@ (81002a0 <main+0x28>)
 810028a:	f000 fccd 	bl	8100c28 <HAL_GPIO_ReadPin>
 810028e:	4603      	mov	r3, r0
 8100290:	2b01      	cmp	r3, #1
 8100292:	d101      	bne.n	8100298 <main+0x20>
		  // ...then call the function defined in the NSC API
		  Toggle_Pin();
 8100294:	f000 fe24 	bl	8100ee0 <__Toggle_Pin_veneer>
	  }
	  HAL_Delay(200); // just adding some delay so we don't have too much toggling
 8100298:	20c8      	movs	r0, #200	@ 0xc8
 810029a:	f000 f961 	bl	8100560 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 810029e:	e7f1      	b.n	8100284 <main+0xc>
 81002a0:	42020800 	.word	0x42020800

081002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81002a4:	b580      	push	{r7, lr}
 81002a6:	b086      	sub	sp, #24
 81002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81002aa:	1d3b      	adds	r3, r7, #4
 81002ac:	2200      	movs	r2, #0
 81002ae:	601a      	str	r2, [r3, #0]
 81002b0:	605a      	str	r2, [r3, #4]
 81002b2:	609a      	str	r2, [r3, #8]
 81002b4:	60da      	str	r2, [r3, #12]
 81002b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81002b8:	4b0f      	ldr	r3, [pc, #60]	@ (81002f8 <MX_GPIO_Init+0x54>)
 81002ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81002be:	4a0e      	ldr	r2, [pc, #56]	@ (81002f8 <MX_GPIO_Init+0x54>)
 81002c0:	f043 0304 	orr.w	r3, r3, #4
 81002c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 81002c8:	4b0b      	ldr	r3, [pc, #44]	@ (81002f8 <MX_GPIO_Init+0x54>)
 81002ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81002ce:	f003 0304 	and.w	r3, r3, #4
 81002d2:	603b      	str	r3, [r7, #0]
 81002d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 81002d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81002da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81002dc:	4b07      	ldr	r3, [pc, #28]	@ (81002fc <MX_GPIO_Init+0x58>)
 81002de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81002e0:	2300      	movs	r3, #0
 81002e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 81002e4:	1d3b      	adds	r3, r7, #4
 81002e6:	4619      	mov	r1, r3
 81002e8:	4805      	ldr	r0, [pc, #20]	@ (8100300 <MX_GPIO_Init+0x5c>)
 81002ea:	f000 fac5 	bl	8100878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81002ee:	bf00      	nop
 81002f0:	3718      	adds	r7, #24
 81002f2:	46bd      	mov	sp, r7
 81002f4:	bd80      	pop	{r7, pc}
 81002f6:	bf00      	nop
 81002f8:	46020c00 	.word	0x46020c00
 81002fc:	10110000 	.word	0x10110000
 8100300:	42020800 	.word	0x42020800

08100304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100304:	b580      	push	{r7, lr}
 8100306:	b082      	sub	sp, #8
 8100308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 810030a:	4b0a      	ldr	r3, [pc, #40]	@ (8100334 <HAL_MspInit+0x30>)
 810030c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100310:	4a08      	ldr	r2, [pc, #32]	@ (8100334 <HAL_MspInit+0x30>)
 8100312:	f043 0304 	orr.w	r3, r3, #4
 8100316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 810031a:	4b06      	ldr	r3, [pc, #24]	@ (8100334 <HAL_MspInit+0x30>)
 810031c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100320:	f003 0304 	and.w	r3, r3, #4
 8100324:	607b      	str	r3, [r7, #4]
 8100326:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8100328:	f000 fc96 	bl	8100c58 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810032c:	bf00      	nop
 810032e:	3708      	adds	r7, #8
 8100330:	46bd      	mov	sp, r7
 8100332:	bd80      	pop	{r7, pc}
 8100334:	46020c00 	.word	0x46020c00

08100338 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100338:	b480      	push	{r7}
 810033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810033c:	bf00      	nop
 810033e:	e7fd      	b.n	810033c <MemManage_Handler+0x4>

08100340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100340:	b480      	push	{r7}
 8100342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100344:	bf00      	nop
 8100346:	e7fd      	b.n	8100344 <UsageFault_Handler+0x4>

08100348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100348:	b480      	push	{r7}
 810034a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810034c:	bf00      	nop
 810034e:	46bd      	mov	sp, r7
 8100350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100354:	4770      	bx	lr

08100356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100356:	b480      	push	{r7}
 8100358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810035a:	bf00      	nop
 810035c:	46bd      	mov	sp, r7
 810035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100362:	4770      	bx	lr

08100364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100364:	b580      	push	{r7, lr}
 8100366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100368:	f000 f8da 	bl	8100520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810036c:	bf00      	nop
 810036e:	bd80      	pop	{r7, pc}

08100370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8100370:	b480      	push	{r7}
 8100372:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8100374:	bf00      	nop
 8100376:	46bd      	mov	sp, r7
 8100378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810037c:	4770      	bx	lr
	...

08100380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8100380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81003b8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100384:	f7ff fff4 	bl	8100370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8100388:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 810038a:	e003      	b.n	8100394 <LoopCopyDataInit>

0810038c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 810038c:	4b0b      	ldr	r3, [pc, #44]	@ (81003bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 810038e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8100390:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8100392:	3104      	adds	r1, #4

08100394 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8100394:	480a      	ldr	r0, [pc, #40]	@ (81003c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8100396:	4b0b      	ldr	r3, [pc, #44]	@ (81003c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8100398:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 810039a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 810039c:	d3f6      	bcc.n	810038c <CopyDataInit>
	ldr	r2, =_sbss
 810039e:	4a0a      	ldr	r2, [pc, #40]	@ (81003c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 81003a0:	e002      	b.n	81003a8 <LoopFillZerobss>

081003a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 81003a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 81003a4:	f842 3b04 	str.w	r3, [r2], #4

081003a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 81003a8:	4b08      	ldr	r3, [pc, #32]	@ (81003cc <LoopForever+0x16>)
	cmp	r2, r3
 81003aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 81003ac:	d3f9      	bcc.n	81003a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81003ae:	f000 fd65 	bl	8100e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 81003b2:	f7ff ff61 	bl	8100278 <main>

081003b6 <LoopForever>:

LoopForever:
    b LoopForever
 81003b6:	e7fe      	b.n	81003b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 81003b8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 81003bc:	08100fc0 	.word	0x08100fc0
	ldr	r0, =_sdata
 81003c0:	20040000 	.word	0x20040000
	ldr	r3, =_edata
 81003c4:	20040009 	.word	0x20040009
	ldr	r2, =_sbss
 81003c8:	2004000c 	.word	0x2004000c
	ldr	r3, = _ebss
 81003cc:	2004002c 	.word	0x2004002c

081003d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 81003d0:	e7fe      	b.n	81003d0 <ADC1_IRQHandler>
	...

081003d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81003d4:	b580      	push	{r7, lr}
 81003d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 81003d8:	4b12      	ldr	r3, [pc, #72]	@ (8100424 <HAL_Init+0x50>)
 81003da:	681b      	ldr	r3, [r3, #0]
 81003dc:	4a11      	ldr	r2, [pc, #68]	@ (8100424 <HAL_Init+0x50>)
 81003de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81003e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81003e4:	2003      	movs	r0, #3
 81003e6:	f000 f96e 	bl	81006c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 81003ea:	f000 fc45 	bl	8100c78 <HAL_RCC_GetSysClockFreq>
 81003ee:	4602      	mov	r2, r0
 81003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8100428 <HAL_Init+0x54>)
 81003f2:	6a1b      	ldr	r3, [r3, #32]
 81003f4:	f003 030f 	and.w	r3, r3, #15
 81003f8:	490c      	ldr	r1, [pc, #48]	@ (810042c <HAL_Init+0x58>)
 81003fa:	5ccb      	ldrb	r3, [r1, r3]
 81003fc:	fa22 f303 	lsr.w	r3, r2, r3
 8100400:	4a0b      	ldr	r2, [pc, #44]	@ (8100430 <HAL_Init+0x5c>)
 8100402:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8100404:	2004      	movs	r0, #4
 8100406:	f000 f9a5 	bl	8100754 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810040a:	200f      	movs	r0, #15
 810040c:	f000 f812 	bl	8100434 <HAL_InitTick>
 8100410:	4603      	mov	r3, r0
 8100412:	2b00      	cmp	r3, #0
 8100414:	d001      	beq.n	810041a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8100416:	2301      	movs	r3, #1
 8100418:	e002      	b.n	8100420 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810041a:	f7ff ff73 	bl	8100304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810041e:	2300      	movs	r3, #0
}
 8100420:	4618      	mov	r0, r3
 8100422:	bd80      	pop	{r7, pc}
 8100424:	40022000 	.word	0x40022000
 8100428:	46020c00 	.word	0x46020c00
 810042c:	08100ee8 	.word	0x08100ee8
 8100430:	20040000 	.word	0x20040000

08100434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100434:	b580      	push	{r7, lr}
 8100436:	b084      	sub	sp, #16
 8100438:	af00      	add	r7, sp, #0
 810043a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 810043c:	2300      	movs	r3, #0
 810043e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8100440:	4b33      	ldr	r3, [pc, #204]	@ (8100510 <HAL_InitTick+0xdc>)
 8100442:	781b      	ldrb	r3, [r3, #0]
 8100444:	2b00      	cmp	r3, #0
 8100446:	d101      	bne.n	810044c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8100448:	2301      	movs	r3, #1
 810044a:	e05c      	b.n	8100506 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 810044c:	4b31      	ldr	r3, [pc, #196]	@ (8100514 <HAL_InitTick+0xe0>)
 810044e:	681b      	ldr	r3, [r3, #0]
 8100450:	f003 0304 	and.w	r3, r3, #4
 8100454:	2b04      	cmp	r3, #4
 8100456:	d10c      	bne.n	8100472 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8100458:	4b2f      	ldr	r3, [pc, #188]	@ (8100518 <HAL_InitTick+0xe4>)
 810045a:	681a      	ldr	r2, [r3, #0]
 810045c:	4b2c      	ldr	r3, [pc, #176]	@ (8100510 <HAL_InitTick+0xdc>)
 810045e:	781b      	ldrb	r3, [r3, #0]
 8100460:	4619      	mov	r1, r3
 8100462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100466:	fbb3 f3f1 	udiv	r3, r3, r1
 810046a:	fbb2 f3f3 	udiv	r3, r2, r3
 810046e:	60fb      	str	r3, [r7, #12]
 8100470:	e037      	b.n	81004e2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8100472:	f000 f9c7 	bl	8100804 <HAL_SYSTICK_GetCLKSourceConfig>
 8100476:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8100478:	68bb      	ldr	r3, [r7, #8]
 810047a:	2b02      	cmp	r3, #2
 810047c:	d023      	beq.n	81004c6 <HAL_InitTick+0x92>
 810047e:	68bb      	ldr	r3, [r7, #8]
 8100480:	2b02      	cmp	r3, #2
 8100482:	d82d      	bhi.n	81004e0 <HAL_InitTick+0xac>
 8100484:	68bb      	ldr	r3, [r7, #8]
 8100486:	2b00      	cmp	r3, #0
 8100488:	d003      	beq.n	8100492 <HAL_InitTick+0x5e>
 810048a:	68bb      	ldr	r3, [r7, #8]
 810048c:	2b01      	cmp	r3, #1
 810048e:	d00d      	beq.n	81004ac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8100490:	e026      	b.n	81004e0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8100492:	4b21      	ldr	r3, [pc, #132]	@ (8100518 <HAL_InitTick+0xe4>)
 8100494:	681a      	ldr	r2, [r3, #0]
 8100496:	4b1e      	ldr	r3, [pc, #120]	@ (8100510 <HAL_InitTick+0xdc>)
 8100498:	781b      	ldrb	r3, [r3, #0]
 810049a:	4619      	mov	r1, r3
 810049c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 81004a0:	fbb3 f3f1 	udiv	r3, r3, r1
 81004a4:	fbb2 f3f3 	udiv	r3, r2, r3
 81004a8:	60fb      	str	r3, [r7, #12]
        break;
 81004aa:	e01a      	b.n	81004e2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 81004ac:	4b18      	ldr	r3, [pc, #96]	@ (8100510 <HAL_InitTick+0xdc>)
 81004ae:	781b      	ldrb	r3, [r3, #0]
 81004b0:	461a      	mov	r2, r3
 81004b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81004b6:	fbb3 f3f2 	udiv	r3, r3, r2
 81004ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 81004be:	fbb2 f3f3 	udiv	r3, r2, r3
 81004c2:	60fb      	str	r3, [r7, #12]
        break;
 81004c4:	e00d      	b.n	81004e2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 81004c6:	4b12      	ldr	r3, [pc, #72]	@ (8100510 <HAL_InitTick+0xdc>)
 81004c8:	781b      	ldrb	r3, [r3, #0]
 81004ca:	461a      	mov	r2, r3
 81004cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81004d0:	fbb3 f3f2 	udiv	r3, r3, r2
 81004d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 81004d8:	fbb2 f3f3 	udiv	r3, r2, r3
 81004dc:	60fb      	str	r3, [r7, #12]
        break;
 81004de:	e000      	b.n	81004e2 <HAL_InitTick+0xae>
        break;
 81004e0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 81004e2:	68f8      	ldr	r0, [r7, #12]
 81004e4:	f000 f914 	bl	8100710 <HAL_SYSTICK_Config>
 81004e8:	4603      	mov	r3, r0
 81004ea:	2b00      	cmp	r3, #0
 81004ec:	d001      	beq.n	81004f2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 81004ee:	2301      	movs	r3, #1
 81004f0:	e009      	b.n	8100506 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81004f2:	2200      	movs	r2, #0
 81004f4:	6879      	ldr	r1, [r7, #4]
 81004f6:	f04f 30ff 	mov.w	r0, #4294967295
 81004fa:	f000 f8ef 	bl	81006dc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 81004fe:	4a07      	ldr	r2, [pc, #28]	@ (810051c <HAL_InitTick+0xe8>)
 8100500:	687b      	ldr	r3, [r7, #4]
 8100502:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8100504:	2300      	movs	r3, #0
}
 8100506:	4618      	mov	r0, r3
 8100508:	3710      	adds	r7, #16
 810050a:	46bd      	mov	sp, r7
 810050c:	bd80      	pop	{r7, pc}
 810050e:	bf00      	nop
 8100510:	20040008 	.word	0x20040008
 8100514:	e000e010 	.word	0xe000e010
 8100518:	20040000 	.word	0x20040000
 810051c:	20040004 	.word	0x20040004

08100520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100520:	b480      	push	{r7}
 8100522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100524:	4b06      	ldr	r3, [pc, #24]	@ (8100540 <HAL_IncTick+0x20>)
 8100526:	781b      	ldrb	r3, [r3, #0]
 8100528:	461a      	mov	r2, r3
 810052a:	4b06      	ldr	r3, [pc, #24]	@ (8100544 <HAL_IncTick+0x24>)
 810052c:	681b      	ldr	r3, [r3, #0]
 810052e:	4413      	add	r3, r2
 8100530:	4a04      	ldr	r2, [pc, #16]	@ (8100544 <HAL_IncTick+0x24>)
 8100532:	6013      	str	r3, [r2, #0]
}
 8100534:	bf00      	nop
 8100536:	46bd      	mov	sp, r7
 8100538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810053c:	4770      	bx	lr
 810053e:	bf00      	nop
 8100540:	20040008 	.word	0x20040008
 8100544:	20040028 	.word	0x20040028

08100548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100548:	b480      	push	{r7}
 810054a:	af00      	add	r7, sp, #0
  return uwTick;
 810054c:	4b03      	ldr	r3, [pc, #12]	@ (810055c <HAL_GetTick+0x14>)
 810054e:	681b      	ldr	r3, [r3, #0]
}
 8100550:	4618      	mov	r0, r3
 8100552:	46bd      	mov	sp, r7
 8100554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100558:	4770      	bx	lr
 810055a:	bf00      	nop
 810055c:	20040028 	.word	0x20040028

08100560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100560:	b580      	push	{r7, lr}
 8100562:	b084      	sub	sp, #16
 8100564:	af00      	add	r7, sp, #0
 8100566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100568:	f7ff ffee 	bl	8100548 <HAL_GetTick>
 810056c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810056e:	687b      	ldr	r3, [r7, #4]
 8100570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100572:	68fb      	ldr	r3, [r7, #12]
 8100574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100578:	d005      	beq.n	8100586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810057a:	4b0a      	ldr	r3, [pc, #40]	@ (81005a4 <HAL_Delay+0x44>)
 810057c:	781b      	ldrb	r3, [r3, #0]
 810057e:	461a      	mov	r2, r3
 8100580:	68fb      	ldr	r3, [r7, #12]
 8100582:	4413      	add	r3, r2
 8100584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100586:	bf00      	nop
 8100588:	f7ff ffde 	bl	8100548 <HAL_GetTick>
 810058c:	4602      	mov	r2, r0
 810058e:	68bb      	ldr	r3, [r7, #8]
 8100590:	1ad3      	subs	r3, r2, r3
 8100592:	68fa      	ldr	r2, [r7, #12]
 8100594:	429a      	cmp	r2, r3
 8100596:	d8f7      	bhi.n	8100588 <HAL_Delay+0x28>
  {
  }
}
 8100598:	bf00      	nop
 810059a:	bf00      	nop
 810059c:	3710      	adds	r7, #16
 810059e:	46bd      	mov	sp, r7
 81005a0:	bd80      	pop	{r7, pc}
 81005a2:	bf00      	nop
 81005a4:	20040008 	.word	0x20040008

081005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81005a8:	b480      	push	{r7}
 81005aa:	b085      	sub	sp, #20
 81005ac:	af00      	add	r7, sp, #0
 81005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81005b0:	687b      	ldr	r3, [r7, #4]
 81005b2:	f003 0307 	and.w	r3, r3, #7
 81005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81005b8:	4b0c      	ldr	r3, [pc, #48]	@ (81005ec <__NVIC_SetPriorityGrouping+0x44>)
 81005ba:	68db      	ldr	r3, [r3, #12]
 81005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81005be:	68ba      	ldr	r2, [r7, #8]
 81005c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81005c4:	4013      	ands	r3, r2
 81005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81005c8:	68fb      	ldr	r3, [r7, #12]
 81005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81005cc:	68bb      	ldr	r3, [r7, #8]
 81005ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81005d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81005d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81005da:	4a04      	ldr	r2, [pc, #16]	@ (81005ec <__NVIC_SetPriorityGrouping+0x44>)
 81005dc:	68bb      	ldr	r3, [r7, #8]
 81005de:	60d3      	str	r3, [r2, #12]
}
 81005e0:	bf00      	nop
 81005e2:	3714      	adds	r7, #20
 81005e4:	46bd      	mov	sp, r7
 81005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ea:	4770      	bx	lr
 81005ec:	e000ed00 	.word	0xe000ed00

081005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81005f0:	b480      	push	{r7}
 81005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81005f4:	4b04      	ldr	r3, [pc, #16]	@ (8100608 <__NVIC_GetPriorityGrouping+0x18>)
 81005f6:	68db      	ldr	r3, [r3, #12]
 81005f8:	0a1b      	lsrs	r3, r3, #8
 81005fa:	f003 0307 	and.w	r3, r3, #7
}
 81005fe:	4618      	mov	r0, r3
 8100600:	46bd      	mov	sp, r7
 8100602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100606:	4770      	bx	lr
 8100608:	e000ed00 	.word	0xe000ed00

0810060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810060c:	b480      	push	{r7}
 810060e:	b083      	sub	sp, #12
 8100610:	af00      	add	r7, sp, #0
 8100612:	4603      	mov	r3, r0
 8100614:	6039      	str	r1, [r7, #0]
 8100616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810061c:	2b00      	cmp	r3, #0
 810061e:	db0a      	blt.n	8100636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100620:	683b      	ldr	r3, [r7, #0]
 8100622:	b2da      	uxtb	r2, r3
 8100624:	490c      	ldr	r1, [pc, #48]	@ (8100658 <__NVIC_SetPriority+0x4c>)
 8100626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810062a:	0112      	lsls	r2, r2, #4
 810062c:	b2d2      	uxtb	r2, r2
 810062e:	440b      	add	r3, r1
 8100630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100634:	e00a      	b.n	810064c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100636:	683b      	ldr	r3, [r7, #0]
 8100638:	b2da      	uxtb	r2, r3
 810063a:	4908      	ldr	r1, [pc, #32]	@ (810065c <__NVIC_SetPriority+0x50>)
 810063c:	79fb      	ldrb	r3, [r7, #7]
 810063e:	f003 030f 	and.w	r3, r3, #15
 8100642:	3b04      	subs	r3, #4
 8100644:	0112      	lsls	r2, r2, #4
 8100646:	b2d2      	uxtb	r2, r2
 8100648:	440b      	add	r3, r1
 810064a:	761a      	strb	r2, [r3, #24]
}
 810064c:	bf00      	nop
 810064e:	370c      	adds	r7, #12
 8100650:	46bd      	mov	sp, r7
 8100652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100656:	4770      	bx	lr
 8100658:	e000e100 	.word	0xe000e100
 810065c:	e000ed00 	.word	0xe000ed00

08100660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100660:	b480      	push	{r7}
 8100662:	b089      	sub	sp, #36	@ 0x24
 8100664:	af00      	add	r7, sp, #0
 8100666:	60f8      	str	r0, [r7, #12]
 8100668:	60b9      	str	r1, [r7, #8]
 810066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810066c:	68fb      	ldr	r3, [r7, #12]
 810066e:	f003 0307 	and.w	r3, r3, #7
 8100672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100674:	69fb      	ldr	r3, [r7, #28]
 8100676:	f1c3 0307 	rsb	r3, r3, #7
 810067a:	2b04      	cmp	r3, #4
 810067c:	bf28      	it	cs
 810067e:	2304      	movcs	r3, #4
 8100680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100682:	69fb      	ldr	r3, [r7, #28]
 8100684:	3304      	adds	r3, #4
 8100686:	2b06      	cmp	r3, #6
 8100688:	d902      	bls.n	8100690 <NVIC_EncodePriority+0x30>
 810068a:	69fb      	ldr	r3, [r7, #28]
 810068c:	3b03      	subs	r3, #3
 810068e:	e000      	b.n	8100692 <NVIC_EncodePriority+0x32>
 8100690:	2300      	movs	r3, #0
 8100692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100694:	f04f 32ff 	mov.w	r2, #4294967295
 8100698:	69bb      	ldr	r3, [r7, #24]
 810069a:	fa02 f303 	lsl.w	r3, r2, r3
 810069e:	43da      	mvns	r2, r3
 81006a0:	68bb      	ldr	r3, [r7, #8]
 81006a2:	401a      	ands	r2, r3
 81006a4:	697b      	ldr	r3, [r7, #20]
 81006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81006a8:	f04f 31ff 	mov.w	r1, #4294967295
 81006ac:	697b      	ldr	r3, [r7, #20]
 81006ae:	fa01 f303 	lsl.w	r3, r1, r3
 81006b2:	43d9      	mvns	r1, r3
 81006b4:	687b      	ldr	r3, [r7, #4]
 81006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81006b8:	4313      	orrs	r3, r2
         );
}
 81006ba:	4618      	mov	r0, r3
 81006bc:	3724      	adds	r7, #36	@ 0x24
 81006be:	46bd      	mov	sp, r7
 81006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c4:	4770      	bx	lr

081006c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006c6:	b580      	push	{r7, lr}
 81006c8:	b082      	sub	sp, #8
 81006ca:	af00      	add	r7, sp, #0
 81006cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81006ce:	6878      	ldr	r0, [r7, #4]
 81006d0:	f7ff ff6a 	bl	81005a8 <__NVIC_SetPriorityGrouping>
}
 81006d4:	bf00      	nop
 81006d6:	3708      	adds	r7, #8
 81006d8:	46bd      	mov	sp, r7
 81006da:	bd80      	pop	{r7, pc}

081006dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006dc:	b580      	push	{r7, lr}
 81006de:	b086      	sub	sp, #24
 81006e0:	af00      	add	r7, sp, #0
 81006e2:	4603      	mov	r3, r0
 81006e4:	60b9      	str	r1, [r7, #8]
 81006e6:	607a      	str	r2, [r7, #4]
 81006e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81006ea:	f7ff ff81 	bl	81005f0 <__NVIC_GetPriorityGrouping>
 81006ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81006f0:	687a      	ldr	r2, [r7, #4]
 81006f2:	68b9      	ldr	r1, [r7, #8]
 81006f4:	6978      	ldr	r0, [r7, #20]
 81006f6:	f7ff ffb3 	bl	8100660 <NVIC_EncodePriority>
 81006fa:	4602      	mov	r2, r0
 81006fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100700:	4611      	mov	r1, r2
 8100702:	4618      	mov	r0, r3
 8100704:	f7ff ff82 	bl	810060c <__NVIC_SetPriority>
}
 8100708:	bf00      	nop
 810070a:	3718      	adds	r7, #24
 810070c:	46bd      	mov	sp, r7
 810070e:	bd80      	pop	{r7, pc}

08100710 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100710:	b480      	push	{r7}
 8100712:	b083      	sub	sp, #12
 8100714:	af00      	add	r7, sp, #0
 8100716:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100718:	687b      	ldr	r3, [r7, #4]
 810071a:	3b01      	subs	r3, #1
 810071c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100720:	d301      	bcc.n	8100726 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8100722:	2301      	movs	r3, #1
 8100724:	e00d      	b.n	8100742 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8100726:	4a0a      	ldr	r2, [pc, #40]	@ (8100750 <HAL_SYSTICK_Config+0x40>)
 8100728:	687b      	ldr	r3, [r7, #4]
 810072a:	3b01      	subs	r3, #1
 810072c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 810072e:	4b08      	ldr	r3, [pc, #32]	@ (8100750 <HAL_SYSTICK_Config+0x40>)
 8100730:	2200      	movs	r2, #0
 8100732:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8100734:	4b06      	ldr	r3, [pc, #24]	@ (8100750 <HAL_SYSTICK_Config+0x40>)
 8100736:	681b      	ldr	r3, [r3, #0]
 8100738:	4a05      	ldr	r2, [pc, #20]	@ (8100750 <HAL_SYSTICK_Config+0x40>)
 810073a:	f043 0303 	orr.w	r3, r3, #3
 810073e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8100740:	2300      	movs	r3, #0
}
 8100742:	4618      	mov	r0, r3
 8100744:	370c      	adds	r7, #12
 8100746:	46bd      	mov	sp, r7
 8100748:	f85d 7b04 	ldr.w	r7, [sp], #4
 810074c:	4770      	bx	lr
 810074e:	bf00      	nop
 8100750:	e000e010 	.word	0xe000e010

08100754 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8100754:	b480      	push	{r7}
 8100756:	b083      	sub	sp, #12
 8100758:	af00      	add	r7, sp, #0
 810075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 810075c:	687b      	ldr	r3, [r7, #4]
 810075e:	2b04      	cmp	r3, #4
 8100760:	d844      	bhi.n	81007ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8100762:	a201      	add	r2, pc, #4	@ (adr r2, 8100768 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8100764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100768:	0810078b 	.word	0x0810078b
 810076c:	081007a9 	.word	0x081007a9
 8100770:	081007cb 	.word	0x081007cb
 8100774:	081007ed 	.word	0x081007ed
 8100778:	0810077d 	.word	0x0810077d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 810077c:	4b1f      	ldr	r3, [pc, #124]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810077e:	681b      	ldr	r3, [r3, #0]
 8100780:	4a1e      	ldr	r2, [pc, #120]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8100782:	f043 0304 	orr.w	r3, r3, #4
 8100786:	6013      	str	r3, [r2, #0]
      break;
 8100788:	e031      	b.n	81007ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 810078a:	4b1c      	ldr	r3, [pc, #112]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810078c:	681b      	ldr	r3, [r3, #0]
 810078e:	4a1b      	ldr	r2, [pc, #108]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8100790:	f023 0304 	bic.w	r3, r3, #4
 8100794:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8100796:	4b1a      	ldr	r3, [pc, #104]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8100798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810079c:	4a18      	ldr	r2, [pc, #96]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 810079e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81007a6:	e022      	b.n	81007ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81007a8:	4b14      	ldr	r3, [pc, #80]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007aa:	681b      	ldr	r3, [r3, #0]
 81007ac:	4a13      	ldr	r2, [pc, #76]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007ae:	f023 0304 	bic.w	r3, r3, #4
 81007b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 81007b4:	4b12      	ldr	r3, [pc, #72]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81007be:	4a10      	ldr	r2, [pc, #64]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81007c8:	e011      	b.n	81007ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81007ca:	4b0c      	ldr	r3, [pc, #48]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007cc:	681b      	ldr	r3, [r3, #0]
 81007ce:	4a0b      	ldr	r2, [pc, #44]	@ (81007fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007d0:	f023 0304 	bic.w	r3, r3, #4
 81007d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 81007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007dc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81007e0:	4a07      	ldr	r2, [pc, #28]	@ (8100800 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81007ea:	e000      	b.n	81007ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 81007ec:	bf00      	nop
  }
}
 81007ee:	bf00      	nop
 81007f0:	370c      	adds	r7, #12
 81007f2:	46bd      	mov	sp, r7
 81007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f8:	4770      	bx	lr
 81007fa:	bf00      	nop
 81007fc:	e000e010 	.word	0xe000e010
 8100800:	46020c00 	.word	0x46020c00

08100804 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8100804:	b480      	push	{r7}
 8100806:	b083      	sub	sp, #12
 8100808:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 810080a:	4b19      	ldr	r3, [pc, #100]	@ (8100870 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 810080c:	681b      	ldr	r3, [r3, #0]
 810080e:	f003 0304 	and.w	r3, r3, #4
 8100812:	2b00      	cmp	r3, #0
 8100814:	d002      	beq.n	810081c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8100816:	2304      	movs	r3, #4
 8100818:	607b      	str	r3, [r7, #4]
 810081a:	e021      	b.n	8100860 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 810081c:	4b15      	ldr	r3, [pc, #84]	@ (8100874 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 810081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100822:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8100826:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8100828:	683b      	ldr	r3, [r7, #0]
 810082a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810082e:	d011      	beq.n	8100854 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8100830:	683b      	ldr	r3, [r7, #0]
 8100832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8100836:	d810      	bhi.n	810085a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8100838:	683b      	ldr	r3, [r7, #0]
 810083a:	2b00      	cmp	r3, #0
 810083c:	d004      	beq.n	8100848 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 810083e:	683b      	ldr	r3, [r7, #0]
 8100840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8100844:	d003      	beq.n	810084e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8100846:	e008      	b.n	810085a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8100848:	2300      	movs	r3, #0
 810084a:	607b      	str	r3, [r7, #4]
        break;
 810084c:	e008      	b.n	8100860 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 810084e:	2301      	movs	r3, #1
 8100850:	607b      	str	r3, [r7, #4]
        break;
 8100852:	e005      	b.n	8100860 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8100854:	2302      	movs	r3, #2
 8100856:	607b      	str	r3, [r7, #4]
        break;
 8100858:	e002      	b.n	8100860 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 810085a:	2300      	movs	r3, #0
 810085c:	607b      	str	r3, [r7, #4]
        break;
 810085e:	bf00      	nop
    }
  }
  return systick_source;
 8100860:	687b      	ldr	r3, [r7, #4]
}
 8100862:	4618      	mov	r0, r3
 8100864:	370c      	adds	r7, #12
 8100866:	46bd      	mov	sp, r7
 8100868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810086c:	4770      	bx	lr
 810086e:	bf00      	nop
 8100870:	e000e010 	.word	0xe000e010
 8100874:	46020c00 	.word	0x46020c00

08100878 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8100878:	b480      	push	{r7}
 810087a:	b089      	sub	sp, #36	@ 0x24
 810087c:	af00      	add	r7, sp, #0
 810087e:	6078      	str	r0, [r7, #4]
 8100880:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8100882:	2300      	movs	r3, #0
 8100884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8100886:	687b      	ldr	r3, [r7, #4]
 8100888:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 810088a:	e1ba      	b.n	8100c02 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 810088c:	683b      	ldr	r3, [r7, #0]
 810088e:	681a      	ldr	r2, [r3, #0]
 8100890:	2101      	movs	r1, #1
 8100892:	697b      	ldr	r3, [r7, #20]
 8100894:	fa01 f303 	lsl.w	r3, r1, r3
 8100898:	4013      	ands	r3, r2
 810089a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 810089c:	697b      	ldr	r3, [r7, #20]
 810089e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 81008a0:	68fb      	ldr	r3, [r7, #12]
 81008a2:	2b00      	cmp	r3, #0
 81008a4:	f000 81aa 	beq.w	8100bfc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 81008a8:	687b      	ldr	r3, [r7, #4]
 81008aa:	4a55      	ldr	r2, [pc, #340]	@ (8100a00 <HAL_GPIO_Init+0x188>)
 81008ac:	4293      	cmp	r3, r2
 81008ae:	d15d      	bne.n	810096c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 81008b0:	687b      	ldr	r3, [r7, #4]
 81008b2:	681b      	ldr	r3, [r3, #0]
 81008b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 81008b6:	2201      	movs	r2, #1
 81008b8:	697b      	ldr	r3, [r7, #20]
 81008ba:	fa02 f303 	lsl.w	r3, r2, r3
 81008be:	43db      	mvns	r3, r3
 81008c0:	69fa      	ldr	r2, [r7, #28]
 81008c2:	4013      	ands	r3, r2
 81008c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 81008c6:	683b      	ldr	r3, [r7, #0]
 81008c8:	685b      	ldr	r3, [r3, #4]
 81008ca:	f003 0201 	and.w	r2, r3, #1
 81008ce:	697b      	ldr	r3, [r7, #20]
 81008d0:	fa02 f303 	lsl.w	r3, r2, r3
 81008d4:	69fa      	ldr	r2, [r7, #28]
 81008d6:	4313      	orrs	r3, r2
 81008d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 81008da:	687b      	ldr	r3, [r7, #4]
 81008dc:	69fa      	ldr	r2, [r7, #28]
 81008de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 81008e0:	4a48      	ldr	r2, [pc, #288]	@ (8100a04 <HAL_GPIO_Init+0x18c>)
 81008e2:	697b      	ldr	r3, [r7, #20]
 81008e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81008e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 81008ea:	4a46      	ldr	r2, [pc, #280]	@ (8100a04 <HAL_GPIO_Init+0x18c>)
 81008ec:	697b      	ldr	r3, [r7, #20]
 81008ee:	00db      	lsls	r3, r3, #3
 81008f0:	4413      	add	r3, r2
 81008f2:	685b      	ldr	r3, [r3, #4]
 81008f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 81008f6:	69bb      	ldr	r3, [r7, #24]
 81008f8:	08da      	lsrs	r2, r3, #3
 81008fa:	693b      	ldr	r3, [r7, #16]
 81008fc:	3208      	adds	r2, #8
 81008fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100902:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8100904:	69bb      	ldr	r3, [r7, #24]
 8100906:	f003 0307 	and.w	r3, r3, #7
 810090a:	009b      	lsls	r3, r3, #2
 810090c:	220f      	movs	r2, #15
 810090e:	fa02 f303 	lsl.w	r3, r2, r3
 8100912:	43db      	mvns	r3, r3
 8100914:	69fa      	ldr	r2, [r7, #28]
 8100916:	4013      	ands	r3, r2
 8100918:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 810091a:	69bb      	ldr	r3, [r7, #24]
 810091c:	f003 0307 	and.w	r3, r3, #7
 8100920:	009b      	lsls	r3, r3, #2
 8100922:	220b      	movs	r2, #11
 8100924:	fa02 f303 	lsl.w	r3, r2, r3
 8100928:	69fa      	ldr	r2, [r7, #28]
 810092a:	4313      	orrs	r3, r2
 810092c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 810092e:	69bb      	ldr	r3, [r7, #24]
 8100930:	08da      	lsrs	r2, r3, #3
 8100932:	693b      	ldr	r3, [r7, #16]
 8100934:	3208      	adds	r2, #8
 8100936:	69f9      	ldr	r1, [r7, #28]
 8100938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 810093c:	693b      	ldr	r3, [r7, #16]
 810093e:	681b      	ldr	r3, [r3, #0]
 8100940:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8100942:	69bb      	ldr	r3, [r7, #24]
 8100944:	005b      	lsls	r3, r3, #1
 8100946:	2203      	movs	r2, #3
 8100948:	fa02 f303 	lsl.w	r3, r2, r3
 810094c:	43db      	mvns	r3, r3
 810094e:	69fa      	ldr	r2, [r7, #28]
 8100950:	4013      	ands	r3, r2
 8100952:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8100954:	69bb      	ldr	r3, [r7, #24]
 8100956:	005b      	lsls	r3, r3, #1
 8100958:	2202      	movs	r2, #2
 810095a:	fa02 f303 	lsl.w	r3, r2, r3
 810095e:	69fa      	ldr	r2, [r7, #28]
 8100960:	4313      	orrs	r3, r2
 8100962:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8100964:	693b      	ldr	r3, [r7, #16]
 8100966:	69fa      	ldr	r2, [r7, #28]
 8100968:	601a      	str	r2, [r3, #0]
 810096a:	e067      	b.n	8100a3c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 810096c:	683b      	ldr	r3, [r7, #0]
 810096e:	685b      	ldr	r3, [r3, #4]
 8100970:	2b02      	cmp	r3, #2
 8100972:	d003      	beq.n	810097c <HAL_GPIO_Init+0x104>
 8100974:	683b      	ldr	r3, [r7, #0]
 8100976:	685b      	ldr	r3, [r3, #4]
 8100978:	2b12      	cmp	r3, #18
 810097a:	d145      	bne.n	8100a08 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 810097c:	697b      	ldr	r3, [r7, #20]
 810097e:	08da      	lsrs	r2, r3, #3
 8100980:	687b      	ldr	r3, [r7, #4]
 8100982:	3208      	adds	r2, #8
 8100984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100988:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 810098a:	697b      	ldr	r3, [r7, #20]
 810098c:	f003 0307 	and.w	r3, r3, #7
 8100990:	009b      	lsls	r3, r3, #2
 8100992:	220f      	movs	r2, #15
 8100994:	fa02 f303 	lsl.w	r3, r2, r3
 8100998:	43db      	mvns	r3, r3
 810099a:	69fa      	ldr	r2, [r7, #28]
 810099c:	4013      	ands	r3, r2
 810099e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 81009a0:	683b      	ldr	r3, [r7, #0]
 81009a2:	691b      	ldr	r3, [r3, #16]
 81009a4:	f003 020f 	and.w	r2, r3, #15
 81009a8:	697b      	ldr	r3, [r7, #20]
 81009aa:	f003 0307 	and.w	r3, r3, #7
 81009ae:	009b      	lsls	r3, r3, #2
 81009b0:	fa02 f303 	lsl.w	r3, r2, r3
 81009b4:	69fa      	ldr	r2, [r7, #28]
 81009b6:	4313      	orrs	r3, r2
 81009b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 81009ba:	697b      	ldr	r3, [r7, #20]
 81009bc:	08da      	lsrs	r2, r3, #3
 81009be:	687b      	ldr	r3, [r7, #4]
 81009c0:	3208      	adds	r2, #8
 81009c2:	69f9      	ldr	r1, [r7, #28]
 81009c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 81009c8:	693b      	ldr	r3, [r7, #16]
 81009ca:	681b      	ldr	r3, [r3, #0]
 81009cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 81009ce:	69bb      	ldr	r3, [r7, #24]
 81009d0:	005b      	lsls	r3, r3, #1
 81009d2:	2203      	movs	r2, #3
 81009d4:	fa02 f303 	lsl.w	r3, r2, r3
 81009d8:	43db      	mvns	r3, r3
 81009da:	69fa      	ldr	r2, [r7, #28]
 81009dc:	4013      	ands	r3, r2
 81009de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 81009e0:	683b      	ldr	r3, [r7, #0]
 81009e2:	685b      	ldr	r3, [r3, #4]
 81009e4:	f003 0203 	and.w	r2, r3, #3
 81009e8:	69bb      	ldr	r3, [r7, #24]
 81009ea:	005b      	lsls	r3, r3, #1
 81009ec:	fa02 f303 	lsl.w	r3, r2, r3
 81009f0:	69fa      	ldr	r2, [r7, #28]
 81009f2:	4313      	orrs	r3, r2
 81009f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 81009f6:	693b      	ldr	r3, [r7, #16]
 81009f8:	69fa      	ldr	r2, [r7, #28]
 81009fa:	601a      	str	r2, [r3, #0]
 81009fc:	e01e      	b.n	8100a3c <HAL_GPIO_Init+0x1c4>
 81009fe:	bf00      	nop
 8100a00:	46020000 	.word	0x46020000
 8100a04:	08100f38 	.word	0x08100f38
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8100a08:	693b      	ldr	r3, [r7, #16]
 8100a0a:	681b      	ldr	r3, [r3, #0]
 8100a0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8100a0e:	69bb      	ldr	r3, [r7, #24]
 8100a10:	005b      	lsls	r3, r3, #1
 8100a12:	2203      	movs	r2, #3
 8100a14:	fa02 f303 	lsl.w	r3, r2, r3
 8100a18:	43db      	mvns	r3, r3
 8100a1a:	69fa      	ldr	r2, [r7, #28]
 8100a1c:	4013      	ands	r3, r2
 8100a1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8100a20:	683b      	ldr	r3, [r7, #0]
 8100a22:	685b      	ldr	r3, [r3, #4]
 8100a24:	f003 0203 	and.w	r2, r3, #3
 8100a28:	69bb      	ldr	r3, [r7, #24]
 8100a2a:	005b      	lsls	r3, r3, #1
 8100a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8100a30:	69fa      	ldr	r2, [r7, #28]
 8100a32:	4313      	orrs	r3, r2
 8100a34:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8100a36:	693b      	ldr	r3, [r7, #16]
 8100a38:	69fa      	ldr	r2, [r7, #28]
 8100a3a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100a3c:	683b      	ldr	r3, [r7, #0]
 8100a3e:	685b      	ldr	r3, [r3, #4]
 8100a40:	2b01      	cmp	r3, #1
 8100a42:	d00b      	beq.n	8100a5c <HAL_GPIO_Init+0x1e4>
 8100a44:	683b      	ldr	r3, [r7, #0]
 8100a46:	685b      	ldr	r3, [r3, #4]
 8100a48:	2b02      	cmp	r3, #2
 8100a4a:	d007      	beq.n	8100a5c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100a4c:	683b      	ldr	r3, [r7, #0]
 8100a4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100a50:	2b11      	cmp	r3, #17
 8100a52:	d003      	beq.n	8100a5c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100a54:	683b      	ldr	r3, [r7, #0]
 8100a56:	685b      	ldr	r3, [r3, #4]
 8100a58:	2b12      	cmp	r3, #18
 8100a5a:	d130      	bne.n	8100abe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8100a5c:	693b      	ldr	r3, [r7, #16]
 8100a5e:	689b      	ldr	r3, [r3, #8]
 8100a60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8100a62:	69bb      	ldr	r3, [r7, #24]
 8100a64:	005b      	lsls	r3, r3, #1
 8100a66:	2203      	movs	r2, #3
 8100a68:	fa02 f303 	lsl.w	r3, r2, r3
 8100a6c:	43db      	mvns	r3, r3
 8100a6e:	69fa      	ldr	r2, [r7, #28]
 8100a70:	4013      	ands	r3, r2
 8100a72:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8100a74:	683b      	ldr	r3, [r7, #0]
 8100a76:	68da      	ldr	r2, [r3, #12]
 8100a78:	69bb      	ldr	r3, [r7, #24]
 8100a7a:	005b      	lsls	r3, r3, #1
 8100a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8100a80:	69fa      	ldr	r2, [r7, #28]
 8100a82:	4313      	orrs	r3, r2
 8100a84:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8100a86:	693b      	ldr	r3, [r7, #16]
 8100a88:	69fa      	ldr	r2, [r7, #28]
 8100a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8100a8c:	693b      	ldr	r3, [r7, #16]
 8100a8e:	685b      	ldr	r3, [r3, #4]
 8100a90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8100a92:	2201      	movs	r2, #1
 8100a94:	69bb      	ldr	r3, [r7, #24]
 8100a96:	fa02 f303 	lsl.w	r3, r2, r3
 8100a9a:	43db      	mvns	r3, r3
 8100a9c:	69fa      	ldr	r2, [r7, #28]
 8100a9e:	4013      	ands	r3, r2
 8100aa0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8100aa2:	683b      	ldr	r3, [r7, #0]
 8100aa4:	685b      	ldr	r3, [r3, #4]
 8100aa6:	091b      	lsrs	r3, r3, #4
 8100aa8:	f003 0201 	and.w	r2, r3, #1
 8100aac:	69bb      	ldr	r3, [r7, #24]
 8100aae:	fa02 f303 	lsl.w	r3, r2, r3
 8100ab2:	69fa      	ldr	r2, [r7, #28]
 8100ab4:	4313      	orrs	r3, r2
 8100ab6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8100ab8:	693b      	ldr	r3, [r7, #16]
 8100aba:	69fa      	ldr	r2, [r7, #28]
 8100abc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8100abe:	683b      	ldr	r3, [r7, #0]
 8100ac0:	685b      	ldr	r3, [r3, #4]
 8100ac2:	2b03      	cmp	r3, #3
 8100ac4:	d017      	beq.n	8100af6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8100ac6:	693b      	ldr	r3, [r7, #16]
 8100ac8:	68db      	ldr	r3, [r3, #12]
 8100aca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8100acc:	69bb      	ldr	r3, [r7, #24]
 8100ace:	005b      	lsls	r3, r3, #1
 8100ad0:	2203      	movs	r2, #3
 8100ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ad6:	43db      	mvns	r3, r3
 8100ad8:	69fa      	ldr	r2, [r7, #28]
 8100ada:	4013      	ands	r3, r2
 8100adc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8100ade:	683b      	ldr	r3, [r7, #0]
 8100ae0:	689a      	ldr	r2, [r3, #8]
 8100ae2:	69bb      	ldr	r3, [r7, #24]
 8100ae4:	005b      	lsls	r3, r3, #1
 8100ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8100aea:	69fa      	ldr	r2, [r7, #28]
 8100aec:	4313      	orrs	r3, r2
 8100aee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8100af0:	693b      	ldr	r3, [r7, #16]
 8100af2:	69fa      	ldr	r2, [r7, #28]
 8100af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8100af6:	683b      	ldr	r3, [r7, #0]
 8100af8:	685b      	ldr	r3, [r3, #4]
 8100afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8100afe:	2b00      	cmp	r3, #0
 8100b00:	d07c      	beq.n	8100bfc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8100b02:	4a47      	ldr	r2, [pc, #284]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b04:	697b      	ldr	r3, [r7, #20]
 8100b06:	089b      	lsrs	r3, r3, #2
 8100b08:	3318      	adds	r3, #24
 8100b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8100b10:	697b      	ldr	r3, [r7, #20]
 8100b12:	f003 0303 	and.w	r3, r3, #3
 8100b16:	00db      	lsls	r3, r3, #3
 8100b18:	220f      	movs	r2, #15
 8100b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b1e:	43db      	mvns	r3, r3
 8100b20:	69fa      	ldr	r2, [r7, #28]
 8100b22:	4013      	ands	r3, r2
 8100b24:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	0a9a      	lsrs	r2, r3, #10
 8100b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8100c24 <HAL_GPIO_Init+0x3ac>)
 8100b2c:	4013      	ands	r3, r2
 8100b2e:	697a      	ldr	r2, [r7, #20]
 8100b30:	f002 0203 	and.w	r2, r2, #3
 8100b34:	00d2      	lsls	r2, r2, #3
 8100b36:	4093      	lsls	r3, r2
 8100b38:	69fa      	ldr	r2, [r7, #28]
 8100b3a:	4313      	orrs	r3, r2
 8100b3c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8100b3e:	4938      	ldr	r1, [pc, #224]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b40:	697b      	ldr	r3, [r7, #20]
 8100b42:	089b      	lsrs	r3, r3, #2
 8100b44:	3318      	adds	r3, #24
 8100b46:	69fa      	ldr	r2, [r7, #28]
 8100b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8100b4c:	4b34      	ldr	r3, [pc, #208]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b4e:	681b      	ldr	r3, [r3, #0]
 8100b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100b52:	68fb      	ldr	r3, [r7, #12]
 8100b54:	43db      	mvns	r3, r3
 8100b56:	69fa      	ldr	r2, [r7, #28]
 8100b58:	4013      	ands	r3, r2
 8100b5a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8100b5c:	683b      	ldr	r3, [r7, #0]
 8100b5e:	685b      	ldr	r3, [r3, #4]
 8100b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d003      	beq.n	8100b70 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8100b68:	69fa      	ldr	r2, [r7, #28]
 8100b6a:	68fb      	ldr	r3, [r7, #12]
 8100b6c:	4313      	orrs	r3, r2
 8100b6e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8100b70:	4a2b      	ldr	r2, [pc, #172]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b72:	69fb      	ldr	r3, [r7, #28]
 8100b74:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8100b76:	4b2a      	ldr	r3, [pc, #168]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b78:	685b      	ldr	r3, [r3, #4]
 8100b7a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100b7c:	68fb      	ldr	r3, [r7, #12]
 8100b7e:	43db      	mvns	r3, r3
 8100b80:	69fa      	ldr	r2, [r7, #28]
 8100b82:	4013      	ands	r3, r2
 8100b84:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8100b86:	683b      	ldr	r3, [r7, #0]
 8100b88:	685b      	ldr	r3, [r3, #4]
 8100b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100b8e:	2b00      	cmp	r3, #0
 8100b90:	d003      	beq.n	8100b9a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8100b92:	69fa      	ldr	r2, [r7, #28]
 8100b94:	68fb      	ldr	r3, [r7, #12]
 8100b96:	4313      	orrs	r3, r2
 8100b98:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8100b9a:	4a21      	ldr	r2, [pc, #132]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100b9c:	69fb      	ldr	r3, [r7, #28]
 8100b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8100ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8100ba6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100ba8:	68fb      	ldr	r3, [r7, #12]
 8100baa:	43db      	mvns	r3, r3
 8100bac:	69fa      	ldr	r2, [r7, #28]
 8100bae:	4013      	ands	r3, r2
 8100bb0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	685b      	ldr	r3, [r3, #4]
 8100bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d003      	beq.n	8100bc6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8100bbe:	69fa      	ldr	r2, [r7, #28]
 8100bc0:	68fb      	ldr	r3, [r7, #12]
 8100bc2:	4313      	orrs	r3, r2
 8100bc4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8100bc6:	4a16      	ldr	r2, [pc, #88]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100bc8:	69fb      	ldr	r3, [r7, #28]
 8100bca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8100bce:	4b14      	ldr	r3, [pc, #80]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8100bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100bd6:	68fb      	ldr	r3, [r7, #12]
 8100bd8:	43db      	mvns	r3, r3
 8100bda:	69fa      	ldr	r2, [r7, #28]
 8100bdc:	4013      	ands	r3, r2
 8100bde:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8100be0:	683b      	ldr	r3, [r7, #0]
 8100be2:	685b      	ldr	r3, [r3, #4]
 8100be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100be8:	2b00      	cmp	r3, #0
 8100bea:	d003      	beq.n	8100bf4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8100bec:	69fa      	ldr	r2, [r7, #28]
 8100bee:	68fb      	ldr	r3, [r7, #12]
 8100bf0:	4313      	orrs	r3, r2
 8100bf2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8100bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8100c20 <HAL_GPIO_Init+0x3a8>)
 8100bf6:	69fb      	ldr	r3, [r7, #28]
 8100bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8100bfc:	697b      	ldr	r3, [r7, #20]
 8100bfe:	3301      	adds	r3, #1
 8100c00:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	681a      	ldr	r2, [r3, #0]
 8100c06:	697b      	ldr	r3, [r7, #20]
 8100c08:	fa22 f303 	lsr.w	r3, r2, r3
 8100c0c:	2b00      	cmp	r3, #0
 8100c0e:	f47f ae3d 	bne.w	810088c <HAL_GPIO_Init+0x14>
  }
}
 8100c12:	bf00      	nop
 8100c14:	bf00      	nop
 8100c16:	3724      	adds	r7, #36	@ 0x24
 8100c18:	46bd      	mov	sp, r7
 8100c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c1e:	4770      	bx	lr
 8100c20:	46022000 	.word	0x46022000
 8100c24:	002f7f7f 	.word	0x002f7f7f

08100c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100c28:	b480      	push	{r7}
 8100c2a:	b085      	sub	sp, #20
 8100c2c:	af00      	add	r7, sp, #0
 8100c2e:	6078      	str	r0, [r7, #4]
 8100c30:	460b      	mov	r3, r1
 8100c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8100c34:	687b      	ldr	r3, [r7, #4]
 8100c36:	691a      	ldr	r2, [r3, #16]
 8100c38:	887b      	ldrh	r3, [r7, #2]
 8100c3a:	4013      	ands	r3, r2
 8100c3c:	2b00      	cmp	r3, #0
 8100c3e:	d002      	beq.n	8100c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8100c40:	2301      	movs	r3, #1
 8100c42:	73fb      	strb	r3, [r7, #15]
 8100c44:	e001      	b.n	8100c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8100c46:	2300      	movs	r3, #0
 8100c48:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8100c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8100c4c:	4618      	mov	r0, r3
 8100c4e:	3714      	adds	r7, #20
 8100c50:	46bd      	mov	sp, r7
 8100c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c56:	4770      	bx	lr

08100c58 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8100c58:	b480      	push	{r7}
 8100c5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8100c5c:	4b05      	ldr	r3, [pc, #20]	@ (8100c74 <HAL_PWREx_EnableVddA+0x1c>)
 8100c5e:	691b      	ldr	r3, [r3, #16]
 8100c60:	4a04      	ldr	r2, [pc, #16]	@ (8100c74 <HAL_PWREx_EnableVddA+0x1c>)
 8100c62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8100c66:	6113      	str	r3, [r2, #16]
}
 8100c68:	bf00      	nop
 8100c6a:	46bd      	mov	sp, r7
 8100c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c70:	4770      	bx	lr
 8100c72:	bf00      	nop
 8100c74:	46020800 	.word	0x46020800

08100c78 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100c78:	b480      	push	{r7}
 8100c7a:	b08b      	sub	sp, #44	@ 0x2c
 8100c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8100c7e:	2300      	movs	r3, #0
 8100c80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8100c82:	2300      	movs	r3, #0
 8100c84:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8100c86:	4b78      	ldr	r3, [pc, #480]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100c88:	69db      	ldr	r3, [r3, #28]
 8100c8a:	f003 030c 	and.w	r3, r3, #12
 8100c8e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8100c90:	4b75      	ldr	r3, [pc, #468]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100c94:	f003 0303 	and.w	r3, r3, #3
 8100c98:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8100c9a:	69bb      	ldr	r3, [r7, #24]
 8100c9c:	2b00      	cmp	r3, #0
 8100c9e:	d005      	beq.n	8100cac <HAL_RCC_GetSysClockFreq+0x34>
 8100ca0:	69bb      	ldr	r3, [r7, #24]
 8100ca2:	2b0c      	cmp	r3, #12
 8100ca4:	d121      	bne.n	8100cea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8100ca6:	697b      	ldr	r3, [r7, #20]
 8100ca8:	2b01      	cmp	r3, #1
 8100caa:	d11e      	bne.n	8100cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8100cac:	4b6e      	ldr	r3, [pc, #440]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100cae:	689b      	ldr	r3, [r3, #8]
 8100cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8100cb4:	2b00      	cmp	r3, #0
 8100cb6:	d107      	bne.n	8100cc8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8100cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100cbe:	0b1b      	lsrs	r3, r3, #12
 8100cc0:	f003 030f 	and.w	r3, r3, #15
 8100cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8100cc6:	e005      	b.n	8100cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8100cc8:	4b67      	ldr	r3, [pc, #412]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100cca:	689b      	ldr	r3, [r3, #8]
 8100ccc:	0f1b      	lsrs	r3, r3, #28
 8100cce:	f003 030f 	and.w	r3, r3, #15
 8100cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8100cd4:	4a65      	ldr	r2, [pc, #404]	@ (8100e6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8100cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100cdc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100cde:	69bb      	ldr	r3, [r7, #24]
 8100ce0:	2b00      	cmp	r3, #0
 8100ce2:	d110      	bne.n	8100d06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8100ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100ce6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100ce8:	e00d      	b.n	8100d06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8100cea:	4b5f      	ldr	r3, [pc, #380]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100cec:	69db      	ldr	r3, [r3, #28]
 8100cee:	f003 030c 	and.w	r3, r3, #12
 8100cf2:	2b04      	cmp	r3, #4
 8100cf4:	d102      	bne.n	8100cfc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8100cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8100e70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8100cf8:	623b      	str	r3, [r7, #32]
 8100cfa:	e004      	b.n	8100d06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8100cfc:	69bb      	ldr	r3, [r7, #24]
 8100cfe:	2b08      	cmp	r3, #8
 8100d00:	d101      	bne.n	8100d06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8100d02:	4b5b      	ldr	r3, [pc, #364]	@ (8100e70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8100d04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8100d06:	69bb      	ldr	r3, [r7, #24]
 8100d08:	2b0c      	cmp	r3, #12
 8100d0a:	f040 80a5 	bne.w	8100e58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8100d0e:	4b56      	ldr	r3, [pc, #344]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100d12:	f003 0303 	and.w	r3, r3, #3
 8100d16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8100d18:	4b53      	ldr	r3, [pc, #332]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100d1c:	0a1b      	lsrs	r3, r3, #8
 8100d1e:	f003 030f 	and.w	r3, r3, #15
 8100d22:	3301      	adds	r3, #1
 8100d24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8100d26:	4b50      	ldr	r3, [pc, #320]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100d2a:	091b      	lsrs	r3, r3, #4
 8100d2c:	f003 0301 	and.w	r3, r3, #1
 8100d30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8100d32:	4b4d      	ldr	r3, [pc, #308]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8100d36:	08db      	lsrs	r3, r3, #3
 8100d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100d3c:	68ba      	ldr	r2, [r7, #8]
 8100d3e:	fb02 f303 	mul.w	r3, r2, r3
 8100d42:	ee07 3a90 	vmov	s15, r3
 8100d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8100d4e:	693b      	ldr	r3, [r7, #16]
 8100d50:	2b02      	cmp	r3, #2
 8100d52:	d003      	beq.n	8100d5c <HAL_RCC_GetSysClockFreq+0xe4>
 8100d54:	693b      	ldr	r3, [r7, #16]
 8100d56:	2b03      	cmp	r3, #3
 8100d58:	d022      	beq.n	8100da0 <HAL_RCC_GetSysClockFreq+0x128>
 8100d5a:	e043      	b.n	8100de4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100d5c:	68fb      	ldr	r3, [r7, #12]
 8100d5e:	ee07 3a90 	vmov	s15, r3
 8100d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d66:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8100e74 <HAL_RCC_GetSysClockFreq+0x1fc>
 8100d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100d76:	ee07 3a90 	vmov	s15, r3
 8100d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100d7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8100d82:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8100e78 <HAL_RCC_GetSysClockFreq+0x200>
 8100d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100d9e:	e046      	b.n	8100e2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100da0:	68fb      	ldr	r3, [r7, #12]
 8100da2:	ee07 3a90 	vmov	s15, r3
 8100da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100daa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8100e74 <HAL_RCC_GetSysClockFreq+0x1fc>
 8100dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100db2:	4b2d      	ldr	r3, [pc, #180]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100dba:	ee07 3a90 	vmov	s15, r3
 8100dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100dc2:	ed97 6a01 	vldr	s12, [r7, #4]
 8100dc6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8100e78 <HAL_RCC_GetSysClockFreq+0x200>
 8100dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100de2:	e024      	b.n	8100e2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100de6:	ee07 3a90 	vmov	s15, r3
 8100dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100dee:	68fb      	ldr	r3, [r7, #12]
 8100df0:	ee07 3a90 	vmov	s15, r3
 8100df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100e04:	ee07 3a90 	vmov	s15, r3
 8100e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100e0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8100e10:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8100e78 <HAL_RCC_GetSysClockFreq+0x200>
 8100e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8100e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100e2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8100e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8100e68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100e32:	0e1b      	lsrs	r3, r3, #24
 8100e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100e38:	3301      	adds	r3, #1
 8100e3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8100e3c:	683b      	ldr	r3, [r7, #0]
 8100e3e:	ee07 3a90 	vmov	s15, r3
 8100e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8100e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100e52:	ee17 3a90 	vmov	r3, s15
 8100e56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8100e58:	6a3b      	ldr	r3, [r7, #32]
}
 8100e5a:	4618      	mov	r0, r3
 8100e5c:	372c      	adds	r7, #44	@ 0x2c
 8100e5e:	46bd      	mov	sp, r7
 8100e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e64:	4770      	bx	lr
 8100e66:	bf00      	nop
 8100e68:	46020c00 	.word	0x46020c00
 8100e6c:	08100ef8 	.word	0x08100ef8
 8100e70:	00f42400 	.word	0x00f42400
 8100e74:	4b742400 	.word	0x4b742400
 8100e78:	46000000 	.word	0x46000000

08100e7c <__libc_init_array>:
 8100e7c:	b570      	push	{r4, r5, r6, lr}
 8100e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8100eb4 <__libc_init_array+0x38>)
 8100e80:	2600      	movs	r6, #0
 8100e82:	4c0d      	ldr	r4, [pc, #52]	@ (8100eb8 <__libc_init_array+0x3c>)
 8100e84:	1b64      	subs	r4, r4, r5
 8100e86:	10a4      	asrs	r4, r4, #2
 8100e88:	42a6      	cmp	r6, r4
 8100e8a:	d109      	bne.n	8100ea0 <__libc_init_array+0x24>
 8100e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8100ebc <__libc_init_array+0x40>)
 8100e8e:	2600      	movs	r6, #0
 8100e90:	4c0b      	ldr	r4, [pc, #44]	@ (8100ec0 <__libc_init_array+0x44>)
 8100e92:	f000 f817 	bl	8100ec4 <_init>
 8100e96:	1b64      	subs	r4, r4, r5
 8100e98:	10a4      	asrs	r4, r4, #2
 8100e9a:	42a6      	cmp	r6, r4
 8100e9c:	d105      	bne.n	8100eaa <__libc_init_array+0x2e>
 8100e9e:	bd70      	pop	{r4, r5, r6, pc}
 8100ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8100ea4:	3601      	adds	r6, #1
 8100ea6:	4798      	blx	r3
 8100ea8:	e7ee      	b.n	8100e88 <__libc_init_array+0xc>
 8100eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8100eae:	3601      	adds	r6, #1
 8100eb0:	4798      	blx	r3
 8100eb2:	e7f2      	b.n	8100e9a <__libc_init_array+0x1e>
 8100eb4:	08100fb8 	.word	0x08100fb8
 8100eb8:	08100fb8 	.word	0x08100fb8
 8100ebc:	08100fb8 	.word	0x08100fb8
 8100ec0:	08100fbc 	.word	0x08100fbc

08100ec4 <_init>:
 8100ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100ec6:	bf00      	nop
 8100ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100eca:	bc08      	pop	{r3}
 8100ecc:	469e      	mov	lr, r3
 8100ece:	4770      	bx	lr

08100ed0 <_fini>:
 8100ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100ed2:	bf00      	nop
 8100ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100ed6:	bc08      	pop	{r3}
 8100ed8:	469e      	mov	lr, r3
 8100eda:	4770      	bx	lr
 8100edc:	0000      	movs	r0, r0
	...

08100ee0 <__Toggle_Pin_veneer>:
 8100ee0:	f85f f000 	ldr.w	pc, [pc]	@ 8100ee4 <__Toggle_Pin_veneer+0x4>
 8100ee4:	0c0fe011 	.word	0x0c0fe011
